// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: world.proto

#include "world.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Aircraft_world_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Aircraft_Situation_world_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Airport_world_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AirspaceGeometry_world_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Attitude_world_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientToServer_Connect_world_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClientToServer_CreateAircraft_world_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientToServer_QueryAirport_world_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClientToServer_QueryTaxiPath_world_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientToServer_RemoveAircraft_world_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClientToServer_UpdateAircraftSituation_world_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeoPoint_world_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeoPolygon_world_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeoPolygon_GeoEdge_world_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ParkingStand_world_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Runway_world_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Runway_End_world_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerToClient_FaultDeclined_world_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerToClient_FaultNotFound_world_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServerToClient_NotifyAircraftCreated_world_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerToClient_NotifyAircraftRemoved_world_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServerToClient_NotifyAircraftSituationUpdated_world_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerToClient_ReplyConnect_world_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerToClient_ReplyCreateAircraft_world_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServerToClient_ReplyQueryAirport_world_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServerToClient_ReplyQueryTaxiPath_world_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TaxiEdge_world_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TaxiEdge_ActiveZoneMatrix_world_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TaxiNode_world_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TaxiPath_world_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3d_world_2eproto;
namespace world_proto {
class GeoPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeoPoint> _instance;
} _GeoPoint_default_instance_;
class GeoBoxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeoBox> _instance;
} _GeoBox_default_instance_;
class Vector3dDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vector3d> _instance;
} _Vector3d_default_instance_;
class AttitudeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Attitude> _instance;
} _Attitude_default_instance_;
class Aircraft_SituationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Aircraft_Situation> _instance;
} _Aircraft_Situation_default_instance_;
class AircraftDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Aircraft> _instance;
} _Aircraft_default_instance_;
class Runway_EndDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Runway_End> _instance;
} _Runway_End_default_instance_;
class RunwayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Runway> _instance;
} _Runway_default_instance_;
class TaxiNodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TaxiNode> _instance;
} _TaxiNode_default_instance_;
class TaxiEdge_ActiveZoneMatrixDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TaxiEdge_ActiveZoneMatrix> _instance;
} _TaxiEdge_ActiveZoneMatrix_default_instance_;
class TaxiEdgeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TaxiEdge> _instance;
} _TaxiEdge_default_instance_;
class ParkingStandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ParkingStand> _instance;
} _ParkingStand_default_instance_;
class AirportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Airport> _instance;
} _Airport_default_instance_;
class TaxiPathDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TaxiPath> _instance;
} _TaxiPath_default_instance_;
class GeoPolygon_GeoEdgeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeoPolygon_GeoEdge> _instance;
} _GeoPolygon_GeoEdge_default_instance_;
class GeoPolygonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeoPolygon> _instance;
} _GeoPolygon_default_instance_;
class AirspaceGeometryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AirspaceGeometry> _instance;
} _AirspaceGeometry_default_instance_;
class ControlledAirspaceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ControlledAirspace> _instance;
} _ControlledAirspace_default_instance_;
class ControlFacilityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ControlFacility> _instance;
} _ControlFacility_default_instance_;
class ClientToServer_ConnectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientToServer_Connect> _instance;
} _ClientToServer_Connect_default_instance_;
class ClientToServer_QueryAirportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientToServer_QueryAirport> _instance;
} _ClientToServer_QueryAirport_default_instance_;
class ClientToServer_QueryTaxiPathDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientToServer_QueryTaxiPath> _instance;
} _ClientToServer_QueryTaxiPath_default_instance_;
class ClientToServer_CreateAircraftDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientToServer_CreateAircraft> _instance;
} _ClientToServer_CreateAircraft_default_instance_;
class ClientToServer_UpdateAircraftSituationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientToServer_UpdateAircraftSituation> _instance;
} _ClientToServer_UpdateAircraftSituation_default_instance_;
class ClientToServer_RemoveAircraftDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientToServer_RemoveAircraft> _instance;
} _ClientToServer_RemoveAircraft_default_instance_;
class ClientToServerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientToServer> _instance;
  const ::world_proto::ClientToServer_Connect* connect_;
  const ::world_proto::ClientToServer_QueryAirport* query_airport_;
  const ::world_proto::ClientToServer_CreateAircraft* create_aircraft_;
  const ::world_proto::ClientToServer_UpdateAircraftSituation* update_aircraft_situation_;
  const ::world_proto::ClientToServer_RemoveAircraft* remove_aircraft_;
  const ::world_proto::ClientToServer_QueryTaxiPath* query_taxi_path_;
} _ClientToServer_default_instance_;
class ServerToClient_FaultDeclinedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerToClient_FaultDeclined> _instance;
} _ServerToClient_FaultDeclined_default_instance_;
class ServerToClient_FaultNotFoundDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerToClient_FaultNotFound> _instance;
} _ServerToClient_FaultNotFound_default_instance_;
class ServerToClient_ReplyConnectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerToClient_ReplyConnect> _instance;
} _ServerToClient_ReplyConnect_default_instance_;
class ServerToClient_ReplyCreateAircraftDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerToClient_ReplyCreateAircraft> _instance;
} _ServerToClient_ReplyCreateAircraft_default_instance_;
class ServerToClient_ReplyQueryAirportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerToClient_ReplyQueryAirport> _instance;
} _ServerToClient_ReplyQueryAirport_default_instance_;
class ServerToClient_ReplyQueryTaxiPathDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerToClient_ReplyQueryTaxiPath> _instance;
} _ServerToClient_ReplyQueryTaxiPath_default_instance_;
class ServerToClient_NotifyAircraftCreatedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerToClient_NotifyAircraftCreated> _instance;
} _ServerToClient_NotifyAircraftCreated_default_instance_;
class ServerToClient_NotifyAircraftSituationUpdatedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerToClient_NotifyAircraftSituationUpdated> _instance;
} _ServerToClient_NotifyAircraftSituationUpdated_default_instance_;
class ServerToClient_NotifyAircraftRemovedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerToClient_NotifyAircraftRemoved> _instance;
} _ServerToClient_NotifyAircraftRemoved_default_instance_;
class ServerToClientDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerToClient> _instance;
  const ::world_proto::ServerToClient_ReplyConnect* reply_connect_;
  const ::world_proto::ServerToClient_ReplyQueryAirport* reply_query_airport_;
  const ::world_proto::ServerToClient_ReplyCreateAircraft* reply_create_aircraft_;
  const ::world_proto::ServerToClient_ReplyQueryTaxiPath* reply_query_taxi_path_;
  const ::world_proto::ServerToClient_NotifyAircraftCreated* notify_aircraft_created_;
  const ::world_proto::ServerToClient_NotifyAircraftSituationUpdated* notify_aircraft_situation_updated_;
  const ::world_proto::ServerToClient_NotifyAircraftRemoved* notify_aircraft_removed_;
  const ::world_proto::ServerToClient_FaultDeclined* fault_declined_;
  const ::world_proto::ServerToClient_FaultNotFound* fault_not_found_;
} _ServerToClient_default_instance_;
}  // namespace world_proto
static void InitDefaultsscc_info_Aircraft_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world_proto::_Aircraft_default_instance_;
    new (ptr) ::world_proto::Aircraft();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world_proto::Aircraft::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Aircraft_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Aircraft_world_2eproto}, {
      &scc_info_Aircraft_Situation_world_2eproto.base,}};

static void InitDefaultsscc_info_Aircraft_Situation_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world_proto::_Aircraft_Situation_default_instance_;
    new (ptr) ::world_proto::Aircraft_Situation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world_proto::Aircraft_Situation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Aircraft_Situation_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Aircraft_Situation_world_2eproto}, {
      &scc_info_Vector3d_world_2eproto.base,
      &scc_info_Attitude_world_2eproto.base,}};

static void InitDefaultsscc_info_Airport_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world_proto::_Airport_default_instance_;
    new (ptr) ::world_proto::Airport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world_proto::Airport::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Airport_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_Airport_world_2eproto}, {
      &scc_info_GeoPoint_world_2eproto.base,
      &scc_info_Runway_world_2eproto.base,
      &scc_info_ParkingStand_world_2eproto.base,
      &scc_info_TaxiNode_world_2eproto.base,
      &scc_info_TaxiEdge_world_2eproto.base,}};

static void InitDefaultsscc_info_AirspaceGeometry_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world_proto::_AirspaceGeometry_default_instance_;
    new (ptr) ::world_proto::AirspaceGeometry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world_proto::AirspaceGeometry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AirspaceGeometry_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AirspaceGeometry_world_2eproto}, {
      &scc_info_GeoPolygon_world_2eproto.base,}};

static void InitDefaultsscc_info_Attitude_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world_proto::_Attitude_default_instance_;
    new (ptr) ::world_proto::Attitude();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world_proto::Attitude::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Attitude_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Attitude_world_2eproto}, {}};

static void InitDefaultsscc_info_ClientToServer_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world_proto::_ClientToServer_default_instance_;
    new (ptr) ::world_proto::ClientToServer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world_proto::ClientToServer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_ClientToServer_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_ClientToServer_world_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_ClientToServer_Connect_world_2eproto.base,
      &scc_info_ClientToServer_QueryAirport_world_2eproto.base,
      &scc_info_ClientToServer_CreateAircraft_world_2eproto.base,
      &scc_info_ClientToServer_UpdateAircraftSituation_world_2eproto.base,
      &scc_info_ClientToServer_RemoveAircraft_world_2eproto.base,
      &scc_info_ClientToServer_QueryTaxiPath_world_2eproto.base,}};

static void InitDefaultsscc_info_ClientToServer_Connect_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world_proto::_ClientToServer_Connect_default_instance_;
    new (ptr) ::world_proto::ClientToServer_Connect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world_proto::ClientToServer_Connect::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientToServer_Connect_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClientToServer_Connect_world_2eproto}, {}};

static void InitDefaultsscc_info_ClientToServer_CreateAircraft_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world_proto::_ClientToServer_CreateAircraft_default_instance_;
    new (ptr) ::world_proto::ClientToServer_CreateAircraft();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world_proto::ClientToServer_CreateAircraft::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClientToServer_CreateAircraft_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ClientToServer_CreateAircraft_world_2eproto}, {
      &scc_info_Aircraft_world_2eproto.base,}};

static void InitDefaultsscc_info_ClientToServer_QueryAirport_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world_proto::_ClientToServer_QueryAirport_default_instance_;
    new (ptr) ::world_proto::ClientToServer_QueryAirport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world_proto::ClientToServer_QueryAirport::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientToServer_QueryAirport_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClientToServer_QueryAirport_world_2eproto}, {}};

static void InitDefaultsscc_info_ClientToServer_QueryTaxiPath_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world_proto::_ClientToServer_QueryTaxiPath_default_instance_;
    new (ptr) ::world_proto::ClientToServer_QueryTaxiPath();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world_proto::ClientToServer_QueryTaxiPath::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClientToServer_QueryTaxiPath_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ClientToServer_QueryTaxiPath_world_2eproto}, {
      &scc_info_GeoPoint_world_2eproto.base,}};

static void InitDefaultsscc_info_ClientToServer_RemoveAircraft_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world_proto::_ClientToServer_RemoveAircraft_default_instance_;
    new (ptr) ::world_proto::ClientToServer_RemoveAircraft();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world_proto::ClientToServer_RemoveAircraft::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientToServer_RemoveAircraft_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClientToServer_RemoveAircraft_world_2eproto}, {}};

static void InitDefaultsscc_info_ClientToServer_UpdateAircraftSituation_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world_proto::_ClientToServer_UpdateAircraftSituation_default_instance_;
    new (ptr) ::world_proto::ClientToServer_UpdateAircraftSituation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world_proto::ClientToServer_UpdateAircraftSituation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClientToServer_UpdateAircraftSituation_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ClientToServer_UpdateAircraftSituation_world_2eproto}, {
      &scc_info_Aircraft_Situation_world_2eproto.base,}};

static void InitDefaultsscc_info_ControlFacility_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world_proto::_ControlFacility_default_instance_;
    new (ptr) ::world_proto::ControlFacility();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world_proto::ControlFacility::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ControlFacility_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ControlFacility_world_2eproto}, {}};

static void InitDefaultsscc_info_ControlledAirspace_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world_proto::_ControlledAirspace_default_instance_;
    new (ptr) ::world_proto::ControlledAirspace();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world_proto::ControlledAirspace::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ControlledAirspace_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ControlledAirspace_world_2eproto}, {
      &scc_info_AirspaceGeometry_world_2eproto.base,}};

static void InitDefaultsscc_info_GeoBox_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world_proto::_GeoBox_default_instance_;
    new (ptr) ::world_proto::GeoBox();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world_proto::GeoBox::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeoBox_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GeoBox_world_2eproto}, {
      &scc_info_GeoPoint_world_2eproto.base,}};

static void InitDefaultsscc_info_GeoPoint_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world_proto::_GeoPoint_default_instance_;
    new (ptr) ::world_proto::GeoPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world_proto::GeoPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeoPoint_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GeoPoint_world_2eproto}, {}};

static void InitDefaultsscc_info_GeoPolygon_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world_proto::_GeoPolygon_default_instance_;
    new (ptr) ::world_proto::GeoPolygon();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world_proto::GeoPolygon::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeoPolygon_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GeoPolygon_world_2eproto}, {
      &scc_info_GeoPolygon_GeoEdge_world_2eproto.base,}};

static void InitDefaultsscc_info_GeoPolygon_GeoEdge_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world_proto::_GeoPolygon_GeoEdge_default_instance_;
    new (ptr) ::world_proto::GeoPolygon_GeoEdge();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world_proto::GeoPolygon_GeoEdge::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeoPolygon_GeoEdge_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GeoPolygon_GeoEdge_world_2eproto}, {
      &scc_info_GeoPoint_world_2eproto.base,}};

static void InitDefaultsscc_info_ParkingStand_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world_proto::_ParkingStand_default_instance_;
    new (ptr) ::world_proto::ParkingStand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world_proto::ParkingStand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ParkingStand_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ParkingStand_world_2eproto}, {
      &scc_info_GeoPoint_world_2eproto.base,}};

static void InitDefaultsscc_info_Runway_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world_proto::_Runway_default_instance_;
    new (ptr) ::world_proto::Runway();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world_proto::Runway::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Runway_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Runway_world_2eproto}, {
      &scc_info_Runway_End_world_2eproto.base,}};

static void InitDefaultsscc_info_Runway_End_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world_proto::_Runway_End_default_instance_;
    new (ptr) ::world_proto::Runway_End();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world_proto::Runway_End::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Runway_End_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Runway_End_world_2eproto}, {
      &scc_info_GeoPoint_world_2eproto.base,}};

static void InitDefaultsscc_info_ServerToClient_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world_proto::_ServerToClient_default_instance_;
    new (ptr) ::world_proto::ServerToClient();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world_proto::ServerToClient::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_ServerToClient_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 10, 0, InitDefaultsscc_info_ServerToClient_world_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_ServerToClient_ReplyConnect_world_2eproto.base,
      &scc_info_ServerToClient_ReplyQueryAirport_world_2eproto.base,
      &scc_info_ServerToClient_ReplyCreateAircraft_world_2eproto.base,
      &scc_info_ServerToClient_ReplyQueryTaxiPath_world_2eproto.base,
      &scc_info_ServerToClient_NotifyAircraftCreated_world_2eproto.base,
      &scc_info_ServerToClient_NotifyAircraftSituationUpdated_world_2eproto.base,
      &scc_info_ServerToClient_NotifyAircraftRemoved_world_2eproto.base,
      &scc_info_ServerToClient_FaultDeclined_world_2eproto.base,
      &scc_info_ServerToClient_FaultNotFound_world_2eproto.base,}};

static void InitDefaultsscc_info_ServerToClient_FaultDeclined_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world_proto::_ServerToClient_FaultDeclined_default_instance_;
    new (ptr) ::world_proto::ServerToClient_FaultDeclined();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world_proto::ServerToClient_FaultDeclined::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerToClient_FaultDeclined_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServerToClient_FaultDeclined_world_2eproto}, {}};

static void InitDefaultsscc_info_ServerToClient_FaultNotFound_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world_proto::_ServerToClient_FaultNotFound_default_instance_;
    new (ptr) ::world_proto::ServerToClient_FaultNotFound();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world_proto::ServerToClient_FaultNotFound::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerToClient_FaultNotFound_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServerToClient_FaultNotFound_world_2eproto}, {}};

static void InitDefaultsscc_info_ServerToClient_NotifyAircraftCreated_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world_proto::_ServerToClient_NotifyAircraftCreated_default_instance_;
    new (ptr) ::world_proto::ServerToClient_NotifyAircraftCreated();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world_proto::ServerToClient_NotifyAircraftCreated::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServerToClient_NotifyAircraftCreated_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ServerToClient_NotifyAircraftCreated_world_2eproto}, {
      &scc_info_Aircraft_world_2eproto.base,}};

static void InitDefaultsscc_info_ServerToClient_NotifyAircraftRemoved_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world_proto::_ServerToClient_NotifyAircraftRemoved_default_instance_;
    new (ptr) ::world_proto::ServerToClient_NotifyAircraftRemoved();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world_proto::ServerToClient_NotifyAircraftRemoved::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerToClient_NotifyAircraftRemoved_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServerToClient_NotifyAircraftRemoved_world_2eproto}, {}};

static void InitDefaultsscc_info_ServerToClient_NotifyAircraftSituationUpdated_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world_proto::_ServerToClient_NotifyAircraftSituationUpdated_default_instance_;
    new (ptr) ::world_proto::ServerToClient_NotifyAircraftSituationUpdated();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world_proto::ServerToClient_NotifyAircraftSituationUpdated::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServerToClient_NotifyAircraftSituationUpdated_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ServerToClient_NotifyAircraftSituationUpdated_world_2eproto}, {
      &scc_info_Aircraft_Situation_world_2eproto.base,}};

static void InitDefaultsscc_info_ServerToClient_ReplyConnect_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world_proto::_ServerToClient_ReplyConnect_default_instance_;
    new (ptr) ::world_proto::ServerToClient_ReplyConnect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world_proto::ServerToClient_ReplyConnect::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerToClient_ReplyConnect_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServerToClient_ReplyConnect_world_2eproto}, {}};

static void InitDefaultsscc_info_ServerToClient_ReplyCreateAircraft_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world_proto::_ServerToClient_ReplyCreateAircraft_default_instance_;
    new (ptr) ::world_proto::ServerToClient_ReplyCreateAircraft();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world_proto::ServerToClient_ReplyCreateAircraft::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerToClient_ReplyCreateAircraft_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServerToClient_ReplyCreateAircraft_world_2eproto}, {}};

static void InitDefaultsscc_info_ServerToClient_ReplyQueryAirport_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world_proto::_ServerToClient_ReplyQueryAirport_default_instance_;
    new (ptr) ::world_proto::ServerToClient_ReplyQueryAirport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world_proto::ServerToClient_ReplyQueryAirport::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServerToClient_ReplyQueryAirport_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ServerToClient_ReplyQueryAirport_world_2eproto}, {
      &scc_info_Airport_world_2eproto.base,}};

static void InitDefaultsscc_info_ServerToClient_ReplyQueryTaxiPath_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world_proto::_ServerToClient_ReplyQueryTaxiPath_default_instance_;
    new (ptr) ::world_proto::ServerToClient_ReplyQueryTaxiPath();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world_proto::ServerToClient_ReplyQueryTaxiPath::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServerToClient_ReplyQueryTaxiPath_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ServerToClient_ReplyQueryTaxiPath_world_2eproto}, {
      &scc_info_TaxiPath_world_2eproto.base,}};

static void InitDefaultsscc_info_TaxiEdge_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world_proto::_TaxiEdge_default_instance_;
    new (ptr) ::world_proto::TaxiEdge();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world_proto::TaxiEdge::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TaxiEdge_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TaxiEdge_world_2eproto}, {
      &scc_info_TaxiEdge_ActiveZoneMatrix_world_2eproto.base,}};

static void InitDefaultsscc_info_TaxiEdge_ActiveZoneMatrix_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world_proto::_TaxiEdge_ActiveZoneMatrix_default_instance_;
    new (ptr) ::world_proto::TaxiEdge_ActiveZoneMatrix();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world_proto::TaxiEdge_ActiveZoneMatrix::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TaxiEdge_ActiveZoneMatrix_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TaxiEdge_ActiveZoneMatrix_world_2eproto}, {}};

static void InitDefaultsscc_info_TaxiNode_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world_proto::_TaxiNode_default_instance_;
    new (ptr) ::world_proto::TaxiNode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world_proto::TaxiNode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TaxiNode_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TaxiNode_world_2eproto}, {
      &scc_info_GeoPoint_world_2eproto.base,}};

static void InitDefaultsscc_info_TaxiPath_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world_proto::_TaxiPath_default_instance_;
    new (ptr) ::world_proto::TaxiPath();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world_proto::TaxiPath::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TaxiPath_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TaxiPath_world_2eproto}, {}};

static void InitDefaultsscc_info_Vector3d_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world_proto::_Vector3d_default_instance_;
    new (ptr) ::world_proto::Vector3d();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world_proto::Vector3d::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3d_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vector3d_world_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_world_2eproto[36];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_world_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_world_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_world_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world_proto::GeoPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world_proto::GeoPoint, lat_),
  PROTOBUF_FIELD_OFFSET(::world_proto::GeoPoint, lon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world_proto::GeoBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world_proto::GeoBox, north_west_),
  PROTOBUF_FIELD_OFFSET(::world_proto::GeoBox, north_east_),
  PROTOBUF_FIELD_OFFSET(::world_proto::GeoBox, south_west_),
  PROTOBUF_FIELD_OFFSET(::world_proto::GeoBox, south_east_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world_proto::Vector3d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world_proto::Vector3d, lat_),
  PROTOBUF_FIELD_OFFSET(::world_proto::Vector3d, lon_),
  PROTOBUF_FIELD_OFFSET(::world_proto::Vector3d, alt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world_proto::Attitude, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world_proto::Attitude, heading_),
  PROTOBUF_FIELD_OFFSET(::world_proto::Attitude, pitch_),
  PROTOBUF_FIELD_OFFSET(::world_proto::Attitude, roll_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world_proto::Aircraft_Situation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world_proto::Aircraft_Situation, location_),
  PROTOBUF_FIELD_OFFSET(::world_proto::Aircraft_Situation, attitude_),
  PROTOBUF_FIELD_OFFSET(::world_proto::Aircraft_Situation, velocity_),
  PROTOBUF_FIELD_OFFSET(::world_proto::Aircraft_Situation, acceleration_),
  PROTOBUF_FIELD_OFFSET(::world_proto::Aircraft_Situation, is_on_ground_),
  PROTOBUF_FIELD_OFFSET(::world_proto::Aircraft_Situation, flap_ratio_),
  PROTOBUF_FIELD_OFFSET(::world_proto::Aircraft_Situation, spoiler_ratio_),
  PROTOBUF_FIELD_OFFSET(::world_proto::Aircraft_Situation, gear_ratio_),
  PROTOBUF_FIELD_OFFSET(::world_proto::Aircraft_Situation, nose_wheel_angle_),
  PROTOBUF_FIELD_OFFSET(::world_proto::Aircraft_Situation, landing_lights_),
  PROTOBUF_FIELD_OFFSET(::world_proto::Aircraft_Situation, taxi_lights_),
  PROTOBUF_FIELD_OFFSET(::world_proto::Aircraft_Situation, strobe_lights_),
  PROTOBUF_FIELD_OFFSET(::world_proto::Aircraft_Situation, frequency_khz_),
  PROTOBUF_FIELD_OFFSET(::world_proto::Aircraft_Situation, squawk_),
  PROTOBUF_FIELD_OFFSET(::world_proto::Aircraft_Situation, mode_c_),
  PROTOBUF_FIELD_OFFSET(::world_proto::Aircraft_Situation, mode_s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world_proto::Aircraft, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world_proto::Aircraft, id_),
  PROTOBUF_FIELD_OFFSET(::world_proto::Aircraft, model_icao_),
  PROTOBUF_FIELD_OFFSET(::world_proto::Aircraft, airline_icao_),
  PROTOBUF_FIELD_OFFSET(::world_proto::Aircraft, tail_no_),
  PROTOBUF_FIELD_OFFSET(::world_proto::Aircraft, call_sign_),
  PROTOBUF_FIELD_OFFSET(::world_proto::Aircraft, situation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world_proto::Runway_End, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world_proto::Runway_End, name_),
  PROTOBUF_FIELD_OFFSET(::world_proto::Runway_End, heading_),
  PROTOBUF_FIELD_OFFSET(::world_proto::Runway_End, centerline_point_),
  PROTOBUF_FIELD_OFFSET(::world_proto::Runway_End, displaced_threshold_meters_),
  PROTOBUF_FIELD_OFFSET(::world_proto::Runway_End, overrun_area_meters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world_proto::Runway, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world_proto::Runway, width_meters_),
  PROTOBUF_FIELD_OFFSET(::world_proto::Runway, length_meters_),
  PROTOBUF_FIELD_OFFSET(::world_proto::Runway, mask_bit_),
  PROTOBUF_FIELD_OFFSET(::world_proto::Runway, end_1_),
  PROTOBUF_FIELD_OFFSET(::world_proto::Runway, end_2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world_proto::TaxiNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world_proto::TaxiNode, id_),
  PROTOBUF_FIELD_OFFSET(::world_proto::TaxiNode, location_),
  PROTOBUF_FIELD_OFFSET(::world_proto::TaxiNode, is_junction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world_proto::TaxiEdge_ActiveZoneMatrix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world_proto::TaxiEdge_ActiveZoneMatrix, departure_),
  PROTOBUF_FIELD_OFFSET(::world_proto::TaxiEdge_ActiveZoneMatrix, arrival_),
  PROTOBUF_FIELD_OFFSET(::world_proto::TaxiEdge_ActiveZoneMatrix, ils_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world_proto::TaxiEdge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world_proto::TaxiEdge, id_),
  PROTOBUF_FIELD_OFFSET(::world_proto::TaxiEdge, name_),
  PROTOBUF_FIELD_OFFSET(::world_proto::TaxiEdge, node_id_1_),
  PROTOBUF_FIELD_OFFSET(::world_proto::TaxiEdge, node_id_2_),
  PROTOBUF_FIELD_OFFSET(::world_proto::TaxiEdge, type_),
  PROTOBUF_FIELD_OFFSET(::world_proto::TaxiEdge, is_one_way_),
  PROTOBUF_FIELD_OFFSET(::world_proto::TaxiEdge, is_high_speed_exit_),
  PROTOBUF_FIELD_OFFSET(::world_proto::TaxiEdge, length_meters_),
  PROTOBUF_FIELD_OFFSET(::world_proto::TaxiEdge, heading_),
  PROTOBUF_FIELD_OFFSET(::world_proto::TaxiEdge, active_zones_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world_proto::ParkingStand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world_proto::ParkingStand, id_),
  PROTOBUF_FIELD_OFFSET(::world_proto::ParkingStand, name_),
  PROTOBUF_FIELD_OFFSET(::world_proto::ParkingStand, type_),
  PROTOBUF_FIELD_OFFSET(::world_proto::ParkingStand, location_),
  PROTOBUF_FIELD_OFFSET(::world_proto::ParkingStand, heading_),
  PROTOBUF_FIELD_OFFSET(::world_proto::ParkingStand, width_code_),
  PROTOBUF_FIELD_OFFSET(::world_proto::ParkingStand, categories_),
  PROTOBUF_FIELD_OFFSET(::world_proto::ParkingStand, operation_types_),
  PROTOBUF_FIELD_OFFSET(::world_proto::ParkingStand, airline_icaos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world_proto::Airport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world_proto::Airport, icao_),
  PROTOBUF_FIELD_OFFSET(::world_proto::Airport, location_),
  PROTOBUF_FIELD_OFFSET(::world_proto::Airport, runways_),
  PROTOBUF_FIELD_OFFSET(::world_proto::Airport, parking_stands_),
  PROTOBUF_FIELD_OFFSET(::world_proto::Airport, taxi_nodes_),
  PROTOBUF_FIELD_OFFSET(::world_proto::Airport, taxi_edges_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world_proto::TaxiPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world_proto::TaxiPath, from_node_id_),
  PROTOBUF_FIELD_OFFSET(::world_proto::TaxiPath, to_node_id_),
  PROTOBUF_FIELD_OFFSET(::world_proto::TaxiPath, edge_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world_proto::GeoPolygon_GeoEdge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world_proto::GeoPolygon_GeoEdge, type_),
  PROTOBUF_FIELD_OFFSET(::world_proto::GeoPolygon_GeoEdge, from_point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world_proto::GeoPolygon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world_proto::GeoPolygon, edges_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world_proto::AirspaceGeometry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world_proto::AirspaceGeometry, lateral_bounds_),
  PROTOBUF_FIELD_OFFSET(::world_proto::AirspaceGeometry, lower_bound_feet_),
  PROTOBUF_FIELD_OFFSET(::world_proto::AirspaceGeometry, upper_bound_feet_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world_proto::ControlledAirspace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world_proto::ControlledAirspace, area_code_),
  PROTOBUF_FIELD_OFFSET(::world_proto::ControlledAirspace, icao_code_),
  PROTOBUF_FIELD_OFFSET(::world_proto::ControlledAirspace, airspace_center_),
  PROTOBUF_FIELD_OFFSET(::world_proto::ControlledAirspace, controlled_airspace_name_),
  PROTOBUF_FIELD_OFFSET(::world_proto::ControlledAirspace, type_),
  PROTOBUF_FIELD_OFFSET(::world_proto::ControlledAirspace, classification_),
  PROTOBUF_FIELD_OFFSET(::world_proto::ControlledAirspace, geometry_),
  PROTOBUF_FIELD_OFFSET(::world_proto::ControlledAirspace, tower_airport_icao_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world_proto::ControlFacility, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world_proto::ControlFacility, call_sign_),
  PROTOBUF_FIELD_OFFSET(::world_proto::ControlFacility, name_),
  PROTOBUF_FIELD_OFFSET(::world_proto::ControlFacility, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world_proto::ClientToServer_Connect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world_proto::ClientToServer_Connect, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world_proto::ClientToServer_QueryAirport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world_proto::ClientToServer_QueryAirport, icao_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world_proto::ClientToServer_QueryTaxiPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world_proto::ClientToServer_QueryTaxiPath, airport_icao_),
  PROTOBUF_FIELD_OFFSET(::world_proto::ClientToServer_QueryTaxiPath, aircraft_model_icao_),
  PROTOBUF_FIELD_OFFSET(::world_proto::ClientToServer_QueryTaxiPath, from_point_),
  PROTOBUF_FIELD_OFFSET(::world_proto::ClientToServer_QueryTaxiPath, to_point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world_proto::ClientToServer_CreateAircraft, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world_proto::ClientToServer_CreateAircraft, aircraft_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world_proto::ClientToServer_UpdateAircraftSituation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world_proto::ClientToServer_UpdateAircraftSituation, aircraft_id_),
  PROTOBUF_FIELD_OFFSET(::world_proto::ClientToServer_UpdateAircraftSituation, situation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world_proto::ClientToServer_RemoveAircraft, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world_proto::ClientToServer_RemoveAircraft, aircraft_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world_proto::ClientToServer, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::world_proto::ClientToServer, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world_proto::ClientToServer, id_),
  PROTOBUF_FIELD_OFFSET(::world_proto::ClientToServer, sent_at_),
  offsetof(::world_proto::ClientToServerDefaultTypeInternal, connect_),
  offsetof(::world_proto::ClientToServerDefaultTypeInternal, query_airport_),
  offsetof(::world_proto::ClientToServerDefaultTypeInternal, create_aircraft_),
  offsetof(::world_proto::ClientToServerDefaultTypeInternal, update_aircraft_situation_),
  offsetof(::world_proto::ClientToServerDefaultTypeInternal, remove_aircraft_),
  offsetof(::world_proto::ClientToServerDefaultTypeInternal, query_taxi_path_),
  PROTOBUF_FIELD_OFFSET(::world_proto::ClientToServer, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world_proto::ServerToClient_FaultDeclined, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world_proto::ServerToClient_FaultDeclined, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world_proto::ServerToClient_FaultNotFound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world_proto::ServerToClient_FaultNotFound, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world_proto::ServerToClient_ReplyConnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world_proto::ServerToClient_ReplyConnect, server_banner_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world_proto::ServerToClient_ReplyCreateAircraft, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world_proto::ServerToClient_ReplyCreateAircraft, created_aircraft_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world_proto::ServerToClient_ReplyQueryAirport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world_proto::ServerToClient_ReplyQueryAirport, airport_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world_proto::ServerToClient_ReplyQueryTaxiPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world_proto::ServerToClient_ReplyQueryTaxiPath, success_),
  PROTOBUF_FIELD_OFFSET(::world_proto::ServerToClient_ReplyQueryTaxiPath, taxi_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world_proto::ServerToClient_NotifyAircraftCreated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world_proto::ServerToClient_NotifyAircraftCreated, aircraft_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world_proto::ServerToClient_NotifyAircraftSituationUpdated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world_proto::ServerToClient_NotifyAircraftSituationUpdated, airctaft_id_),
  PROTOBUF_FIELD_OFFSET(::world_proto::ServerToClient_NotifyAircraftSituationUpdated, situation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world_proto::ServerToClient_NotifyAircraftRemoved, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world_proto::ServerToClient_NotifyAircraftRemoved, airctaft_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world_proto::ServerToClient, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::world_proto::ServerToClient, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world_proto::ServerToClient, id_),
  PROTOBUF_FIELD_OFFSET(::world_proto::ServerToClient, reply_to_request_id_),
  PROTOBUF_FIELD_OFFSET(::world_proto::ServerToClient, sent_at_),
  PROTOBUF_FIELD_OFFSET(::world_proto::ServerToClient, request_sent_at_),
  PROTOBUF_FIELD_OFFSET(::world_proto::ServerToClient, request_received_at_),
  offsetof(::world_proto::ServerToClientDefaultTypeInternal, reply_connect_),
  offsetof(::world_proto::ServerToClientDefaultTypeInternal, reply_query_airport_),
  offsetof(::world_proto::ServerToClientDefaultTypeInternal, reply_create_aircraft_),
  offsetof(::world_proto::ServerToClientDefaultTypeInternal, reply_query_taxi_path_),
  offsetof(::world_proto::ServerToClientDefaultTypeInternal, notify_aircraft_created_),
  offsetof(::world_proto::ServerToClientDefaultTypeInternal, notify_aircraft_situation_updated_),
  offsetof(::world_proto::ServerToClientDefaultTypeInternal, notify_aircraft_removed_),
  offsetof(::world_proto::ServerToClientDefaultTypeInternal, fault_declined_),
  offsetof(::world_proto::ServerToClientDefaultTypeInternal, fault_not_found_),
  PROTOBUF_FIELD_OFFSET(::world_proto::ServerToClient, payload_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::world_proto::GeoPoint)},
  { 7, -1, sizeof(::world_proto::GeoBox)},
  { 16, -1, sizeof(::world_proto::Vector3d)},
  { 24, -1, sizeof(::world_proto::Attitude)},
  { 32, -1, sizeof(::world_proto::Aircraft_Situation)},
  { 53, -1, sizeof(::world_proto::Aircraft)},
  { 64, -1, sizeof(::world_proto::Runway_End)},
  { 74, -1, sizeof(::world_proto::Runway)},
  { 84, -1, sizeof(::world_proto::TaxiNode)},
  { 92, -1, sizeof(::world_proto::TaxiEdge_ActiveZoneMatrix)},
  { 100, -1, sizeof(::world_proto::TaxiEdge)},
  { 115, -1, sizeof(::world_proto::ParkingStand)},
  { 129, -1, sizeof(::world_proto::Airport)},
  { 140, -1, sizeof(::world_proto::TaxiPath)},
  { 148, -1, sizeof(::world_proto::GeoPolygon_GeoEdge)},
  { 155, -1, sizeof(::world_proto::GeoPolygon)},
  { 161, -1, sizeof(::world_proto::AirspaceGeometry)},
  { 169, -1, sizeof(::world_proto::ControlledAirspace)},
  { 182, -1, sizeof(::world_proto::ControlFacility)},
  { 190, -1, sizeof(::world_proto::ClientToServer_Connect)},
  { 196, -1, sizeof(::world_proto::ClientToServer_QueryAirport)},
  { 202, -1, sizeof(::world_proto::ClientToServer_QueryTaxiPath)},
  { 211, -1, sizeof(::world_proto::ClientToServer_CreateAircraft)},
  { 217, -1, sizeof(::world_proto::ClientToServer_UpdateAircraftSituation)},
  { 224, -1, sizeof(::world_proto::ClientToServer_RemoveAircraft)},
  { 230, -1, sizeof(::world_proto::ClientToServer)},
  { 244, -1, sizeof(::world_proto::ServerToClient_FaultDeclined)},
  { 250, -1, sizeof(::world_proto::ServerToClient_FaultNotFound)},
  { 256, -1, sizeof(::world_proto::ServerToClient_ReplyConnect)},
  { 262, -1, sizeof(::world_proto::ServerToClient_ReplyCreateAircraft)},
  { 268, -1, sizeof(::world_proto::ServerToClient_ReplyQueryAirport)},
  { 274, -1, sizeof(::world_proto::ServerToClient_ReplyQueryTaxiPath)},
  { 281, -1, sizeof(::world_proto::ServerToClient_NotifyAircraftCreated)},
  { 287, -1, sizeof(::world_proto::ServerToClient_NotifyAircraftSituationUpdated)},
  { 294, -1, sizeof(::world_proto::ServerToClient_NotifyAircraftRemoved)},
  { 300, -1, sizeof(::world_proto::ServerToClient)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world_proto::_GeoPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world_proto::_GeoBox_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world_proto::_Vector3d_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world_proto::_Attitude_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world_proto::_Aircraft_Situation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world_proto::_Aircraft_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world_proto::_Runway_End_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world_proto::_Runway_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world_proto::_TaxiNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world_proto::_TaxiEdge_ActiveZoneMatrix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world_proto::_TaxiEdge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world_proto::_ParkingStand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world_proto::_Airport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world_proto::_TaxiPath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world_proto::_GeoPolygon_GeoEdge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world_proto::_GeoPolygon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world_proto::_AirspaceGeometry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world_proto::_ControlledAirspace_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world_proto::_ControlFacility_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world_proto::_ClientToServer_Connect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world_proto::_ClientToServer_QueryAirport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world_proto::_ClientToServer_QueryTaxiPath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world_proto::_ClientToServer_CreateAircraft_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world_proto::_ClientToServer_UpdateAircraftSituation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world_proto::_ClientToServer_RemoveAircraft_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world_proto::_ClientToServer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world_proto::_ServerToClient_FaultDeclined_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world_proto::_ServerToClient_FaultNotFound_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world_proto::_ServerToClient_ReplyConnect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world_proto::_ServerToClient_ReplyCreateAircraft_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world_proto::_ServerToClient_ReplyQueryAirport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world_proto::_ServerToClient_ReplyQueryTaxiPath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world_proto::_ServerToClient_NotifyAircraftCreated_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world_proto::_ServerToClient_NotifyAircraftSituationUpdated_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world_proto::_ServerToClient_NotifyAircraftRemoved_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world_proto::_ServerToClient_default_instance_),
};

const char descriptor_table_protodef_world_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013world.proto\022\013world_proto\032\037google/proto"
  "buf/timestamp.proto\"$\n\010GeoPoint\022\013\n\003lat\030\001"
  " \001(\001\022\013\n\003lon\030\002 \001(\001\"\264\001\n\006GeoBox\022)\n\nnorth_we"
  "st\030\001 \001(\0132\025.world_proto.GeoPoint\022)\n\nnorth"
  "_east\030\002 \001(\0132\025.world_proto.GeoPoint\022)\n\nso"
  "uth_west\030\003 \001(\0132\025.world_proto.GeoPoint\022)\n"
  "\nsouth_east\030\004 \001(\0132\025.world_proto.GeoPoint"
  "\"1\n\010Vector3d\022\013\n\003lat\030\001 \001(\001\022\013\n\003lon\030\002 \001(\001\022\013"
  "\n\003alt\030\003 \001(\001\"8\n\010Attitude\022\017\n\007heading\030\001 \001(\002"
  "\022\r\n\005pitch\030\002 \001(\002\022\014\n\004roll\030\003 \001(\002\"\323\007\n\010Aircra"
  "ft\022\n\n\002id\030\001 \001(\005\022\022\n\nmodel_icao\030\002 \001(\t\022\024\n\014ai"
  "rline_icao\030\003 \001(\t\022\017\n\007tail_no\030\004 \001(\t\022\021\n\tcal"
  "l_sign\030\005 \001(\t\0222\n\tsituation\030\006 \001(\0132\037.world_"
  "proto.Aircraft.Situation\032\255\003\n\tSituation\022\'"
  "\n\010location\030\001 \001(\0132\025.world_proto.Vector3d\022"
  "\'\n\010attitude\030\002 \001(\0132\025.world_proto.Attitude"
  "\022\'\n\010velocity\030\003 \001(\0132\025.world_proto.Vector3"
  "d\022+\n\014acceleration\030\004 \001(\0132\025.world_proto.Ve"
  "ctor3d\022\024\n\014is_on_ground\030\005 \001(\010\022\022\n\nflap_rat"
  "io\030\006 \001(\002\022\025\n\rspoiler_ratio\030\007 \001(\002\022\022\n\ngear_"
  "ratio\030\010 \001(\002\022\030\n\020nose_wheel_angle\030\t \001(\002\022\026\n"
  "\016landing_lights\030\n \001(\010\022\023\n\013taxi_lights\030\013 \001"
  "(\010\022\025\n\rstrobe_lights\030\014 \001(\010\022\025\n\rfrequency_k"
  "hz\030\r \001(\005\022\016\n\006squawk\030\016 \001(\t\022\016\n\006mode_c\030\017 \001(\010"
  "\022\016\n\006mode_s\030\020 \001(\010\"\337\001\n\010Category\022\032\n\026AIRCRAF"
  "T_CATEGORY_NONE\020\000\022\033\n\027AIRCRAFT_CATEGORY_H"
  "EAVY\020\001\022\031\n\025AIRCRAFT_CATEGORY_JET\020\002\022\037\n\033AIR"
  "CRAFT_CATEGORY_TURBOPROP\020\004\022\032\n\026AIRCRAFT_C"
  "ATEGORY_PROP\020\010\022 \n\034AIRCRAFT_CATEGORY_LIGH"
  "T_PROP\020\020\022 \n\034AIRCRAFT_CATEGORY_HELICPOTER"
  "\020 \"\246\001\n\rOperationType\022\033\n\027AIRCRAFT_OPERATI"
  "ON_NONE\020\000\022\031\n\025AIRCRAFT_OPERATION_GA\020\001\022\036\n\032"
  "AIRCRAFT_OPERATION_AIRLINE\020\002\022\034\n\030AIRCRAFT"
  "_OPERATION_CARGO\020\003\022\037\n\033AIRCRAFT_OPERATION"
  "_MILITARY\020\010\"\260\002\n\006Runway\022\024\n\014width_meters\030\001"
  " \001(\002\022\025\n\rlength_meters\030\002 \001(\002\022\020\n\010mask_bit\030"
  "\003 \001(\r\022&\n\005end_1\030\004 \001(\0132\027.world_proto.Runwa"
  "y.End\022&\n\005end_2\030\005 \001(\0132\027.world_proto.Runwa"
  "y.End\032\226\001\n\003End\022\014\n\004name\030\001 \001(\t\022\017\n\007heading\030\002"
  " \001(\002\022/\n\020centerline_point\030\003 \001(\0132\025.world_p"
  "roto.GeoPoint\022\"\n\032displaced_threshold_met"
  "ers\030\004 \001(\002\022\033\n\023overrun_area_meters\030\005 \001(\002\"T"
  "\n\010TaxiNode\022\n\n\002id\030\001 \001(\005\022\'\n\010location\030\002 \001(\013"
  "2\025.world_proto.GeoPoint\022\023\n\013is_junction\030\003"
  " \001(\010\"\235\003\n\010TaxiEdge\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002 "
  "\001(\t\022\021\n\tnode_id_1\030\003 \001(\005\022\021\n\tnode_id_2\030\004 \001("
  "\005\022(\n\004type\030\005 \001(\0162\032.world_proto.TaxiEdge.T"
  "ype\022\022\n\nis_one_way\030\006 \001(\010\022\032\n\022is_high_speed"
  "_exit\030\007 \001(\010\022\025\n\rlength_meters\030\010 \001(\002\022\017\n\007he"
  "ading\030\t \001(\002\022<\n\014active_zones\030\n \001(\0132&.worl"
  "d_proto.TaxiEdge.ActiveZoneMatrix\032C\n\020Act"
  "iveZoneMatrix\022\021\n\tdeparture\030\001 \001(\r\022\017\n\007arri"
  "val\030\002 \001(\r\022\013\n\003ils\030\003 \001(\r\"L\n\004Type\022\027\n\023TAXI_E"
  "DGE_GROUNDWAY\020\000\022\025\n\021TAXI_EDGE_TAXIWAY\020\001\022\024"
  "\n\020TAXI_EDGE_RUNWAY\020\002\"\204\003\n\014ParkingStand\022\n\n"
  "\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022,\n\004type\030\003 \001(\0162\036."
  "world_proto.ParkingStand.Type\022\'\n\010locatio"
  "n\030\004 \001(\0132\025.world_proto.GeoPoint\022\017\n\007headin"
  "g\030\005 \001(\002\022\022\n\nwidth_code\030\006 \001(\t\0222\n\ncategorie"
  "s\030\007 \003(\0162\036.world_proto.Aircraft.Category\022"
  "<\n\017operation_types\030\010 \003(\0162#.world_proto.A"
  "ircraft.OperationType\022\025\n\rairline_icaos\030\t"
  " \003(\t\"U\n\004Type\022\023\n\017PARKING_UNKNOWN\020\000\022\020\n\014PAR"
  "KING_GATE\020\001\022\022\n\016PARKING_REMOTE\020\002\022\022\n\016PARKI"
  "NG_HANGAR\020\003\"\357\001\n\007Airport\022\014\n\004icao\030\001 \001(\t\022\'\n"
  "\010location\030\002 \001(\0132\025.world_proto.GeoPoint\022$"
  "\n\007runways\030\003 \003(\0132\023.world_proto.Runway\0221\n\016"
  "parking_stands\030\004 \003(\0132\031.world_proto.Parki"
  "ngStand\022)\n\ntaxi_nodes\030\005 \003(\0132\025.world_prot"
  "o.TaxiNode\022)\n\ntaxi_edges\030\006 \003(\0132\025.world_p"
  "roto.TaxiEdge\"F\n\010TaxiPath\022\024\n\014from_node_i"
  "d\030\001 \001(\005\022\022\n\nto_node_id\030\002 \001(\005\022\020\n\010edge_ids\030"
  "\003 \003(\005\"\356\002\n\nGeoPolygon\022.\n\005edges\030\001 \003(\0132\037.wo"
  "rld_proto.GeoPolygon.GeoEdge\032g\n\007GeoEdge\022"
  "1\n\004type\030\001 \001(\0162#.world_proto.GeoPolygon.G"
  "eoEdgeType\022)\n\nfrom_point\030\002 \001(\0132\025.world_p"
  "roto.GeoPoint\"\306\001\n\013GeoEdgeType\022\024\n\020GEO_EDG"
  "E_UNKNOWN\020\000\022\030\n\024GEO_EDGE_ARC_BY_EDGE\020\001\022\023\n"
  "\017GEO_EDGE_CIRCLE\020\002\022\031\n\025GEO_EDGE_GREAT_CIR"
  "CLE\020\003\022\027\n\023GEO_EDGE_RHUMB_LINE\020\004\022\032\n\026GEO_ED"
  "GE_CLOCKWISE_ARC\020\005\022\"\n\036GEO_EDGE_COUNTER_C"
  "LOCKWISE_ARC\020\006\"w\n\020AirspaceGeometry\022/\n\016la"
  "teral_bounds\030\001 \001(\0132\027.world_proto.GeoPoly"
  "gon\022\030\n\020lower_bound_feet\030\002 \001(\002\022\030\n\020upper_b"
  "ound_feet\030\003 \001(\002\"\314\005\n\022ControlledAirspace\022\021"
  "\n\tarea_code\030\001 \001(\t\022\021\n\ticao_code\030\002 \001(\t\022\027\n\017"
  "airspace_center\030\003 \001(\t\022 \n\030controlled_airs"
  "pace_name\030\004 \001(\t\0222\n\004type\030\005 \001(\0162$.world_pr"
  "oto.ControlledAirspace.Type\022F\n\016classific"
  "ation\030\006 \001(\0162..world_proto.ControlledAirs"
  "pace.Classification\022/\n\010geometry\030\007 \001(\0132\035."
  "world_proto.AirspaceGeometry\022\032\n\022tower_ai"
  "rport_icao\030\010 \001(\t\"\330\001\n\004Type\022\024\n\020AIRSPACE_UN"
  "KNOWN\020\000\022\031\n\025AIRSPACE_CONTROL_ZONE\020\001\022\031\n\025AI"
  "RSPACE_CONTROL_AREA\020\002\022\"\n\036AIRSPACE_TERMIN"
  "AL_CONTROL_AREA\020\003\022\025\n\021AIRSPACE_FIR_AREA\020\004"
  "\022\030\n\024AIRSPACE_FIR_OCEANIC\020\005\022\025\n\021AIRSPACE_U"
  "IR_AREA\020\006\022\030\n\024AIRSPACE_UIR_OCEANIC\020\007\"\260\001\n\016"
  "Classification\022\032\n\026AIRSPACE_CLASS_UNKNOWN"
  "\020\000\022\024\n\020AIRSPACE_CLASS_A\020\001\022\024\n\020AIRSPACE_CLA"
  "SS_B\020\002\022\024\n\020AIRSPACE_CLASS_C\020\003\022\024\n\020AIRSPACE"
  "_CLASS_D\020\004\022\024\n\020AIRSPACE_CLASS_E\020\005\022\024\n\020AIRS"
  "PACE_CLASS_G\020\006\"\327\001\n\017ControlFacility\022\021\n\tca"
  "ll_sign\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022/\n\004type\030\003 \001("
  "\0162!.world_proto.ControlFacility.Type\"r\n\004"
  "Type\022\024\n\020FACILITY_UNKNOWN\020\000\022\022\n\016FACILITY_T"
  "OWER\020\001\022\025\n\021FACILITY_TERMINAL\020\002\022\023\n\017FACILIT"
  "Y_CENTER\020\003\022\024\n\020FACILITY_OCEANIC\020\004\"\231\007\n\016Cli"
  "entToServer\022\n\n\002id\030\001 \001(\004\022+\n\007sent_at\030\002 \001(\013"
  "2\032.google.protobuf.Timestamp\0226\n\007connect\030"
  "e \001(\0132#.world_proto.ClientToServer.Conne"
  "ctH\000\022A\n\rquery_airport\030f \001(\0132(.world_prot"
  "o.ClientToServer.QueryAirportH\000\022E\n\017creat"
  "e_aircraft\030g \001(\0132*.world_proto.ClientToS"
  "erver.CreateAircraftH\000\022X\n\031update_aircraf"
  "t_situation\030h \001(\01323.world_proto.ClientTo"
  "Server.UpdateAircraftSituationH\000\022E\n\017remo"
  "ve_aircraft\030i \001(\0132*.world_proto.ClientTo"
  "Server.RemoveAircraftH\000\022D\n\017query_taxi_pa"
  "th\030j \001(\0132).world_proto.ClientToServer.Qu"
  "eryTaxiPathH\000\032\030\n\007Connect\022\r\n\005token\030\001 \001(\t\032"
  "!\n\014QueryAirport\022\021\n\ticao_code\030\001 \001(\t\032\226\001\n\rQ"
  "ueryTaxiPath\022\024\n\014airport_icao\030\001 \001(\t\022\033\n\023ai"
  "rcraft_model_icao\030\002 \001(\t\022)\n\nfrom_point\030\003 "
  "\001(\0132\025.world_proto.GeoPoint\022\'\n\010to_point\030\004"
  " \001(\0132\025.world_proto.GeoPoint\0329\n\016CreateAir"
  "craft\022\'\n\010aircraft\030\001 \001(\0132\025.world_proto.Ai"
  "rcraft\032b\n\027UpdateAircraftSituation\022\023\n\013air"
  "craft_id\030\001 \001(\005\0222\n\tsituation\030\002 \001(\0132\037.worl"
  "d_proto.Aircraft.Situation\032%\n\016RemoveAirc"
  "raft\022\023\n\013aircraft_id\030\001 \001(\005B\t\n\007payload\"\303\013\n"
  "\016ServerToClient\022\n\n\002id\030\002 \001(\004\022\033\n\023reply_to_"
  "request_id\030\003 \001(\004\022+\n\007sent_at\030\004 \001(\0132\032.goog"
  "le.protobuf.Timestamp\0223\n\017request_sent_at"
  "\030\005 \001(\0132\032.google.protobuf.Timestamp\0227\n\023re"
  "quest_received_at\030\006 \001(\0132\032.google.protobu"
  "f.Timestamp\022B\n\rreply_connect\030\315\010 \001(\0132(.wo"
  "rld_proto.ServerToClient.ReplyConnectH\000\022"
  "M\n\023reply_query_airport\030\316\010 \001(\0132-.world_pr"
  "oto.ServerToClient.ReplyQueryAirportH\000\022Q"
  "\n\025reply_create_aircraft\030\317\010 \001(\0132/.world_p"
  "roto.ServerToClient.ReplyCreateAircraftH"
  "\000\022P\n\025reply_query_taxi_path\030\322\010 \001(\0132..worl"
  "d_proto.ServerToClient.ReplyQueryTaxiPat"
  "hH\000\022U\n\027notify_aircraft_created\030\311\001 \001(\01321."
  "world_proto.ServerToClient.NotifyAircraf"
  "tCreatedH\000\022h\n!notify_aircraft_situation_"
  "updated\030\312\001 \001(\0132:.world_proto.ServerToCli"
  "ent.NotifyAircraftSituationUpdatedH\000\022U\n\027"
  "notify_aircraft_removed\030\313\001 \001(\01321.world_p"
  "roto.ServerToClient.NotifyAircraftRemove"
  "dH\000\022D\n\016fault_declined\030\271\027 \001(\0132).world_pro"
  "to.ServerToClient.FaultDeclinedH\000\022E\n\017fau"
  "lt_not_found\030\272\027 \001(\0132).world_proto.Server"
  "ToClient.FaultNotFoundH\000\032 \n\rFaultDecline"
  "d\022\017\n\007message\030\001 \001(\t\032 \n\rFaultNotFound\022\017\n\007m"
  "essage\030\001 \001(\t\032%\n\014ReplyConnect\022\025\n\rserver_b"
  "anner\030\002 \001(\t\0322\n\023ReplyCreateAircraft\022\033\n\023cr"
  "eated_aircraft_id\030\001 \001(\005\032:\n\021ReplyQueryAir"
  "port\022%\n\007airport\030\001 \001(\0132\024.world_proto.Airp"
  "ort\032O\n\022ReplyQueryTaxiPath\022\017\n\007success\030\001 \001"
  "(\010\022(\n\ttaxi_path\030\002 \001(\0132\025.world_proto.Taxi"
  "Path\032@\n\025NotifyAircraftCreated\022\'\n\010aircraf"
  "t\030\001 \001(\0132\025.world_proto.Aircraft\032i\n\036Notify"
  "AircraftSituationUpdated\022\023\n\013airctaft_id\030"
  "\001 \001(\005\0222\n\tsituation\030\002 \001(\0132\037.world_proto.A"
  "ircraft.Situation\032,\n\025NotifyAircraftRemov"
  "ed\022\023\n\013airctaft_id\030\001 \001(\005B\t\n\007payloadb\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_world_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_world_2eproto_sccs[36] = {
  &scc_info_Aircraft_world_2eproto.base,
  &scc_info_Aircraft_Situation_world_2eproto.base,
  &scc_info_Airport_world_2eproto.base,
  &scc_info_AirspaceGeometry_world_2eproto.base,
  &scc_info_Attitude_world_2eproto.base,
  &scc_info_ClientToServer_world_2eproto.base,
  &scc_info_ClientToServer_Connect_world_2eproto.base,
  &scc_info_ClientToServer_CreateAircraft_world_2eproto.base,
  &scc_info_ClientToServer_QueryAirport_world_2eproto.base,
  &scc_info_ClientToServer_QueryTaxiPath_world_2eproto.base,
  &scc_info_ClientToServer_RemoveAircraft_world_2eproto.base,
  &scc_info_ClientToServer_UpdateAircraftSituation_world_2eproto.base,
  &scc_info_ControlFacility_world_2eproto.base,
  &scc_info_ControlledAirspace_world_2eproto.base,
  &scc_info_GeoBox_world_2eproto.base,
  &scc_info_GeoPoint_world_2eproto.base,
  &scc_info_GeoPolygon_world_2eproto.base,
  &scc_info_GeoPolygon_GeoEdge_world_2eproto.base,
  &scc_info_ParkingStand_world_2eproto.base,
  &scc_info_Runway_world_2eproto.base,
  &scc_info_Runway_End_world_2eproto.base,
  &scc_info_ServerToClient_world_2eproto.base,
  &scc_info_ServerToClient_FaultDeclined_world_2eproto.base,
  &scc_info_ServerToClient_FaultNotFound_world_2eproto.base,
  &scc_info_ServerToClient_NotifyAircraftCreated_world_2eproto.base,
  &scc_info_ServerToClient_NotifyAircraftRemoved_world_2eproto.base,
  &scc_info_ServerToClient_NotifyAircraftSituationUpdated_world_2eproto.base,
  &scc_info_ServerToClient_ReplyConnect_world_2eproto.base,
  &scc_info_ServerToClient_ReplyCreateAircraft_world_2eproto.base,
  &scc_info_ServerToClient_ReplyQueryAirport_world_2eproto.base,
  &scc_info_ServerToClient_ReplyQueryTaxiPath_world_2eproto.base,
  &scc_info_TaxiEdge_world_2eproto.base,
  &scc_info_TaxiEdge_ActiveZoneMatrix_world_2eproto.base,
  &scc_info_TaxiNode_world_2eproto.base,
  &scc_info_TaxiPath_world_2eproto.base,
  &scc_info_Vector3d_world_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_world_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_world_2eproto = {
  false, false, descriptor_table_protodef_world_2eproto, "world.proto", 6722,
  &descriptor_table_world_2eproto_once, descriptor_table_world_2eproto_sccs, descriptor_table_world_2eproto_deps, 36, 1,
  schemas, file_default_instances, TableStruct_world_2eproto::offsets,
  file_level_metadata_world_2eproto, 36, file_level_enum_descriptors_world_2eproto, file_level_service_descriptors_world_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_world_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_world_2eproto)), true);
namespace world_proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Aircraft_Category_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_world_2eproto);
  return file_level_enum_descriptors_world_2eproto[0];
}
bool Aircraft_Category_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Aircraft_Category Aircraft::AIRCRAFT_CATEGORY_NONE;
constexpr Aircraft_Category Aircraft::AIRCRAFT_CATEGORY_HEAVY;
constexpr Aircraft_Category Aircraft::AIRCRAFT_CATEGORY_JET;
constexpr Aircraft_Category Aircraft::AIRCRAFT_CATEGORY_TURBOPROP;
constexpr Aircraft_Category Aircraft::AIRCRAFT_CATEGORY_PROP;
constexpr Aircraft_Category Aircraft::AIRCRAFT_CATEGORY_LIGHT_PROP;
constexpr Aircraft_Category Aircraft::AIRCRAFT_CATEGORY_HELICPOTER;
constexpr Aircraft_Category Aircraft::Category_MIN;
constexpr Aircraft_Category Aircraft::Category_MAX;
constexpr int Aircraft::Category_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Aircraft_OperationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_world_2eproto);
  return file_level_enum_descriptors_world_2eproto[1];
}
bool Aircraft_OperationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Aircraft_OperationType Aircraft::AIRCRAFT_OPERATION_NONE;
constexpr Aircraft_OperationType Aircraft::AIRCRAFT_OPERATION_GA;
constexpr Aircraft_OperationType Aircraft::AIRCRAFT_OPERATION_AIRLINE;
constexpr Aircraft_OperationType Aircraft::AIRCRAFT_OPERATION_CARGO;
constexpr Aircraft_OperationType Aircraft::AIRCRAFT_OPERATION_MILITARY;
constexpr Aircraft_OperationType Aircraft::OperationType_MIN;
constexpr Aircraft_OperationType Aircraft::OperationType_MAX;
constexpr int Aircraft::OperationType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaxiEdge_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_world_2eproto);
  return file_level_enum_descriptors_world_2eproto[2];
}
bool TaxiEdge_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TaxiEdge_Type TaxiEdge::TAXI_EDGE_GROUNDWAY;
constexpr TaxiEdge_Type TaxiEdge::TAXI_EDGE_TAXIWAY;
constexpr TaxiEdge_Type TaxiEdge::TAXI_EDGE_RUNWAY;
constexpr TaxiEdge_Type TaxiEdge::Type_MIN;
constexpr TaxiEdge_Type TaxiEdge::Type_MAX;
constexpr int TaxiEdge::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParkingStand_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_world_2eproto);
  return file_level_enum_descriptors_world_2eproto[3];
}
bool ParkingStand_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ParkingStand_Type ParkingStand::PARKING_UNKNOWN;
constexpr ParkingStand_Type ParkingStand::PARKING_GATE;
constexpr ParkingStand_Type ParkingStand::PARKING_REMOTE;
constexpr ParkingStand_Type ParkingStand::PARKING_HANGAR;
constexpr ParkingStand_Type ParkingStand::Type_MIN;
constexpr ParkingStand_Type ParkingStand::Type_MAX;
constexpr int ParkingStand::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GeoPolygon_GeoEdgeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_world_2eproto);
  return file_level_enum_descriptors_world_2eproto[4];
}
bool GeoPolygon_GeoEdgeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GeoPolygon_GeoEdgeType GeoPolygon::GEO_EDGE_UNKNOWN;
constexpr GeoPolygon_GeoEdgeType GeoPolygon::GEO_EDGE_ARC_BY_EDGE;
constexpr GeoPolygon_GeoEdgeType GeoPolygon::GEO_EDGE_CIRCLE;
constexpr GeoPolygon_GeoEdgeType GeoPolygon::GEO_EDGE_GREAT_CIRCLE;
constexpr GeoPolygon_GeoEdgeType GeoPolygon::GEO_EDGE_RHUMB_LINE;
constexpr GeoPolygon_GeoEdgeType GeoPolygon::GEO_EDGE_CLOCKWISE_ARC;
constexpr GeoPolygon_GeoEdgeType GeoPolygon::GEO_EDGE_COUNTER_CLOCKWISE_ARC;
constexpr GeoPolygon_GeoEdgeType GeoPolygon::GeoEdgeType_MIN;
constexpr GeoPolygon_GeoEdgeType GeoPolygon::GeoEdgeType_MAX;
constexpr int GeoPolygon::GeoEdgeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlledAirspace_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_world_2eproto);
  return file_level_enum_descriptors_world_2eproto[5];
}
bool ControlledAirspace_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ControlledAirspace_Type ControlledAirspace::AIRSPACE_UNKNOWN;
constexpr ControlledAirspace_Type ControlledAirspace::AIRSPACE_CONTROL_ZONE;
constexpr ControlledAirspace_Type ControlledAirspace::AIRSPACE_CONTROL_AREA;
constexpr ControlledAirspace_Type ControlledAirspace::AIRSPACE_TERMINAL_CONTROL_AREA;
constexpr ControlledAirspace_Type ControlledAirspace::AIRSPACE_FIR_AREA;
constexpr ControlledAirspace_Type ControlledAirspace::AIRSPACE_FIR_OCEANIC;
constexpr ControlledAirspace_Type ControlledAirspace::AIRSPACE_UIR_AREA;
constexpr ControlledAirspace_Type ControlledAirspace::AIRSPACE_UIR_OCEANIC;
constexpr ControlledAirspace_Type ControlledAirspace::Type_MIN;
constexpr ControlledAirspace_Type ControlledAirspace::Type_MAX;
constexpr int ControlledAirspace::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlledAirspace_Classification_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_world_2eproto);
  return file_level_enum_descriptors_world_2eproto[6];
}
bool ControlledAirspace_Classification_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ControlledAirspace_Classification ControlledAirspace::AIRSPACE_CLASS_UNKNOWN;
constexpr ControlledAirspace_Classification ControlledAirspace::AIRSPACE_CLASS_A;
constexpr ControlledAirspace_Classification ControlledAirspace::AIRSPACE_CLASS_B;
constexpr ControlledAirspace_Classification ControlledAirspace::AIRSPACE_CLASS_C;
constexpr ControlledAirspace_Classification ControlledAirspace::AIRSPACE_CLASS_D;
constexpr ControlledAirspace_Classification ControlledAirspace::AIRSPACE_CLASS_E;
constexpr ControlledAirspace_Classification ControlledAirspace::AIRSPACE_CLASS_G;
constexpr ControlledAirspace_Classification ControlledAirspace::Classification_MIN;
constexpr ControlledAirspace_Classification ControlledAirspace::Classification_MAX;
constexpr int ControlledAirspace::Classification_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlFacility_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_world_2eproto);
  return file_level_enum_descriptors_world_2eproto[7];
}
bool ControlFacility_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ControlFacility_Type ControlFacility::FACILITY_UNKNOWN;
constexpr ControlFacility_Type ControlFacility::FACILITY_TOWER;
constexpr ControlFacility_Type ControlFacility::FACILITY_TERMINAL;
constexpr ControlFacility_Type ControlFacility::FACILITY_CENTER;
constexpr ControlFacility_Type ControlFacility::FACILITY_OCEANIC;
constexpr ControlFacility_Type ControlFacility::Type_MIN;
constexpr ControlFacility_Type ControlFacility::Type_MAX;
constexpr int ControlFacility::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void GeoPoint::InitAsDefaultInstance() {
}
class GeoPoint::_Internal {
 public:
};

GeoPoint::GeoPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world_proto.GeoPoint)
}
GeoPoint::GeoPoint(const GeoPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lat_, &from.lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&lon_) -
    reinterpret_cast<char*>(&lat_)) + sizeof(lon_));
  // @@protoc_insertion_point(copy_constructor:world_proto.GeoPoint)
}

void GeoPoint::SharedCtor() {
  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lon_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(lon_));
}

GeoPoint::~GeoPoint() {
  // @@protoc_insertion_point(destructor:world_proto.GeoPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GeoPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GeoPoint::ArenaDtor(void* object) {
  GeoPoint* _this = reinterpret_cast< GeoPoint* >(object);
  (void)_this;
}
void GeoPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GeoPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeoPoint& GeoPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeoPoint_world_2eproto.base);
  return *internal_default_instance();
}


void GeoPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:world_proto.GeoPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lon_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(lon_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeoPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double lat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double lon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          lon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeoPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world_proto.GeoPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double lat = 1;
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_lat(), target);
  }

  // double lon = 2;
  if (!(this->lon() <= 0 && this->lon() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_lon(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world_proto.GeoPoint)
  return target;
}

size_t GeoPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world_proto.GeoPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double lat = 1;
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    total_size += 1 + 8;
  }

  // double lon = 2;
  if (!(this->lon() <= 0 && this->lon() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world_proto.GeoPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeoPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world_proto.GeoPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world_proto.GeoPoint)
    MergeFrom(*source);
  }
}

void GeoPoint::MergeFrom(const GeoPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world_proto.GeoPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.lat() <= 0 && from.lat() >= 0)) {
    _internal_set_lat(from._internal_lat());
  }
  if (!(from.lon() <= 0 && from.lon() >= 0)) {
    _internal_set_lon(from._internal_lon());
  }
}

void GeoPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world_proto.GeoPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoPoint::CopyFrom(const GeoPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world_proto.GeoPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoPoint::IsInitialized() const {
  return true;
}

void GeoPoint::InternalSwap(GeoPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GeoPoint, lon_)
      + sizeof(GeoPoint::lon_)
      - PROTOBUF_FIELD_OFFSET(GeoPoint, lat_)>(
          reinterpret_cast<char*>(&lat_),
          reinterpret_cast<char*>(&other->lat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GeoPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeoBox::InitAsDefaultInstance() {
  ::world_proto::_GeoBox_default_instance_._instance.get_mutable()->north_west_ = const_cast< ::world_proto::GeoPoint*>(
      ::world_proto::GeoPoint::internal_default_instance());
  ::world_proto::_GeoBox_default_instance_._instance.get_mutable()->north_east_ = const_cast< ::world_proto::GeoPoint*>(
      ::world_proto::GeoPoint::internal_default_instance());
  ::world_proto::_GeoBox_default_instance_._instance.get_mutable()->south_west_ = const_cast< ::world_proto::GeoPoint*>(
      ::world_proto::GeoPoint::internal_default_instance());
  ::world_proto::_GeoBox_default_instance_._instance.get_mutable()->south_east_ = const_cast< ::world_proto::GeoPoint*>(
      ::world_proto::GeoPoint::internal_default_instance());
}
class GeoBox::_Internal {
 public:
  static const ::world_proto::GeoPoint& north_west(const GeoBox* msg);
  static const ::world_proto::GeoPoint& north_east(const GeoBox* msg);
  static const ::world_proto::GeoPoint& south_west(const GeoBox* msg);
  static const ::world_proto::GeoPoint& south_east(const GeoBox* msg);
};

const ::world_proto::GeoPoint&
GeoBox::_Internal::north_west(const GeoBox* msg) {
  return *msg->north_west_;
}
const ::world_proto::GeoPoint&
GeoBox::_Internal::north_east(const GeoBox* msg) {
  return *msg->north_east_;
}
const ::world_proto::GeoPoint&
GeoBox::_Internal::south_west(const GeoBox* msg) {
  return *msg->south_west_;
}
const ::world_proto::GeoPoint&
GeoBox::_Internal::south_east(const GeoBox* msg) {
  return *msg->south_east_;
}
GeoBox::GeoBox(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world_proto.GeoBox)
}
GeoBox::GeoBox(const GeoBox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_north_west()) {
    north_west_ = new ::world_proto::GeoPoint(*from.north_west_);
  } else {
    north_west_ = nullptr;
  }
  if (from._internal_has_north_east()) {
    north_east_ = new ::world_proto::GeoPoint(*from.north_east_);
  } else {
    north_east_ = nullptr;
  }
  if (from._internal_has_south_west()) {
    south_west_ = new ::world_proto::GeoPoint(*from.south_west_);
  } else {
    south_west_ = nullptr;
  }
  if (from._internal_has_south_east()) {
    south_east_ = new ::world_proto::GeoPoint(*from.south_east_);
  } else {
    south_east_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:world_proto.GeoBox)
}

void GeoBox::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeoBox_world_2eproto.base);
  ::memset(&north_west_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&south_east_) -
      reinterpret_cast<char*>(&north_west_)) + sizeof(south_east_));
}

GeoBox::~GeoBox() {
  // @@protoc_insertion_point(destructor:world_proto.GeoBox)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GeoBox::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete north_west_;
  if (this != internal_default_instance()) delete north_east_;
  if (this != internal_default_instance()) delete south_west_;
  if (this != internal_default_instance()) delete south_east_;
}

void GeoBox::ArenaDtor(void* object) {
  GeoBox* _this = reinterpret_cast< GeoBox* >(object);
  (void)_this;
}
void GeoBox::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GeoBox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeoBox& GeoBox::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeoBox_world_2eproto.base);
  return *internal_default_instance();
}


void GeoBox::Clear() {
// @@protoc_insertion_point(message_clear_start:world_proto.GeoBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && north_west_ != nullptr) {
    delete north_west_;
  }
  north_west_ = nullptr;
  if (GetArena() == nullptr && north_east_ != nullptr) {
    delete north_east_;
  }
  north_east_ = nullptr;
  if (GetArena() == nullptr && south_west_ != nullptr) {
    delete south_west_;
  }
  south_west_ = nullptr;
  if (GetArena() == nullptr && south_east_ != nullptr) {
    delete south_east_;
  }
  south_east_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeoBox::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .world_proto.GeoPoint north_west = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_north_west(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .world_proto.GeoPoint north_east = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_north_east(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .world_proto.GeoPoint south_west = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_south_west(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .world_proto.GeoPoint south_east = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_south_east(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeoBox::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world_proto.GeoBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .world_proto.GeoPoint north_west = 1;
  if (this->has_north_west()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::north_west(this), target, stream);
  }

  // .world_proto.GeoPoint north_east = 2;
  if (this->has_north_east()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::north_east(this), target, stream);
  }

  // .world_proto.GeoPoint south_west = 3;
  if (this->has_south_west()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::south_west(this), target, stream);
  }

  // .world_proto.GeoPoint south_east = 4;
  if (this->has_south_east()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::south_east(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world_proto.GeoBox)
  return target;
}

size_t GeoBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world_proto.GeoBox)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .world_proto.GeoPoint north_west = 1;
  if (this->has_north_west()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *north_west_);
  }

  // .world_proto.GeoPoint north_east = 2;
  if (this->has_north_east()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *north_east_);
  }

  // .world_proto.GeoPoint south_west = 3;
  if (this->has_south_west()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *south_west_);
  }

  // .world_proto.GeoPoint south_east = 4;
  if (this->has_south_east()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *south_east_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoBox::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world_proto.GeoBox)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoBox* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeoBox>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world_proto.GeoBox)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world_proto.GeoBox)
    MergeFrom(*source);
  }
}

void GeoBox::MergeFrom(const GeoBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world_proto.GeoBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_north_west()) {
    _internal_mutable_north_west()->::world_proto::GeoPoint::MergeFrom(from._internal_north_west());
  }
  if (from.has_north_east()) {
    _internal_mutable_north_east()->::world_proto::GeoPoint::MergeFrom(from._internal_north_east());
  }
  if (from.has_south_west()) {
    _internal_mutable_south_west()->::world_proto::GeoPoint::MergeFrom(from._internal_south_west());
  }
  if (from.has_south_east()) {
    _internal_mutable_south_east()->::world_proto::GeoPoint::MergeFrom(from._internal_south_east());
  }
}

void GeoBox::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world_proto.GeoBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoBox::CopyFrom(const GeoBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world_proto.GeoBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoBox::IsInitialized() const {
  return true;
}

void GeoBox::InternalSwap(GeoBox* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GeoBox, south_east_)
      + sizeof(GeoBox::south_east_)
      - PROTOBUF_FIELD_OFFSET(GeoBox, north_west_)>(
          reinterpret_cast<char*>(&north_west_),
          reinterpret_cast<char*>(&other->north_west_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GeoBox::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Vector3d::InitAsDefaultInstance() {
}
class Vector3d::_Internal {
 public:
};

Vector3d::Vector3d(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world_proto.Vector3d)
}
Vector3d::Vector3d(const Vector3d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lat_, &from.lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&alt_) -
    reinterpret_cast<char*>(&lat_)) + sizeof(alt_));
  // @@protoc_insertion_point(copy_constructor:world_proto.Vector3d)
}

void Vector3d::SharedCtor() {
  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alt_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(alt_));
}

Vector3d::~Vector3d() {
  // @@protoc_insertion_point(destructor:world_proto.Vector3d)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vector3d::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Vector3d::ArenaDtor(void* object) {
  Vector3d* _this = reinterpret_cast< Vector3d* >(object);
  (void)_this;
}
void Vector3d::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vector3d::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vector3d& Vector3d::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vector3d_world_2eproto.base);
  return *internal_default_instance();
}


void Vector3d::Clear() {
// @@protoc_insertion_point(message_clear_start:world_proto.Vector3d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alt_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(alt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector3d::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double lat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double lon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          lon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double alt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          alt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vector3d::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world_proto.Vector3d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double lat = 1;
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_lat(), target);
  }

  // double lon = 2;
  if (!(this->lon() <= 0 && this->lon() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_lon(), target);
  }

  // double alt = 3;
  if (!(this->alt() <= 0 && this->alt() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_alt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world_proto.Vector3d)
  return target;
}

size_t Vector3d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world_proto.Vector3d)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double lat = 1;
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    total_size += 1 + 8;
  }

  // double lon = 2;
  if (!(this->lon() <= 0 && this->lon() >= 0)) {
    total_size += 1 + 8;
  }

  // double alt = 3;
  if (!(this->alt() <= 0 && this->alt() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vector3d::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world_proto.Vector3d)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector3d* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vector3d>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world_proto.Vector3d)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world_proto.Vector3d)
    MergeFrom(*source);
  }
}

void Vector3d::MergeFrom(const Vector3d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world_proto.Vector3d)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.lat() <= 0 && from.lat() >= 0)) {
    _internal_set_lat(from._internal_lat());
  }
  if (!(from.lon() <= 0 && from.lon() >= 0)) {
    _internal_set_lon(from._internal_lon());
  }
  if (!(from.alt() <= 0 && from.alt() >= 0)) {
    _internal_set_alt(from._internal_alt());
  }
}

void Vector3d::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world_proto.Vector3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3d::CopyFrom(const Vector3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world_proto.Vector3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3d::IsInitialized() const {
  return true;
}

void Vector3d::InternalSwap(Vector3d* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3d, alt_)
      + sizeof(Vector3d::alt_)
      - PROTOBUF_FIELD_OFFSET(Vector3d, lat_)>(
          reinterpret_cast<char*>(&lat_),
          reinterpret_cast<char*>(&other->lat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector3d::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Attitude::InitAsDefaultInstance() {
}
class Attitude::_Internal {
 public:
};

Attitude::Attitude(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world_proto.Attitude)
}
Attitude::Attitude(const Attitude& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&heading_, &from.heading_,
    static_cast<size_t>(reinterpret_cast<char*>(&roll_) -
    reinterpret_cast<char*>(&heading_)) + sizeof(roll_));
  // @@protoc_insertion_point(copy_constructor:world_proto.Attitude)
}

void Attitude::SharedCtor() {
  ::memset(&heading_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roll_) -
      reinterpret_cast<char*>(&heading_)) + sizeof(roll_));
}

Attitude::~Attitude() {
  // @@protoc_insertion_point(destructor:world_proto.Attitude)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Attitude::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Attitude::ArenaDtor(void* object) {
  Attitude* _this = reinterpret_cast< Attitude* >(object);
  (void)_this;
}
void Attitude::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Attitude::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Attitude& Attitude::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Attitude_world_2eproto.base);
  return *internal_default_instance();
}


void Attitude::Clear() {
// @@protoc_insertion_point(message_clear_start:world_proto.Attitude)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&heading_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roll_) -
      reinterpret_cast<char*>(&heading_)) + sizeof(roll_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Attitude::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float heading = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pitch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float roll = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Attitude::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world_proto.Attitude)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float heading = 1;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_heading(), target);
  }

  // float pitch = 2;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_pitch(), target);
  }

  // float roll = 3;
  if (!(this->roll() <= 0 && this->roll() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_roll(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world_proto.Attitude)
  return target;
}

size_t Attitude::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world_proto.Attitude)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float heading = 1;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    total_size += 1 + 4;
  }

  // float pitch = 2;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    total_size += 1 + 4;
  }

  // float roll = 3;
  if (!(this->roll() <= 0 && this->roll() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Attitude::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world_proto.Attitude)
  GOOGLE_DCHECK_NE(&from, this);
  const Attitude* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Attitude>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world_proto.Attitude)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world_proto.Attitude)
    MergeFrom(*source);
  }
}

void Attitude::MergeFrom(const Attitude& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world_proto.Attitude)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.heading() <= 0 && from.heading() >= 0)) {
    _internal_set_heading(from._internal_heading());
  }
  if (!(from.pitch() <= 0 && from.pitch() >= 0)) {
    _internal_set_pitch(from._internal_pitch());
  }
  if (!(from.roll() <= 0 && from.roll() >= 0)) {
    _internal_set_roll(from._internal_roll());
  }
}

void Attitude::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world_proto.Attitude)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attitude::CopyFrom(const Attitude& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world_proto.Attitude)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attitude::IsInitialized() const {
  return true;
}

void Attitude::InternalSwap(Attitude* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Attitude, roll_)
      + sizeof(Attitude::roll_)
      - PROTOBUF_FIELD_OFFSET(Attitude, heading_)>(
          reinterpret_cast<char*>(&heading_),
          reinterpret_cast<char*>(&other->heading_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Attitude::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Aircraft_Situation::InitAsDefaultInstance() {
  ::world_proto::_Aircraft_Situation_default_instance_._instance.get_mutable()->location_ = const_cast< ::world_proto::Vector3d*>(
      ::world_proto::Vector3d::internal_default_instance());
  ::world_proto::_Aircraft_Situation_default_instance_._instance.get_mutable()->attitude_ = const_cast< ::world_proto::Attitude*>(
      ::world_proto::Attitude::internal_default_instance());
  ::world_proto::_Aircraft_Situation_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::world_proto::Vector3d*>(
      ::world_proto::Vector3d::internal_default_instance());
  ::world_proto::_Aircraft_Situation_default_instance_._instance.get_mutable()->acceleration_ = const_cast< ::world_proto::Vector3d*>(
      ::world_proto::Vector3d::internal_default_instance());
}
class Aircraft_Situation::_Internal {
 public:
  static const ::world_proto::Vector3d& location(const Aircraft_Situation* msg);
  static const ::world_proto::Attitude& attitude(const Aircraft_Situation* msg);
  static const ::world_proto::Vector3d& velocity(const Aircraft_Situation* msg);
  static const ::world_proto::Vector3d& acceleration(const Aircraft_Situation* msg);
};

const ::world_proto::Vector3d&
Aircraft_Situation::_Internal::location(const Aircraft_Situation* msg) {
  return *msg->location_;
}
const ::world_proto::Attitude&
Aircraft_Situation::_Internal::attitude(const Aircraft_Situation* msg) {
  return *msg->attitude_;
}
const ::world_proto::Vector3d&
Aircraft_Situation::_Internal::velocity(const Aircraft_Situation* msg) {
  return *msg->velocity_;
}
const ::world_proto::Vector3d&
Aircraft_Situation::_Internal::acceleration(const Aircraft_Situation* msg) {
  return *msg->acceleration_;
}
Aircraft_Situation::Aircraft_Situation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world_proto.Aircraft.Situation)
}
Aircraft_Situation::Aircraft_Situation(const Aircraft_Situation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  squawk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_squawk().empty()) {
    squawk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_squawk(),
      GetArena());
  }
  if (from._internal_has_location()) {
    location_ = new ::world_proto::Vector3d(*from.location_);
  } else {
    location_ = nullptr;
  }
  if (from._internal_has_attitude()) {
    attitude_ = new ::world_proto::Attitude(*from.attitude_);
  } else {
    attitude_ = nullptr;
  }
  if (from._internal_has_velocity()) {
    velocity_ = new ::world_proto::Vector3d(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  if (from._internal_has_acceleration()) {
    acceleration_ = new ::world_proto::Vector3d(*from.acceleration_);
  } else {
    acceleration_ = nullptr;
  }
  ::memcpy(&flap_ratio_, &from.flap_ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&mode_s_) -
    reinterpret_cast<char*>(&flap_ratio_)) + sizeof(mode_s_));
  // @@protoc_insertion_point(copy_constructor:world_proto.Aircraft.Situation)
}

void Aircraft_Situation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Aircraft_Situation_world_2eproto.base);
  squawk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_s_) -
      reinterpret_cast<char*>(&location_)) + sizeof(mode_s_));
}

Aircraft_Situation::~Aircraft_Situation() {
  // @@protoc_insertion_point(destructor:world_proto.Aircraft.Situation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Aircraft_Situation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  squawk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete attitude_;
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete acceleration_;
}

void Aircraft_Situation::ArenaDtor(void* object) {
  Aircraft_Situation* _this = reinterpret_cast< Aircraft_Situation* >(object);
  (void)_this;
}
void Aircraft_Situation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Aircraft_Situation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Aircraft_Situation& Aircraft_Situation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Aircraft_Situation_world_2eproto.base);
  return *internal_default_instance();
}


void Aircraft_Situation::Clear() {
// @@protoc_insertion_point(message_clear_start:world_proto.Aircraft.Situation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  squawk_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  if (GetArena() == nullptr && attitude_ != nullptr) {
    delete attitude_;
  }
  attitude_ = nullptr;
  if (GetArena() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
  if (GetArena() == nullptr && acceleration_ != nullptr) {
    delete acceleration_;
  }
  acceleration_ = nullptr;
  ::memset(&flap_ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_s_) -
      reinterpret_cast<char*>(&flap_ratio_)) + sizeof(mode_s_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Aircraft_Situation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .world_proto.Vector3d location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .world_proto.Attitude attitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_attitude(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .world_proto.Vector3d velocity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .world_proto.Vector3d acceleration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_acceleration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_on_ground = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          is_on_ground_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float flap_ratio = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          flap_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float spoiler_ratio = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          spoiler_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float gear_ratio = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          gear_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float nose_wheel_angle = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          nose_wheel_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool landing_lights = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          landing_lights_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool taxi_lights = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          taxi_lights_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool strobe_lights = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          strobe_lights_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 frequency_khz = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          frequency_khz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string squawk = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_squawk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "world_proto.Aircraft.Situation.squawk"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mode_c = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          mode_c_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mode_s = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          mode_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Aircraft_Situation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world_proto.Aircraft.Situation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .world_proto.Vector3d location = 1;
  if (this->has_location()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::location(this), target, stream);
  }

  // .world_proto.Attitude attitude = 2;
  if (this->has_attitude()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::attitude(this), target, stream);
  }

  // .world_proto.Vector3d velocity = 3;
  if (this->has_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::velocity(this), target, stream);
  }

  // .world_proto.Vector3d acceleration = 4;
  if (this->has_acceleration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::acceleration(this), target, stream);
  }

  // bool is_on_ground = 5;
  if (this->is_on_ground() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_on_ground(), target);
  }

  // float flap_ratio = 6;
  if (!(this->flap_ratio() <= 0 && this->flap_ratio() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_flap_ratio(), target);
  }

  // float spoiler_ratio = 7;
  if (!(this->spoiler_ratio() <= 0 && this->spoiler_ratio() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_spoiler_ratio(), target);
  }

  // float gear_ratio = 8;
  if (!(this->gear_ratio() <= 0 && this->gear_ratio() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_gear_ratio(), target);
  }

  // float nose_wheel_angle = 9;
  if (!(this->nose_wheel_angle() <= 0 && this->nose_wheel_angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_nose_wheel_angle(), target);
  }

  // bool landing_lights = 10;
  if (this->landing_lights() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_landing_lights(), target);
  }

  // bool taxi_lights = 11;
  if (this->taxi_lights() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_taxi_lights(), target);
  }

  // bool strobe_lights = 12;
  if (this->strobe_lights() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_strobe_lights(), target);
  }

  // int32 frequency_khz = 13;
  if (this->frequency_khz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_frequency_khz(), target);
  }

  // string squawk = 14;
  if (this->squawk().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_squawk().data(), static_cast<int>(this->_internal_squawk().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "world_proto.Aircraft.Situation.squawk");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_squawk(), target);
  }

  // bool mode_c = 15;
  if (this->mode_c() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_mode_c(), target);
  }

  // bool mode_s = 16;
  if (this->mode_s() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_mode_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world_proto.Aircraft.Situation)
  return target;
}

size_t Aircraft_Situation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world_proto.Aircraft.Situation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string squawk = 14;
  if (this->squawk().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_squawk());
  }

  // .world_proto.Vector3d location = 1;
  if (this->has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // .world_proto.Attitude attitude = 2;
  if (this->has_attitude()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attitude_);
  }

  // .world_proto.Vector3d velocity = 3;
  if (this->has_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_);
  }

  // .world_proto.Vector3d acceleration = 4;
  if (this->has_acceleration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *acceleration_);
  }

  // float flap_ratio = 6;
  if (!(this->flap_ratio() <= 0 && this->flap_ratio() >= 0)) {
    total_size += 1 + 4;
  }

  // float spoiler_ratio = 7;
  if (!(this->spoiler_ratio() <= 0 && this->spoiler_ratio() >= 0)) {
    total_size += 1 + 4;
  }

  // float gear_ratio = 8;
  if (!(this->gear_ratio() <= 0 && this->gear_ratio() >= 0)) {
    total_size += 1 + 4;
  }

  // float nose_wheel_angle = 9;
  if (!(this->nose_wheel_angle() <= 0 && this->nose_wheel_angle() >= 0)) {
    total_size += 1 + 4;
  }

  // bool is_on_ground = 5;
  if (this->is_on_ground() != 0) {
    total_size += 1 + 1;
  }

  // bool landing_lights = 10;
  if (this->landing_lights() != 0) {
    total_size += 1 + 1;
  }

  // bool taxi_lights = 11;
  if (this->taxi_lights() != 0) {
    total_size += 1 + 1;
  }

  // bool strobe_lights = 12;
  if (this->strobe_lights() != 0) {
    total_size += 1 + 1;
  }

  // int32 frequency_khz = 13;
  if (this->frequency_khz() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_frequency_khz());
  }

  // bool mode_c = 15;
  if (this->mode_c() != 0) {
    total_size += 1 + 1;
  }

  // bool mode_s = 16;
  if (this->mode_s() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Aircraft_Situation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world_proto.Aircraft.Situation)
  GOOGLE_DCHECK_NE(&from, this);
  const Aircraft_Situation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Aircraft_Situation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world_proto.Aircraft.Situation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world_proto.Aircraft.Situation)
    MergeFrom(*source);
  }
}

void Aircraft_Situation::MergeFrom(const Aircraft_Situation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world_proto.Aircraft.Situation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.squawk().size() > 0) {
    _internal_set_squawk(from._internal_squawk());
  }
  if (from.has_location()) {
    _internal_mutable_location()->::world_proto::Vector3d::MergeFrom(from._internal_location());
  }
  if (from.has_attitude()) {
    _internal_mutable_attitude()->::world_proto::Attitude::MergeFrom(from._internal_attitude());
  }
  if (from.has_velocity()) {
    _internal_mutable_velocity()->::world_proto::Vector3d::MergeFrom(from._internal_velocity());
  }
  if (from.has_acceleration()) {
    _internal_mutable_acceleration()->::world_proto::Vector3d::MergeFrom(from._internal_acceleration());
  }
  if (!(from.flap_ratio() <= 0 && from.flap_ratio() >= 0)) {
    _internal_set_flap_ratio(from._internal_flap_ratio());
  }
  if (!(from.spoiler_ratio() <= 0 && from.spoiler_ratio() >= 0)) {
    _internal_set_spoiler_ratio(from._internal_spoiler_ratio());
  }
  if (!(from.gear_ratio() <= 0 && from.gear_ratio() >= 0)) {
    _internal_set_gear_ratio(from._internal_gear_ratio());
  }
  if (!(from.nose_wheel_angle() <= 0 && from.nose_wheel_angle() >= 0)) {
    _internal_set_nose_wheel_angle(from._internal_nose_wheel_angle());
  }
  if (from.is_on_ground() != 0) {
    _internal_set_is_on_ground(from._internal_is_on_ground());
  }
  if (from.landing_lights() != 0) {
    _internal_set_landing_lights(from._internal_landing_lights());
  }
  if (from.taxi_lights() != 0) {
    _internal_set_taxi_lights(from._internal_taxi_lights());
  }
  if (from.strobe_lights() != 0) {
    _internal_set_strobe_lights(from._internal_strobe_lights());
  }
  if (from.frequency_khz() != 0) {
    _internal_set_frequency_khz(from._internal_frequency_khz());
  }
  if (from.mode_c() != 0) {
    _internal_set_mode_c(from._internal_mode_c());
  }
  if (from.mode_s() != 0) {
    _internal_set_mode_s(from._internal_mode_s());
  }
}

void Aircraft_Situation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world_proto.Aircraft.Situation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Aircraft_Situation::CopyFrom(const Aircraft_Situation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world_proto.Aircraft.Situation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Aircraft_Situation::IsInitialized() const {
  return true;
}

void Aircraft_Situation::InternalSwap(Aircraft_Situation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  squawk_.Swap(&other->squawk_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Aircraft_Situation, mode_s_)
      + sizeof(Aircraft_Situation::mode_s_)
      - PROTOBUF_FIELD_OFFSET(Aircraft_Situation, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Aircraft_Situation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Aircraft::InitAsDefaultInstance() {
  ::world_proto::_Aircraft_default_instance_._instance.get_mutable()->situation_ = const_cast< ::world_proto::Aircraft_Situation*>(
      ::world_proto::Aircraft_Situation::internal_default_instance());
}
class Aircraft::_Internal {
 public:
  static const ::world_proto::Aircraft_Situation& situation(const Aircraft* msg);
};

const ::world_proto::Aircraft_Situation&
Aircraft::_Internal::situation(const Aircraft* msg) {
  return *msg->situation_;
}
Aircraft::Aircraft(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world_proto.Aircraft)
}
Aircraft::Aircraft(const Aircraft& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_icao_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_icao().empty()) {
    model_icao_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_model_icao(),
      GetArena());
  }
  airline_icao_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_airline_icao().empty()) {
    airline_icao_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_airline_icao(),
      GetArena());
  }
  tail_no_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tail_no().empty()) {
    tail_no_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tail_no(),
      GetArena());
  }
  call_sign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_call_sign().empty()) {
    call_sign_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_call_sign(),
      GetArena());
  }
  if (from._internal_has_situation()) {
    situation_ = new ::world_proto::Aircraft_Situation(*from.situation_);
  } else {
    situation_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:world_proto.Aircraft)
}

void Aircraft::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Aircraft_world_2eproto.base);
  model_icao_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  airline_icao_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tail_no_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  call_sign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&situation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&situation_)) + sizeof(id_));
}

Aircraft::~Aircraft() {
  // @@protoc_insertion_point(destructor:world_proto.Aircraft)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Aircraft::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  model_icao_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  airline_icao_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tail_no_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  call_sign_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete situation_;
}

void Aircraft::ArenaDtor(void* object) {
  Aircraft* _this = reinterpret_cast< Aircraft* >(object);
  (void)_this;
}
void Aircraft::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Aircraft::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Aircraft& Aircraft::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Aircraft_world_2eproto.base);
  return *internal_default_instance();
}


void Aircraft::Clear() {
// @@protoc_insertion_point(message_clear_start:world_proto.Aircraft)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_icao_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  airline_icao_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tail_no_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  call_sign_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && situation_ != nullptr) {
    delete situation_;
  }
  situation_ = nullptr;
  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Aircraft::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_icao = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_model_icao();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "world_proto.Aircraft.model_icao"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string airline_icao = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_airline_icao();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "world_proto.Aircraft.airline_icao"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tail_no = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_tail_no();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "world_proto.Aircraft.tail_no"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string call_sign = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_call_sign();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "world_proto.Aircraft.call_sign"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .world_proto.Aircraft.Situation situation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_situation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Aircraft::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world_proto.Aircraft)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string model_icao = 2;
  if (this->model_icao().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_icao().data(), static_cast<int>(this->_internal_model_icao().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "world_proto.Aircraft.model_icao");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_icao(), target);
  }

  // string airline_icao = 3;
  if (this->airline_icao().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_airline_icao().data(), static_cast<int>(this->_internal_airline_icao().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "world_proto.Aircraft.airline_icao");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_airline_icao(), target);
  }

  // string tail_no = 4;
  if (this->tail_no().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tail_no().data(), static_cast<int>(this->_internal_tail_no().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "world_proto.Aircraft.tail_no");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_tail_no(), target);
  }

  // string call_sign = 5;
  if (this->call_sign().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_call_sign().data(), static_cast<int>(this->_internal_call_sign().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "world_proto.Aircraft.call_sign");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_call_sign(), target);
  }

  // .world_proto.Aircraft.Situation situation = 6;
  if (this->has_situation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::situation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world_proto.Aircraft)
  return target;
}

size_t Aircraft::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world_proto.Aircraft)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_icao = 2;
  if (this->model_icao().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_icao());
  }

  // string airline_icao = 3;
  if (this->airline_icao().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_airline_icao());
  }

  // string tail_no = 4;
  if (this->tail_no().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tail_no());
  }

  // string call_sign = 5;
  if (this->call_sign().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_call_sign());
  }

  // .world_proto.Aircraft.Situation situation = 6;
  if (this->has_situation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *situation_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Aircraft::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world_proto.Aircraft)
  GOOGLE_DCHECK_NE(&from, this);
  const Aircraft* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Aircraft>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world_proto.Aircraft)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world_proto.Aircraft)
    MergeFrom(*source);
  }
}

void Aircraft::MergeFrom(const Aircraft& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world_proto.Aircraft)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model_icao().size() > 0) {
    _internal_set_model_icao(from._internal_model_icao());
  }
  if (from.airline_icao().size() > 0) {
    _internal_set_airline_icao(from._internal_airline_icao());
  }
  if (from.tail_no().size() > 0) {
    _internal_set_tail_no(from._internal_tail_no());
  }
  if (from.call_sign().size() > 0) {
    _internal_set_call_sign(from._internal_call_sign());
  }
  if (from.has_situation()) {
    _internal_mutable_situation()->::world_proto::Aircraft_Situation::MergeFrom(from._internal_situation());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void Aircraft::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world_proto.Aircraft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Aircraft::CopyFrom(const Aircraft& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world_proto.Aircraft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Aircraft::IsInitialized() const {
  return true;
}

void Aircraft::InternalSwap(Aircraft* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  model_icao_.Swap(&other->model_icao_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  airline_icao_.Swap(&other->airline_icao_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tail_no_.Swap(&other->tail_no_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  call_sign_.Swap(&other->call_sign_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Aircraft, id_)
      + sizeof(Aircraft::id_)
      - PROTOBUF_FIELD_OFFSET(Aircraft, situation_)>(
          reinterpret_cast<char*>(&situation_),
          reinterpret_cast<char*>(&other->situation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Aircraft::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Runway_End::InitAsDefaultInstance() {
  ::world_proto::_Runway_End_default_instance_._instance.get_mutable()->centerline_point_ = const_cast< ::world_proto::GeoPoint*>(
      ::world_proto::GeoPoint::internal_default_instance());
}
class Runway_End::_Internal {
 public:
  static const ::world_proto::GeoPoint& centerline_point(const Runway_End* msg);
};

const ::world_proto::GeoPoint&
Runway_End::_Internal::centerline_point(const Runway_End* msg) {
  return *msg->centerline_point_;
}
Runway_End::Runway_End(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world_proto.Runway.End)
}
Runway_End::Runway_End(const Runway_End& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_centerline_point()) {
    centerline_point_ = new ::world_proto::GeoPoint(*from.centerline_point_);
  } else {
    centerline_point_ = nullptr;
  }
  ::memcpy(&heading_, &from.heading_,
    static_cast<size_t>(reinterpret_cast<char*>(&overrun_area_meters_) -
    reinterpret_cast<char*>(&heading_)) + sizeof(overrun_area_meters_));
  // @@protoc_insertion_point(copy_constructor:world_proto.Runway.End)
}

void Runway_End::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Runway_End_world_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&centerline_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&overrun_area_meters_) -
      reinterpret_cast<char*>(&centerline_point_)) + sizeof(overrun_area_meters_));
}

Runway_End::~Runway_End() {
  // @@protoc_insertion_point(destructor:world_proto.Runway.End)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Runway_End::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete centerline_point_;
}

void Runway_End::ArenaDtor(void* object) {
  Runway_End* _this = reinterpret_cast< Runway_End* >(object);
  (void)_this;
}
void Runway_End::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Runway_End::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Runway_End& Runway_End::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Runway_End_world_2eproto.base);
  return *internal_default_instance();
}


void Runway_End::Clear() {
// @@protoc_insertion_point(message_clear_start:world_proto.Runway.End)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && centerline_point_ != nullptr) {
    delete centerline_point_;
  }
  centerline_point_ = nullptr;
  ::memset(&heading_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&overrun_area_meters_) -
      reinterpret_cast<char*>(&heading_)) + sizeof(overrun_area_meters_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Runway_End::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "world_proto.Runway.End.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float heading = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .world_proto.GeoPoint centerline_point = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_centerline_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float displaced_threshold_meters = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          displaced_threshold_meters_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float overrun_area_meters = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          overrun_area_meters_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Runway_End::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world_proto.Runway.End)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "world_proto.Runway.End.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // float heading = 2;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_heading(), target);
  }

  // .world_proto.GeoPoint centerline_point = 3;
  if (this->has_centerline_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::centerline_point(this), target, stream);
  }

  // float displaced_threshold_meters = 4;
  if (!(this->displaced_threshold_meters() <= 0 && this->displaced_threshold_meters() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_displaced_threshold_meters(), target);
  }

  // float overrun_area_meters = 5;
  if (!(this->overrun_area_meters() <= 0 && this->overrun_area_meters() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_overrun_area_meters(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world_proto.Runway.End)
  return target;
}

size_t Runway_End::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world_proto.Runway.End)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .world_proto.GeoPoint centerline_point = 3;
  if (this->has_centerline_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *centerline_point_);
  }

  // float heading = 2;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    total_size += 1 + 4;
  }

  // float displaced_threshold_meters = 4;
  if (!(this->displaced_threshold_meters() <= 0 && this->displaced_threshold_meters() >= 0)) {
    total_size += 1 + 4;
  }

  // float overrun_area_meters = 5;
  if (!(this->overrun_area_meters() <= 0 && this->overrun_area_meters() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Runway_End::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world_proto.Runway.End)
  GOOGLE_DCHECK_NE(&from, this);
  const Runway_End* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Runway_End>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world_proto.Runway.End)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world_proto.Runway.End)
    MergeFrom(*source);
  }
}

void Runway_End::MergeFrom(const Runway_End& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world_proto.Runway.End)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_centerline_point()) {
    _internal_mutable_centerline_point()->::world_proto::GeoPoint::MergeFrom(from._internal_centerline_point());
  }
  if (!(from.heading() <= 0 && from.heading() >= 0)) {
    _internal_set_heading(from._internal_heading());
  }
  if (!(from.displaced_threshold_meters() <= 0 && from.displaced_threshold_meters() >= 0)) {
    _internal_set_displaced_threshold_meters(from._internal_displaced_threshold_meters());
  }
  if (!(from.overrun_area_meters() <= 0 && from.overrun_area_meters() >= 0)) {
    _internal_set_overrun_area_meters(from._internal_overrun_area_meters());
  }
}

void Runway_End::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world_proto.Runway.End)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Runway_End::CopyFrom(const Runway_End& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world_proto.Runway.End)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Runway_End::IsInitialized() const {
  return true;
}

void Runway_End::InternalSwap(Runway_End* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Runway_End, overrun_area_meters_)
      + sizeof(Runway_End::overrun_area_meters_)
      - PROTOBUF_FIELD_OFFSET(Runway_End, centerline_point_)>(
          reinterpret_cast<char*>(&centerline_point_),
          reinterpret_cast<char*>(&other->centerline_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Runway_End::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Runway::InitAsDefaultInstance() {
  ::world_proto::_Runway_default_instance_._instance.get_mutable()->end_1_ = const_cast< ::world_proto::Runway_End*>(
      ::world_proto::Runway_End::internal_default_instance());
  ::world_proto::_Runway_default_instance_._instance.get_mutable()->end_2_ = const_cast< ::world_proto::Runway_End*>(
      ::world_proto::Runway_End::internal_default_instance());
}
class Runway::_Internal {
 public:
  static const ::world_proto::Runway_End& end_1(const Runway* msg);
  static const ::world_proto::Runway_End& end_2(const Runway* msg);
};

const ::world_proto::Runway_End&
Runway::_Internal::end_1(const Runway* msg) {
  return *msg->end_1_;
}
const ::world_proto::Runway_End&
Runway::_Internal::end_2(const Runway* msg) {
  return *msg->end_2_;
}
Runway::Runway(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world_proto.Runway)
}
Runway::Runway(const Runway& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_end_1()) {
    end_1_ = new ::world_proto::Runway_End(*from.end_1_);
  } else {
    end_1_ = nullptr;
  }
  if (from._internal_has_end_2()) {
    end_2_ = new ::world_proto::Runway_End(*from.end_2_);
  } else {
    end_2_ = nullptr;
  }
  ::memcpy(&width_meters_, &from.width_meters_,
    static_cast<size_t>(reinterpret_cast<char*>(&mask_bit_) -
    reinterpret_cast<char*>(&width_meters_)) + sizeof(mask_bit_));
  // @@protoc_insertion_point(copy_constructor:world_proto.Runway)
}

void Runway::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Runway_world_2eproto.base);
  ::memset(&end_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mask_bit_) -
      reinterpret_cast<char*>(&end_1_)) + sizeof(mask_bit_));
}

Runway::~Runway() {
  // @@protoc_insertion_point(destructor:world_proto.Runway)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Runway::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete end_1_;
  if (this != internal_default_instance()) delete end_2_;
}

void Runway::ArenaDtor(void* object) {
  Runway* _this = reinterpret_cast< Runway* >(object);
  (void)_this;
}
void Runway::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Runway::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Runway& Runway::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Runway_world_2eproto.base);
  return *internal_default_instance();
}


void Runway::Clear() {
// @@protoc_insertion_point(message_clear_start:world_proto.Runway)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && end_1_ != nullptr) {
    delete end_1_;
  }
  end_1_ = nullptr;
  if (GetArena() == nullptr && end_2_ != nullptr) {
    delete end_2_;
  }
  end_2_ = nullptr;
  ::memset(&width_meters_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mask_bit_) -
      reinterpret_cast<char*>(&width_meters_)) + sizeof(mask_bit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Runway::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float width_meters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          width_meters_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float length_meters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          length_meters_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 mask_bit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          mask_bit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .world_proto.Runway.End end_1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .world_proto.Runway.End end_2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Runway::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world_proto.Runway)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float width_meters = 1;
  if (!(this->width_meters() <= 0 && this->width_meters() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_width_meters(), target);
  }

  // float length_meters = 2;
  if (!(this->length_meters() <= 0 && this->length_meters() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_length_meters(), target);
  }

  // uint32 mask_bit = 3;
  if (this->mask_bit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mask_bit(), target);
  }

  // .world_proto.Runway.End end_1 = 4;
  if (this->has_end_1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::end_1(this), target, stream);
  }

  // .world_proto.Runway.End end_2 = 5;
  if (this->has_end_2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::end_2(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world_proto.Runway)
  return target;
}

size_t Runway::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world_proto.Runway)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .world_proto.Runway.End end_1 = 4;
  if (this->has_end_1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_1_);
  }

  // .world_proto.Runway.End end_2 = 5;
  if (this->has_end_2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_2_);
  }

  // float width_meters = 1;
  if (!(this->width_meters() <= 0 && this->width_meters() >= 0)) {
    total_size += 1 + 4;
  }

  // float length_meters = 2;
  if (!(this->length_meters() <= 0 && this->length_meters() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 mask_bit = 3;
  if (this->mask_bit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mask_bit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Runway::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world_proto.Runway)
  GOOGLE_DCHECK_NE(&from, this);
  const Runway* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Runway>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world_proto.Runway)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world_proto.Runway)
    MergeFrom(*source);
  }
}

void Runway::MergeFrom(const Runway& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world_proto.Runway)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_end_1()) {
    _internal_mutable_end_1()->::world_proto::Runway_End::MergeFrom(from._internal_end_1());
  }
  if (from.has_end_2()) {
    _internal_mutable_end_2()->::world_proto::Runway_End::MergeFrom(from._internal_end_2());
  }
  if (!(from.width_meters() <= 0 && from.width_meters() >= 0)) {
    _internal_set_width_meters(from._internal_width_meters());
  }
  if (!(from.length_meters() <= 0 && from.length_meters() >= 0)) {
    _internal_set_length_meters(from._internal_length_meters());
  }
  if (from.mask_bit() != 0) {
    _internal_set_mask_bit(from._internal_mask_bit());
  }
}

void Runway::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world_proto.Runway)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Runway::CopyFrom(const Runway& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world_proto.Runway)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Runway::IsInitialized() const {
  return true;
}

void Runway::InternalSwap(Runway* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Runway, mask_bit_)
      + sizeof(Runway::mask_bit_)
      - PROTOBUF_FIELD_OFFSET(Runway, end_1_)>(
          reinterpret_cast<char*>(&end_1_),
          reinterpret_cast<char*>(&other->end_1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Runway::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TaxiNode::InitAsDefaultInstance() {
  ::world_proto::_TaxiNode_default_instance_._instance.get_mutable()->location_ = const_cast< ::world_proto::GeoPoint*>(
      ::world_proto::GeoPoint::internal_default_instance());
}
class TaxiNode::_Internal {
 public:
  static const ::world_proto::GeoPoint& location(const TaxiNode* msg);
};

const ::world_proto::GeoPoint&
TaxiNode::_Internal::location(const TaxiNode* msg) {
  return *msg->location_;
}
TaxiNode::TaxiNode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world_proto.TaxiNode)
}
TaxiNode::TaxiNode(const TaxiNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::world_proto::GeoPoint(*from.location_);
  } else {
    location_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_junction_) -
    reinterpret_cast<char*>(&id_)) + sizeof(is_junction_));
  // @@protoc_insertion_point(copy_constructor:world_proto.TaxiNode)
}

void TaxiNode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TaxiNode_world_2eproto.base);
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_junction_) -
      reinterpret_cast<char*>(&location_)) + sizeof(is_junction_));
}

TaxiNode::~TaxiNode() {
  // @@protoc_insertion_point(destructor:world_proto.TaxiNode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TaxiNode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
}

void TaxiNode::ArenaDtor(void* object) {
  TaxiNode* _this = reinterpret_cast< TaxiNode* >(object);
  (void)_this;
}
void TaxiNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaxiNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaxiNode& TaxiNode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TaxiNode_world_2eproto.base);
  return *internal_default_instance();
}


void TaxiNode::Clear() {
// @@protoc_insertion_point(message_clear_start:world_proto.TaxiNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_junction_) -
      reinterpret_cast<char*>(&id_)) + sizeof(is_junction_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaxiNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .world_proto.GeoPoint location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_junction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_junction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaxiNode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world_proto.TaxiNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .world_proto.GeoPoint location = 2;
  if (this->has_location()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::location(this), target, stream);
  }

  // bool is_junction = 3;
  if (this->is_junction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_junction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world_proto.TaxiNode)
  return target;
}

size_t TaxiNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world_proto.TaxiNode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .world_proto.GeoPoint location = 2;
  if (this->has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // bool is_junction = 3;
  if (this->is_junction() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaxiNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world_proto.TaxiNode)
  GOOGLE_DCHECK_NE(&from, this);
  const TaxiNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaxiNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world_proto.TaxiNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world_proto.TaxiNode)
    MergeFrom(*source);
  }
}

void TaxiNode::MergeFrom(const TaxiNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world_proto.TaxiNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_location()) {
    _internal_mutable_location()->::world_proto::GeoPoint::MergeFrom(from._internal_location());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.is_junction() != 0) {
    _internal_set_is_junction(from._internal_is_junction());
  }
}

void TaxiNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world_proto.TaxiNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaxiNode::CopyFrom(const TaxiNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world_proto.TaxiNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaxiNode::IsInitialized() const {
  return true;
}

void TaxiNode::InternalSwap(TaxiNode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaxiNode, is_junction_)
      + sizeof(TaxiNode::is_junction_)
      - PROTOBUF_FIELD_OFFSET(TaxiNode, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaxiNode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TaxiEdge_ActiveZoneMatrix::InitAsDefaultInstance() {
}
class TaxiEdge_ActiveZoneMatrix::_Internal {
 public:
};

TaxiEdge_ActiveZoneMatrix::TaxiEdge_ActiveZoneMatrix(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world_proto.TaxiEdge.ActiveZoneMatrix)
}
TaxiEdge_ActiveZoneMatrix::TaxiEdge_ActiveZoneMatrix(const TaxiEdge_ActiveZoneMatrix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&departure_, &from.departure_,
    static_cast<size_t>(reinterpret_cast<char*>(&ils_) -
    reinterpret_cast<char*>(&departure_)) + sizeof(ils_));
  // @@protoc_insertion_point(copy_constructor:world_proto.TaxiEdge.ActiveZoneMatrix)
}

void TaxiEdge_ActiveZoneMatrix::SharedCtor() {
  ::memset(&departure_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ils_) -
      reinterpret_cast<char*>(&departure_)) + sizeof(ils_));
}

TaxiEdge_ActiveZoneMatrix::~TaxiEdge_ActiveZoneMatrix() {
  // @@protoc_insertion_point(destructor:world_proto.TaxiEdge.ActiveZoneMatrix)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TaxiEdge_ActiveZoneMatrix::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TaxiEdge_ActiveZoneMatrix::ArenaDtor(void* object) {
  TaxiEdge_ActiveZoneMatrix* _this = reinterpret_cast< TaxiEdge_ActiveZoneMatrix* >(object);
  (void)_this;
}
void TaxiEdge_ActiveZoneMatrix::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaxiEdge_ActiveZoneMatrix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaxiEdge_ActiveZoneMatrix& TaxiEdge_ActiveZoneMatrix::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TaxiEdge_ActiveZoneMatrix_world_2eproto.base);
  return *internal_default_instance();
}


void TaxiEdge_ActiveZoneMatrix::Clear() {
// @@protoc_insertion_point(message_clear_start:world_proto.TaxiEdge.ActiveZoneMatrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&departure_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ils_) -
      reinterpret_cast<char*>(&departure_)) + sizeof(ils_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaxiEdge_ActiveZoneMatrix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 departure = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          departure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 arrival = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          arrival_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ils = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ils_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaxiEdge_ActiveZoneMatrix::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world_proto.TaxiEdge.ActiveZoneMatrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 departure = 1;
  if (this->departure() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_departure(), target);
  }

  // uint32 arrival = 2;
  if (this->arrival() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_arrival(), target);
  }

  // uint32 ils = 3;
  if (this->ils() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ils(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world_proto.TaxiEdge.ActiveZoneMatrix)
  return target;
}

size_t TaxiEdge_ActiveZoneMatrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world_proto.TaxiEdge.ActiveZoneMatrix)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 departure = 1;
  if (this->departure() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_departure());
  }

  // uint32 arrival = 2;
  if (this->arrival() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_arrival());
  }

  // uint32 ils = 3;
  if (this->ils() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ils());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaxiEdge_ActiveZoneMatrix::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world_proto.TaxiEdge.ActiveZoneMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  const TaxiEdge_ActiveZoneMatrix* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaxiEdge_ActiveZoneMatrix>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world_proto.TaxiEdge.ActiveZoneMatrix)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world_proto.TaxiEdge.ActiveZoneMatrix)
    MergeFrom(*source);
  }
}

void TaxiEdge_ActiveZoneMatrix::MergeFrom(const TaxiEdge_ActiveZoneMatrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world_proto.TaxiEdge.ActiveZoneMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.departure() != 0) {
    _internal_set_departure(from._internal_departure());
  }
  if (from.arrival() != 0) {
    _internal_set_arrival(from._internal_arrival());
  }
  if (from.ils() != 0) {
    _internal_set_ils(from._internal_ils());
  }
}

void TaxiEdge_ActiveZoneMatrix::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world_proto.TaxiEdge.ActiveZoneMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaxiEdge_ActiveZoneMatrix::CopyFrom(const TaxiEdge_ActiveZoneMatrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world_proto.TaxiEdge.ActiveZoneMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaxiEdge_ActiveZoneMatrix::IsInitialized() const {
  return true;
}

void TaxiEdge_ActiveZoneMatrix::InternalSwap(TaxiEdge_ActiveZoneMatrix* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaxiEdge_ActiveZoneMatrix, ils_)
      + sizeof(TaxiEdge_ActiveZoneMatrix::ils_)
      - PROTOBUF_FIELD_OFFSET(TaxiEdge_ActiveZoneMatrix, departure_)>(
          reinterpret_cast<char*>(&departure_),
          reinterpret_cast<char*>(&other->departure_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaxiEdge_ActiveZoneMatrix::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TaxiEdge::InitAsDefaultInstance() {
  ::world_proto::_TaxiEdge_default_instance_._instance.get_mutable()->active_zones_ = const_cast< ::world_proto::TaxiEdge_ActiveZoneMatrix*>(
      ::world_proto::TaxiEdge_ActiveZoneMatrix::internal_default_instance());
}
class TaxiEdge::_Internal {
 public:
  static const ::world_proto::TaxiEdge_ActiveZoneMatrix& active_zones(const TaxiEdge* msg);
};

const ::world_proto::TaxiEdge_ActiveZoneMatrix&
TaxiEdge::_Internal::active_zones(const TaxiEdge* msg) {
  return *msg->active_zones_;
}
TaxiEdge::TaxiEdge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world_proto.TaxiEdge)
}
TaxiEdge::TaxiEdge(const TaxiEdge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_active_zones()) {
    active_zones_ = new ::world_proto::TaxiEdge_ActiveZoneMatrix(*from.active_zones_);
  } else {
    active_zones_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&heading_) -
    reinterpret_cast<char*>(&id_)) + sizeof(heading_));
  // @@protoc_insertion_point(copy_constructor:world_proto.TaxiEdge)
}

void TaxiEdge::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TaxiEdge_world_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&active_zones_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_) -
      reinterpret_cast<char*>(&active_zones_)) + sizeof(heading_));
}

TaxiEdge::~TaxiEdge() {
  // @@protoc_insertion_point(destructor:world_proto.TaxiEdge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TaxiEdge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete active_zones_;
}

void TaxiEdge::ArenaDtor(void* object) {
  TaxiEdge* _this = reinterpret_cast< TaxiEdge* >(object);
  (void)_this;
}
void TaxiEdge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaxiEdge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaxiEdge& TaxiEdge::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TaxiEdge_world_2eproto.base);
  return *internal_default_instance();
}


void TaxiEdge::Clear() {
// @@protoc_insertion_point(message_clear_start:world_proto.TaxiEdge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && active_zones_ != nullptr) {
    delete active_zones_;
  }
  active_zones_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_) -
      reinterpret_cast<char*>(&id_)) + sizeof(heading_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaxiEdge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "world_proto.TaxiEdge.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 node_id_1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          node_id_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 node_id_2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          node_id_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .world_proto.TaxiEdge.Type type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::world_proto::TaxiEdge_Type>(val));
        } else goto handle_unusual;
        continue;
      // bool is_one_way = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_one_way_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_high_speed_exit = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          is_high_speed_exit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float length_meters = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          length_meters_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float heading = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .world_proto.TaxiEdge.ActiveZoneMatrix active_zones = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_active_zones(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaxiEdge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world_proto.TaxiEdge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "world_proto.TaxiEdge.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 node_id_1 = 3;
  if (this->node_id_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_node_id_1(), target);
  }

  // int32 node_id_2 = 4;
  if (this->node_id_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_node_id_2(), target);
  }

  // .world_proto.TaxiEdge.Type type = 5;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_type(), target);
  }

  // bool is_one_way = 6;
  if (this->is_one_way() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_one_way(), target);
  }

  // bool is_high_speed_exit = 7;
  if (this->is_high_speed_exit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_high_speed_exit(), target);
  }

  // float length_meters = 8;
  if (!(this->length_meters() <= 0 && this->length_meters() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_length_meters(), target);
  }

  // float heading = 9;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_heading(), target);
  }

  // .world_proto.TaxiEdge.ActiveZoneMatrix active_zones = 10;
  if (this->has_active_zones()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::active_zones(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world_proto.TaxiEdge)
  return target;
}

size_t TaxiEdge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world_proto.TaxiEdge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .world_proto.TaxiEdge.ActiveZoneMatrix active_zones = 10;
  if (this->has_active_zones()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *active_zones_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 node_id_1 = 3;
  if (this->node_id_1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_node_id_1());
  }

  // int32 node_id_2 = 4;
  if (this->node_id_2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_node_id_2());
  }

  // .world_proto.TaxiEdge.Type type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // bool is_one_way = 6;
  if (this->is_one_way() != 0) {
    total_size += 1 + 1;
  }

  // bool is_high_speed_exit = 7;
  if (this->is_high_speed_exit() != 0) {
    total_size += 1 + 1;
  }

  // float length_meters = 8;
  if (!(this->length_meters() <= 0 && this->length_meters() >= 0)) {
    total_size += 1 + 4;
  }

  // float heading = 9;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaxiEdge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world_proto.TaxiEdge)
  GOOGLE_DCHECK_NE(&from, this);
  const TaxiEdge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaxiEdge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world_proto.TaxiEdge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world_proto.TaxiEdge)
    MergeFrom(*source);
  }
}

void TaxiEdge::MergeFrom(const TaxiEdge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world_proto.TaxiEdge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_active_zones()) {
    _internal_mutable_active_zones()->::world_proto::TaxiEdge_ActiveZoneMatrix::MergeFrom(from._internal_active_zones());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.node_id_1() != 0) {
    _internal_set_node_id_1(from._internal_node_id_1());
  }
  if (from.node_id_2() != 0) {
    _internal_set_node_id_2(from._internal_node_id_2());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.is_one_way() != 0) {
    _internal_set_is_one_way(from._internal_is_one_way());
  }
  if (from.is_high_speed_exit() != 0) {
    _internal_set_is_high_speed_exit(from._internal_is_high_speed_exit());
  }
  if (!(from.length_meters() <= 0 && from.length_meters() >= 0)) {
    _internal_set_length_meters(from._internal_length_meters());
  }
  if (!(from.heading() <= 0 && from.heading() >= 0)) {
    _internal_set_heading(from._internal_heading());
  }
}

void TaxiEdge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world_proto.TaxiEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaxiEdge::CopyFrom(const TaxiEdge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world_proto.TaxiEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaxiEdge::IsInitialized() const {
  return true;
}

void TaxiEdge::InternalSwap(TaxiEdge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaxiEdge, heading_)
      + sizeof(TaxiEdge::heading_)
      - PROTOBUF_FIELD_OFFSET(TaxiEdge, active_zones_)>(
          reinterpret_cast<char*>(&active_zones_),
          reinterpret_cast<char*>(&other->active_zones_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaxiEdge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ParkingStand::InitAsDefaultInstance() {
  ::world_proto::_ParkingStand_default_instance_._instance.get_mutable()->location_ = const_cast< ::world_proto::GeoPoint*>(
      ::world_proto::GeoPoint::internal_default_instance());
}
class ParkingStand::_Internal {
 public:
  static const ::world_proto::GeoPoint& location(const ParkingStand* msg);
};

const ::world_proto::GeoPoint&
ParkingStand::_Internal::location(const ParkingStand* msg) {
  return *msg->location_;
}
ParkingStand::ParkingStand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  categories_(arena),
  operation_types_(arena),
  airline_icaos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world_proto.ParkingStand)
}
ParkingStand::ParkingStand(const ParkingStand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      categories_(from.categories_),
      operation_types_(from.operation_types_),
      airline_icaos_(from.airline_icaos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  width_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_width_code().empty()) {
    width_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_width_code(),
      GetArena());
  }
  if (from._internal_has_location()) {
    location_ = new ::world_proto::GeoPoint(*from.location_);
  } else {
    location_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&heading_) -
    reinterpret_cast<char*>(&id_)) + sizeof(heading_));
  // @@protoc_insertion_point(copy_constructor:world_proto.ParkingStand)
}

void ParkingStand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ParkingStand_world_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  width_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_) -
      reinterpret_cast<char*>(&location_)) + sizeof(heading_));
}

ParkingStand::~ParkingStand() {
  // @@protoc_insertion_point(destructor:world_proto.ParkingStand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ParkingStand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  width_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete location_;
}

void ParkingStand::ArenaDtor(void* object) {
  ParkingStand* _this = reinterpret_cast< ParkingStand* >(object);
  (void)_this;
}
void ParkingStand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParkingStand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ParkingStand& ParkingStand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ParkingStand_world_2eproto.base);
  return *internal_default_instance();
}


void ParkingStand::Clear() {
// @@protoc_insertion_point(message_clear_start:world_proto.ParkingStand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  categories_.Clear();
  operation_types_.Clear();
  airline_icaos_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  width_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_) -
      reinterpret_cast<char*>(&id_)) + sizeof(heading_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParkingStand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "world_proto.ParkingStand.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .world_proto.ParkingStand.Type type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::world_proto::ParkingStand_Type>(val));
        } else goto handle_unusual;
        continue;
      // .world_proto.GeoPoint location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float heading = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string width_code = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_width_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "world_proto.ParkingStand.width_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .world_proto.Aircraft.Category categories = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_categories(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_categories(static_cast<::world_proto::Aircraft_Category>(val));
        } else goto handle_unusual;
        continue;
      // repeated .world_proto.Aircraft.OperationType operation_types = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_operation_types(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_operation_types(static_cast<::world_proto::Aircraft_OperationType>(val));
        } else goto handle_unusual;
        continue;
      // repeated string airline_icaos = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_airline_icaos();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "world_proto.ParkingStand.airline_icaos"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParkingStand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world_proto.ParkingStand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "world_proto.ParkingStand.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .world_proto.ParkingStand.Type type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // .world_proto.GeoPoint location = 4;
  if (this->has_location()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::location(this), target, stream);
  }

  // float heading = 5;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_heading(), target);
  }

  // string width_code = 6;
  if (this->width_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_width_code().data(), static_cast<int>(this->_internal_width_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "world_proto.ParkingStand.width_code");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_width_code(), target);
  }

  // repeated .world_proto.Aircraft.Category categories = 7;
  {
    int byte_size = _categories_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          7, categories_, byte_size, target);
    }
  }

  // repeated .world_proto.Aircraft.OperationType operation_types = 8;
  {
    int byte_size = _operation_types_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          8, operation_types_, byte_size, target);
    }
  }

  // repeated string airline_icaos = 9;
  for (int i = 0, n = this->_internal_airline_icaos_size(); i < n; i++) {
    const auto& s = this->_internal_airline_icaos(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "world_proto.ParkingStand.airline_icaos");
    target = stream->WriteString(9, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world_proto.ParkingStand)
  return target;
}

size_t ParkingStand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world_proto.ParkingStand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .world_proto.Aircraft.Category categories = 7;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_categories_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_categories(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _categories_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .world_proto.Aircraft.OperationType operation_types = 8;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_operation_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_operation_types(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _operation_types_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string airline_icaos = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(airline_icaos_.size());
  for (int i = 0, n = airline_icaos_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      airline_icaos_.Get(i));
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string width_code = 6;
  if (this->width_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_width_code());
  }

  // .world_proto.GeoPoint location = 4;
  if (this->has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // .world_proto.ParkingStand.Type type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // float heading = 5;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParkingStand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world_proto.ParkingStand)
  GOOGLE_DCHECK_NE(&from, this);
  const ParkingStand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParkingStand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world_proto.ParkingStand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world_proto.ParkingStand)
    MergeFrom(*source);
  }
}

void ParkingStand::MergeFrom(const ParkingStand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world_proto.ParkingStand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  categories_.MergeFrom(from.categories_);
  operation_types_.MergeFrom(from.operation_types_);
  airline_icaos_.MergeFrom(from.airline_icaos_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.width_code().size() > 0) {
    _internal_set_width_code(from._internal_width_code());
  }
  if (from.has_location()) {
    _internal_mutable_location()->::world_proto::GeoPoint::MergeFrom(from._internal_location());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (!(from.heading() <= 0 && from.heading() >= 0)) {
    _internal_set_heading(from._internal_heading());
  }
}

void ParkingStand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world_proto.ParkingStand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParkingStand::CopyFrom(const ParkingStand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world_proto.ParkingStand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParkingStand::IsInitialized() const {
  return true;
}

void ParkingStand::InternalSwap(ParkingStand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  categories_.InternalSwap(&other->categories_);
  operation_types_.InternalSwap(&other->operation_types_);
  airline_icaos_.InternalSwap(&other->airline_icaos_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  width_code_.Swap(&other->width_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParkingStand, heading_)
      + sizeof(ParkingStand::heading_)
      - PROTOBUF_FIELD_OFFSET(ParkingStand, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParkingStand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Airport::InitAsDefaultInstance() {
  ::world_proto::_Airport_default_instance_._instance.get_mutable()->location_ = const_cast< ::world_proto::GeoPoint*>(
      ::world_proto::GeoPoint::internal_default_instance());
}
class Airport::_Internal {
 public:
  static const ::world_proto::GeoPoint& location(const Airport* msg);
};

const ::world_proto::GeoPoint&
Airport::_Internal::location(const Airport* msg) {
  return *msg->location_;
}
Airport::Airport(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  runways_(arena),
  parking_stands_(arena),
  taxi_nodes_(arena),
  taxi_edges_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world_proto.Airport)
}
Airport::Airport(const Airport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      runways_(from.runways_),
      parking_stands_(from.parking_stands_),
      taxi_nodes_(from.taxi_nodes_),
      taxi_edges_(from.taxi_edges_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  icao_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_icao().empty()) {
    icao_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_icao(),
      GetArena());
  }
  if (from._internal_has_location()) {
    location_ = new ::world_proto::GeoPoint(*from.location_);
  } else {
    location_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:world_proto.Airport)
}

void Airport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Airport_world_2eproto.base);
  icao_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_ = nullptr;
}

Airport::~Airport() {
  // @@protoc_insertion_point(destructor:world_proto.Airport)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Airport::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  icao_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete location_;
}

void Airport::ArenaDtor(void* object) {
  Airport* _this = reinterpret_cast< Airport* >(object);
  (void)_this;
}
void Airport::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Airport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Airport& Airport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Airport_world_2eproto.base);
  return *internal_default_instance();
}


void Airport::Clear() {
// @@protoc_insertion_point(message_clear_start:world_proto.Airport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  runways_.Clear();
  parking_stands_.Clear();
  taxi_nodes_.Clear();
  taxi_edges_.Clear();
  icao_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Airport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string icao = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_icao();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "world_proto.Airport.icao"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .world_proto.GeoPoint location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .world_proto.Runway runways = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_runways(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .world_proto.ParkingStand parking_stands = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parking_stands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .world_proto.TaxiNode taxi_nodes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_taxi_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .world_proto.TaxiEdge taxi_edges = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_taxi_edges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Airport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world_proto.Airport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string icao = 1;
  if (this->icao().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_icao().data(), static_cast<int>(this->_internal_icao().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "world_proto.Airport.icao");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_icao(), target);
  }

  // .world_proto.GeoPoint location = 2;
  if (this->has_location()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::location(this), target, stream);
  }

  // repeated .world_proto.Runway runways = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_runways_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_runways(i), target, stream);
  }

  // repeated .world_proto.ParkingStand parking_stands = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parking_stands_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_parking_stands(i), target, stream);
  }

  // repeated .world_proto.TaxiNode taxi_nodes = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_taxi_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_taxi_nodes(i), target, stream);
  }

  // repeated .world_proto.TaxiEdge taxi_edges = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_taxi_edges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_taxi_edges(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world_proto.Airport)
  return target;
}

size_t Airport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world_proto.Airport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .world_proto.Runway runways = 3;
  total_size += 1UL * this->_internal_runways_size();
  for (const auto& msg : this->runways_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .world_proto.ParkingStand parking_stands = 4;
  total_size += 1UL * this->_internal_parking_stands_size();
  for (const auto& msg : this->parking_stands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .world_proto.TaxiNode taxi_nodes = 5;
  total_size += 1UL * this->_internal_taxi_nodes_size();
  for (const auto& msg : this->taxi_nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .world_proto.TaxiEdge taxi_edges = 6;
  total_size += 1UL * this->_internal_taxi_edges_size();
  for (const auto& msg : this->taxi_edges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string icao = 1;
  if (this->icao().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_icao());
  }

  // .world_proto.GeoPoint location = 2;
  if (this->has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Airport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world_proto.Airport)
  GOOGLE_DCHECK_NE(&from, this);
  const Airport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Airport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world_proto.Airport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world_proto.Airport)
    MergeFrom(*source);
  }
}

void Airport::MergeFrom(const Airport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world_proto.Airport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  runways_.MergeFrom(from.runways_);
  parking_stands_.MergeFrom(from.parking_stands_);
  taxi_nodes_.MergeFrom(from.taxi_nodes_);
  taxi_edges_.MergeFrom(from.taxi_edges_);
  if (from.icao().size() > 0) {
    _internal_set_icao(from._internal_icao());
  }
  if (from.has_location()) {
    _internal_mutable_location()->::world_proto::GeoPoint::MergeFrom(from._internal_location());
  }
}

void Airport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world_proto.Airport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Airport::CopyFrom(const Airport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world_proto.Airport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Airport::IsInitialized() const {
  return true;
}

void Airport::InternalSwap(Airport* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  runways_.InternalSwap(&other->runways_);
  parking_stands_.InternalSwap(&other->parking_stands_);
  taxi_nodes_.InternalSwap(&other->taxi_nodes_);
  taxi_edges_.InternalSwap(&other->taxi_edges_);
  icao_.Swap(&other->icao_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(location_, other->location_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Airport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TaxiPath::InitAsDefaultInstance() {
}
class TaxiPath::_Internal {
 public:
};

TaxiPath::TaxiPath(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  edge_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world_proto.TaxiPath)
}
TaxiPath::TaxiPath(const TaxiPath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      edge_ids_(from.edge_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&from_node_id_, &from.from_node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&to_node_id_) -
    reinterpret_cast<char*>(&from_node_id_)) + sizeof(to_node_id_));
  // @@protoc_insertion_point(copy_constructor:world_proto.TaxiPath)
}

void TaxiPath::SharedCtor() {
  ::memset(&from_node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_node_id_) -
      reinterpret_cast<char*>(&from_node_id_)) + sizeof(to_node_id_));
}

TaxiPath::~TaxiPath() {
  // @@protoc_insertion_point(destructor:world_proto.TaxiPath)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TaxiPath::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TaxiPath::ArenaDtor(void* object) {
  TaxiPath* _this = reinterpret_cast< TaxiPath* >(object);
  (void)_this;
}
void TaxiPath::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaxiPath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaxiPath& TaxiPath::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TaxiPath_world_2eproto.base);
  return *internal_default_instance();
}


void TaxiPath::Clear() {
// @@protoc_insertion_point(message_clear_start:world_proto.TaxiPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  edge_ids_.Clear();
  ::memset(&from_node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_node_id_) -
      reinterpret_cast<char*>(&from_node_id_)) + sizeof(to_node_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaxiPath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 from_node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          from_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 to_node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          to_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 edge_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_edge_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_edge_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaxiPath::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world_proto.TaxiPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 from_node_id = 1;
  if (this->from_node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_from_node_id(), target);
  }

  // int32 to_node_id = 2;
  if (this->to_node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_to_node_id(), target);
  }

  // repeated int32 edge_ids = 3;
  {
    int byte_size = _edge_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_edge_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world_proto.TaxiPath)
  return target;
}

size_t TaxiPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world_proto.TaxiPath)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 edge_ids = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->edge_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _edge_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 from_node_id = 1;
  if (this->from_node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_from_node_id());
  }

  // int32 to_node_id = 2;
  if (this->to_node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_to_node_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaxiPath::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world_proto.TaxiPath)
  GOOGLE_DCHECK_NE(&from, this);
  const TaxiPath* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaxiPath>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world_proto.TaxiPath)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world_proto.TaxiPath)
    MergeFrom(*source);
  }
}

void TaxiPath::MergeFrom(const TaxiPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world_proto.TaxiPath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  edge_ids_.MergeFrom(from.edge_ids_);
  if (from.from_node_id() != 0) {
    _internal_set_from_node_id(from._internal_from_node_id());
  }
  if (from.to_node_id() != 0) {
    _internal_set_to_node_id(from._internal_to_node_id());
  }
}

void TaxiPath::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world_proto.TaxiPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaxiPath::CopyFrom(const TaxiPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world_proto.TaxiPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaxiPath::IsInitialized() const {
  return true;
}

void TaxiPath::InternalSwap(TaxiPath* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  edge_ids_.InternalSwap(&other->edge_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaxiPath, to_node_id_)
      + sizeof(TaxiPath::to_node_id_)
      - PROTOBUF_FIELD_OFFSET(TaxiPath, from_node_id_)>(
          reinterpret_cast<char*>(&from_node_id_),
          reinterpret_cast<char*>(&other->from_node_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaxiPath::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeoPolygon_GeoEdge::InitAsDefaultInstance() {
  ::world_proto::_GeoPolygon_GeoEdge_default_instance_._instance.get_mutable()->from_point_ = const_cast< ::world_proto::GeoPoint*>(
      ::world_proto::GeoPoint::internal_default_instance());
}
class GeoPolygon_GeoEdge::_Internal {
 public:
  static const ::world_proto::GeoPoint& from_point(const GeoPolygon_GeoEdge* msg);
};

const ::world_proto::GeoPoint&
GeoPolygon_GeoEdge::_Internal::from_point(const GeoPolygon_GeoEdge* msg) {
  return *msg->from_point_;
}
GeoPolygon_GeoEdge::GeoPolygon_GeoEdge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world_proto.GeoPolygon.GeoEdge)
}
GeoPolygon_GeoEdge::GeoPolygon_GeoEdge(const GeoPolygon_GeoEdge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_from_point()) {
    from_point_ = new ::world_proto::GeoPoint(*from.from_point_);
  } else {
    from_point_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:world_proto.GeoPolygon.GeoEdge)
}

void GeoPolygon_GeoEdge::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeoPolygon_GeoEdge_world_2eproto.base);
  ::memset(&from_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&from_point_)) + sizeof(type_));
}

GeoPolygon_GeoEdge::~GeoPolygon_GeoEdge() {
  // @@protoc_insertion_point(destructor:world_proto.GeoPolygon.GeoEdge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GeoPolygon_GeoEdge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete from_point_;
}

void GeoPolygon_GeoEdge::ArenaDtor(void* object) {
  GeoPolygon_GeoEdge* _this = reinterpret_cast< GeoPolygon_GeoEdge* >(object);
  (void)_this;
}
void GeoPolygon_GeoEdge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GeoPolygon_GeoEdge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeoPolygon_GeoEdge& GeoPolygon_GeoEdge::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeoPolygon_GeoEdge_world_2eproto.base);
  return *internal_default_instance();
}


void GeoPolygon_GeoEdge::Clear() {
// @@protoc_insertion_point(message_clear_start:world_proto.GeoPolygon.GeoEdge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && from_point_ != nullptr) {
    delete from_point_;
  }
  from_point_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeoPolygon_GeoEdge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .world_proto.GeoPolygon.GeoEdgeType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::world_proto::GeoPolygon_GeoEdgeType>(val));
        } else goto handle_unusual;
        continue;
      // .world_proto.GeoPoint from_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_from_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeoPolygon_GeoEdge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world_proto.GeoPolygon.GeoEdge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .world_proto.GeoPolygon.GeoEdgeType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .world_proto.GeoPoint from_point = 2;
  if (this->has_from_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::from_point(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world_proto.GeoPolygon.GeoEdge)
  return target;
}

size_t GeoPolygon_GeoEdge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world_proto.GeoPolygon.GeoEdge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .world_proto.GeoPoint from_point = 2;
  if (this->has_from_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *from_point_);
  }

  // .world_proto.GeoPolygon.GeoEdgeType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoPolygon_GeoEdge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world_proto.GeoPolygon.GeoEdge)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoPolygon_GeoEdge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeoPolygon_GeoEdge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world_proto.GeoPolygon.GeoEdge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world_proto.GeoPolygon.GeoEdge)
    MergeFrom(*source);
  }
}

void GeoPolygon_GeoEdge::MergeFrom(const GeoPolygon_GeoEdge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world_proto.GeoPolygon.GeoEdge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_from_point()) {
    _internal_mutable_from_point()->::world_proto::GeoPoint::MergeFrom(from._internal_from_point());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void GeoPolygon_GeoEdge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world_proto.GeoPolygon.GeoEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoPolygon_GeoEdge::CopyFrom(const GeoPolygon_GeoEdge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world_proto.GeoPolygon.GeoEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoPolygon_GeoEdge::IsInitialized() const {
  return true;
}

void GeoPolygon_GeoEdge::InternalSwap(GeoPolygon_GeoEdge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GeoPolygon_GeoEdge, type_)
      + sizeof(GeoPolygon_GeoEdge::type_)
      - PROTOBUF_FIELD_OFFSET(GeoPolygon_GeoEdge, from_point_)>(
          reinterpret_cast<char*>(&from_point_),
          reinterpret_cast<char*>(&other->from_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GeoPolygon_GeoEdge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeoPolygon::InitAsDefaultInstance() {
}
class GeoPolygon::_Internal {
 public:
};

GeoPolygon::GeoPolygon(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  edges_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world_proto.GeoPolygon)
}
GeoPolygon::GeoPolygon(const GeoPolygon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      edges_(from.edges_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:world_proto.GeoPolygon)
}

void GeoPolygon::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeoPolygon_world_2eproto.base);
}

GeoPolygon::~GeoPolygon() {
  // @@protoc_insertion_point(destructor:world_proto.GeoPolygon)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GeoPolygon::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GeoPolygon::ArenaDtor(void* object) {
  GeoPolygon* _this = reinterpret_cast< GeoPolygon* >(object);
  (void)_this;
}
void GeoPolygon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GeoPolygon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeoPolygon& GeoPolygon::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeoPolygon_world_2eproto.base);
  return *internal_default_instance();
}


void GeoPolygon::Clear() {
// @@protoc_insertion_point(message_clear_start:world_proto.GeoPolygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  edges_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeoPolygon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .world_proto.GeoPolygon.GeoEdge edges = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeoPolygon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world_proto.GeoPolygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .world_proto.GeoPolygon.GeoEdge edges = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_edges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_edges(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world_proto.GeoPolygon)
  return target;
}

size_t GeoPolygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world_proto.GeoPolygon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .world_proto.GeoPolygon.GeoEdge edges = 1;
  total_size += 1UL * this->_internal_edges_size();
  for (const auto& msg : this->edges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoPolygon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world_proto.GeoPolygon)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoPolygon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeoPolygon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world_proto.GeoPolygon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world_proto.GeoPolygon)
    MergeFrom(*source);
  }
}

void GeoPolygon::MergeFrom(const GeoPolygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world_proto.GeoPolygon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  edges_.MergeFrom(from.edges_);
}

void GeoPolygon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world_proto.GeoPolygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoPolygon::CopyFrom(const GeoPolygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world_proto.GeoPolygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoPolygon::IsInitialized() const {
  return true;
}

void GeoPolygon::InternalSwap(GeoPolygon* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  edges_.InternalSwap(&other->edges_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeoPolygon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AirspaceGeometry::InitAsDefaultInstance() {
  ::world_proto::_AirspaceGeometry_default_instance_._instance.get_mutable()->lateral_bounds_ = const_cast< ::world_proto::GeoPolygon*>(
      ::world_proto::GeoPolygon::internal_default_instance());
}
class AirspaceGeometry::_Internal {
 public:
  static const ::world_proto::GeoPolygon& lateral_bounds(const AirspaceGeometry* msg);
};

const ::world_proto::GeoPolygon&
AirspaceGeometry::_Internal::lateral_bounds(const AirspaceGeometry* msg) {
  return *msg->lateral_bounds_;
}
AirspaceGeometry::AirspaceGeometry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world_proto.AirspaceGeometry)
}
AirspaceGeometry::AirspaceGeometry(const AirspaceGeometry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lateral_bounds()) {
    lateral_bounds_ = new ::world_proto::GeoPolygon(*from.lateral_bounds_);
  } else {
    lateral_bounds_ = nullptr;
  }
  ::memcpy(&lower_bound_feet_, &from.lower_bound_feet_,
    static_cast<size_t>(reinterpret_cast<char*>(&upper_bound_feet_) -
    reinterpret_cast<char*>(&lower_bound_feet_)) + sizeof(upper_bound_feet_));
  // @@protoc_insertion_point(copy_constructor:world_proto.AirspaceGeometry)
}

void AirspaceGeometry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AirspaceGeometry_world_2eproto.base);
  ::memset(&lateral_bounds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&upper_bound_feet_) -
      reinterpret_cast<char*>(&lateral_bounds_)) + sizeof(upper_bound_feet_));
}

AirspaceGeometry::~AirspaceGeometry() {
  // @@protoc_insertion_point(destructor:world_proto.AirspaceGeometry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AirspaceGeometry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete lateral_bounds_;
}

void AirspaceGeometry::ArenaDtor(void* object) {
  AirspaceGeometry* _this = reinterpret_cast< AirspaceGeometry* >(object);
  (void)_this;
}
void AirspaceGeometry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AirspaceGeometry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AirspaceGeometry& AirspaceGeometry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AirspaceGeometry_world_2eproto.base);
  return *internal_default_instance();
}


void AirspaceGeometry::Clear() {
// @@protoc_insertion_point(message_clear_start:world_proto.AirspaceGeometry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && lateral_bounds_ != nullptr) {
    delete lateral_bounds_;
  }
  lateral_bounds_ = nullptr;
  ::memset(&lower_bound_feet_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&upper_bound_feet_) -
      reinterpret_cast<char*>(&lower_bound_feet_)) + sizeof(upper_bound_feet_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AirspaceGeometry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .world_proto.GeoPolygon lateral_bounds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lateral_bounds(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float lower_bound_feet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          lower_bound_feet_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float upper_bound_feet = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          upper_bound_feet_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AirspaceGeometry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world_proto.AirspaceGeometry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .world_proto.GeoPolygon lateral_bounds = 1;
  if (this->has_lateral_bounds()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::lateral_bounds(this), target, stream);
  }

  // float lower_bound_feet = 2;
  if (!(this->lower_bound_feet() <= 0 && this->lower_bound_feet() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_lower_bound_feet(), target);
  }

  // float upper_bound_feet = 3;
  if (!(this->upper_bound_feet() <= 0 && this->upper_bound_feet() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_upper_bound_feet(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world_proto.AirspaceGeometry)
  return target;
}

size_t AirspaceGeometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world_proto.AirspaceGeometry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .world_proto.GeoPolygon lateral_bounds = 1;
  if (this->has_lateral_bounds()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lateral_bounds_);
  }

  // float lower_bound_feet = 2;
  if (!(this->lower_bound_feet() <= 0 && this->lower_bound_feet() >= 0)) {
    total_size += 1 + 4;
  }

  // float upper_bound_feet = 3;
  if (!(this->upper_bound_feet() <= 0 && this->upper_bound_feet() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AirspaceGeometry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world_proto.AirspaceGeometry)
  GOOGLE_DCHECK_NE(&from, this);
  const AirspaceGeometry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AirspaceGeometry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world_proto.AirspaceGeometry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world_proto.AirspaceGeometry)
    MergeFrom(*source);
  }
}

void AirspaceGeometry::MergeFrom(const AirspaceGeometry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world_proto.AirspaceGeometry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_lateral_bounds()) {
    _internal_mutable_lateral_bounds()->::world_proto::GeoPolygon::MergeFrom(from._internal_lateral_bounds());
  }
  if (!(from.lower_bound_feet() <= 0 && from.lower_bound_feet() >= 0)) {
    _internal_set_lower_bound_feet(from._internal_lower_bound_feet());
  }
  if (!(from.upper_bound_feet() <= 0 && from.upper_bound_feet() >= 0)) {
    _internal_set_upper_bound_feet(from._internal_upper_bound_feet());
  }
}

void AirspaceGeometry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world_proto.AirspaceGeometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AirspaceGeometry::CopyFrom(const AirspaceGeometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world_proto.AirspaceGeometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AirspaceGeometry::IsInitialized() const {
  return true;
}

void AirspaceGeometry::InternalSwap(AirspaceGeometry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AirspaceGeometry, upper_bound_feet_)
      + sizeof(AirspaceGeometry::upper_bound_feet_)
      - PROTOBUF_FIELD_OFFSET(AirspaceGeometry, lateral_bounds_)>(
          reinterpret_cast<char*>(&lateral_bounds_),
          reinterpret_cast<char*>(&other->lateral_bounds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AirspaceGeometry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ControlledAirspace::InitAsDefaultInstance() {
  ::world_proto::_ControlledAirspace_default_instance_._instance.get_mutable()->geometry_ = const_cast< ::world_proto::AirspaceGeometry*>(
      ::world_proto::AirspaceGeometry::internal_default_instance());
}
class ControlledAirspace::_Internal {
 public:
  static const ::world_proto::AirspaceGeometry& geometry(const ControlledAirspace* msg);
};

const ::world_proto::AirspaceGeometry&
ControlledAirspace::_Internal::geometry(const ControlledAirspace* msg) {
  return *msg->geometry_;
}
ControlledAirspace::ControlledAirspace(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world_proto.ControlledAirspace)
}
ControlledAirspace::ControlledAirspace(const ControlledAirspace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  area_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_area_code().empty()) {
    area_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_area_code(),
      GetArena());
  }
  icao_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_icao_code().empty()) {
    icao_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_icao_code(),
      GetArena());
  }
  airspace_center_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_airspace_center().empty()) {
    airspace_center_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_airspace_center(),
      GetArena());
  }
  controlled_airspace_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_controlled_airspace_name().empty()) {
    controlled_airspace_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_controlled_airspace_name(),
      GetArena());
  }
  tower_airport_icao_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tower_airport_icao().empty()) {
    tower_airport_icao_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tower_airport_icao(),
      GetArena());
  }
  if (from._internal_has_geometry()) {
    geometry_ = new ::world_proto::AirspaceGeometry(*from.geometry_);
  } else {
    geometry_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&classification_) -
    reinterpret_cast<char*>(&type_)) + sizeof(classification_));
  // @@protoc_insertion_point(copy_constructor:world_proto.ControlledAirspace)
}

void ControlledAirspace::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ControlledAirspace_world_2eproto.base);
  area_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icao_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  airspace_center_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  controlled_airspace_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tower_airport_icao_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&geometry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&classification_) -
      reinterpret_cast<char*>(&geometry_)) + sizeof(classification_));
}

ControlledAirspace::~ControlledAirspace() {
  // @@protoc_insertion_point(destructor:world_proto.ControlledAirspace)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ControlledAirspace::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  area_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icao_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  airspace_center_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  controlled_airspace_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tower_airport_icao_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete geometry_;
}

void ControlledAirspace::ArenaDtor(void* object) {
  ControlledAirspace* _this = reinterpret_cast< ControlledAirspace* >(object);
  (void)_this;
}
void ControlledAirspace::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlledAirspace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ControlledAirspace& ControlledAirspace::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ControlledAirspace_world_2eproto.base);
  return *internal_default_instance();
}


void ControlledAirspace::Clear() {
// @@protoc_insertion_point(message_clear_start:world_proto.ControlledAirspace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  area_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  icao_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  airspace_center_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  controlled_airspace_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tower_airport_icao_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && geometry_ != nullptr) {
    delete geometry_;
  }
  geometry_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&classification_) -
      reinterpret_cast<char*>(&type_)) + sizeof(classification_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlledAirspace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string area_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_area_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "world_proto.ControlledAirspace.area_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string icao_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_icao_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "world_proto.ControlledAirspace.icao_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string airspace_center = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_airspace_center();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "world_proto.ControlledAirspace.airspace_center"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string controlled_airspace_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_controlled_airspace_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "world_proto.ControlledAirspace.controlled_airspace_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .world_proto.ControlledAirspace.Type type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::world_proto::ControlledAirspace_Type>(val));
        } else goto handle_unusual;
        continue;
      // .world_proto.ControlledAirspace.Classification classification = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_classification(static_cast<::world_proto::ControlledAirspace_Classification>(val));
        } else goto handle_unusual;
        continue;
      // .world_proto.AirspaceGeometry geometry = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_geometry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tower_airport_icao = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_tower_airport_icao();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "world_proto.ControlledAirspace.tower_airport_icao"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlledAirspace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world_proto.ControlledAirspace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string area_code = 1;
  if (this->area_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_area_code().data(), static_cast<int>(this->_internal_area_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "world_proto.ControlledAirspace.area_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_area_code(), target);
  }

  // string icao_code = 2;
  if (this->icao_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_icao_code().data(), static_cast<int>(this->_internal_icao_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "world_proto.ControlledAirspace.icao_code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_icao_code(), target);
  }

  // string airspace_center = 3;
  if (this->airspace_center().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_airspace_center().data(), static_cast<int>(this->_internal_airspace_center().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "world_proto.ControlledAirspace.airspace_center");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_airspace_center(), target);
  }

  // string controlled_airspace_name = 4;
  if (this->controlled_airspace_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_controlled_airspace_name().data(), static_cast<int>(this->_internal_controlled_airspace_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "world_proto.ControlledAirspace.controlled_airspace_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_controlled_airspace_name(), target);
  }

  // .world_proto.ControlledAirspace.Type type = 5;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_type(), target);
  }

  // .world_proto.ControlledAirspace.Classification classification = 6;
  if (this->classification() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_classification(), target);
  }

  // .world_proto.AirspaceGeometry geometry = 7;
  if (this->has_geometry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::geometry(this), target, stream);
  }

  // string tower_airport_icao = 8;
  if (this->tower_airport_icao().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tower_airport_icao().data(), static_cast<int>(this->_internal_tower_airport_icao().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "world_proto.ControlledAirspace.tower_airport_icao");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_tower_airport_icao(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world_proto.ControlledAirspace)
  return target;
}

size_t ControlledAirspace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world_proto.ControlledAirspace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string area_code = 1;
  if (this->area_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_area_code());
  }

  // string icao_code = 2;
  if (this->icao_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_icao_code());
  }

  // string airspace_center = 3;
  if (this->airspace_center().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_airspace_center());
  }

  // string controlled_airspace_name = 4;
  if (this->controlled_airspace_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_controlled_airspace_name());
  }

  // string tower_airport_icao = 8;
  if (this->tower_airport_icao().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tower_airport_icao());
  }

  // .world_proto.AirspaceGeometry geometry = 7;
  if (this->has_geometry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *geometry_);
  }

  // .world_proto.ControlledAirspace.Type type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .world_proto.ControlledAirspace.Classification classification = 6;
  if (this->classification() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_classification());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlledAirspace::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world_proto.ControlledAirspace)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlledAirspace* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControlledAirspace>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world_proto.ControlledAirspace)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world_proto.ControlledAirspace)
    MergeFrom(*source);
  }
}

void ControlledAirspace::MergeFrom(const ControlledAirspace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world_proto.ControlledAirspace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.area_code().size() > 0) {
    _internal_set_area_code(from._internal_area_code());
  }
  if (from.icao_code().size() > 0) {
    _internal_set_icao_code(from._internal_icao_code());
  }
  if (from.airspace_center().size() > 0) {
    _internal_set_airspace_center(from._internal_airspace_center());
  }
  if (from.controlled_airspace_name().size() > 0) {
    _internal_set_controlled_airspace_name(from._internal_controlled_airspace_name());
  }
  if (from.tower_airport_icao().size() > 0) {
    _internal_set_tower_airport_icao(from._internal_tower_airport_icao());
  }
  if (from.has_geometry()) {
    _internal_mutable_geometry()->::world_proto::AirspaceGeometry::MergeFrom(from._internal_geometry());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.classification() != 0) {
    _internal_set_classification(from._internal_classification());
  }
}

void ControlledAirspace::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world_proto.ControlledAirspace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlledAirspace::CopyFrom(const ControlledAirspace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world_proto.ControlledAirspace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlledAirspace::IsInitialized() const {
  return true;
}

void ControlledAirspace::InternalSwap(ControlledAirspace* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  area_code_.Swap(&other->area_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  icao_code_.Swap(&other->icao_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  airspace_center_.Swap(&other->airspace_center_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  controlled_airspace_name_.Swap(&other->controlled_airspace_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tower_airport_icao_.Swap(&other->tower_airport_icao_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlledAirspace, classification_)
      + sizeof(ControlledAirspace::classification_)
      - PROTOBUF_FIELD_OFFSET(ControlledAirspace, geometry_)>(
          reinterpret_cast<char*>(&geometry_),
          reinterpret_cast<char*>(&other->geometry_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlledAirspace::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ControlFacility::InitAsDefaultInstance() {
}
class ControlFacility::_Internal {
 public:
};

ControlFacility::ControlFacility(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world_proto.ControlFacility)
}
ControlFacility::ControlFacility(const ControlFacility& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  call_sign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_call_sign().empty()) {
    call_sign_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_call_sign(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:world_proto.ControlFacility)
}

void ControlFacility::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ControlFacility_world_2eproto.base);
  call_sign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

ControlFacility::~ControlFacility() {
  // @@protoc_insertion_point(destructor:world_proto.ControlFacility)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ControlFacility::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  call_sign_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ControlFacility::ArenaDtor(void* object) {
  ControlFacility* _this = reinterpret_cast< ControlFacility* >(object);
  (void)_this;
}
void ControlFacility::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlFacility::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ControlFacility& ControlFacility::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ControlFacility_world_2eproto.base);
  return *internal_default_instance();
}


void ControlFacility::Clear() {
// @@protoc_insertion_point(message_clear_start:world_proto.ControlFacility)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  call_sign_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlFacility::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string call_sign = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_call_sign();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "world_proto.ControlFacility.call_sign"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "world_proto.ControlFacility.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .world_proto.ControlFacility.Type type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::world_proto::ControlFacility_Type>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlFacility::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world_proto.ControlFacility)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string call_sign = 1;
  if (this->call_sign().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_call_sign().data(), static_cast<int>(this->_internal_call_sign().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "world_proto.ControlFacility.call_sign");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_call_sign(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "world_proto.ControlFacility.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .world_proto.ControlFacility.Type type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world_proto.ControlFacility)
  return target;
}

size_t ControlFacility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world_proto.ControlFacility)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string call_sign = 1;
  if (this->call_sign().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_call_sign());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .world_proto.ControlFacility.Type type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlFacility::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world_proto.ControlFacility)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlFacility* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControlFacility>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world_proto.ControlFacility)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world_proto.ControlFacility)
    MergeFrom(*source);
  }
}

void ControlFacility::MergeFrom(const ControlFacility& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world_proto.ControlFacility)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.call_sign().size() > 0) {
    _internal_set_call_sign(from._internal_call_sign());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void ControlFacility::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world_proto.ControlFacility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlFacility::CopyFrom(const ControlFacility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world_proto.ControlFacility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlFacility::IsInitialized() const {
  return true;
}

void ControlFacility::InternalSwap(ControlFacility* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  call_sign_.Swap(&other->call_sign_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlFacility::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientToServer_Connect::InitAsDefaultInstance() {
}
class ClientToServer_Connect::_Internal {
 public:
};

ClientToServer_Connect::ClientToServer_Connect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world_proto.ClientToServer.Connect)
}
ClientToServer_Connect::ClientToServer_Connect(const ClientToServer_Connect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_token(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:world_proto.ClientToServer.Connect)
}

void ClientToServer_Connect::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientToServer_Connect_world_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ClientToServer_Connect::~ClientToServer_Connect() {
  // @@protoc_insertion_point(destructor:world_proto.ClientToServer.Connect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientToServer_Connect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClientToServer_Connect::ArenaDtor(void* object) {
  ClientToServer_Connect* _this = reinterpret_cast< ClientToServer_Connect* >(object);
  (void)_this;
}
void ClientToServer_Connect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientToServer_Connect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientToServer_Connect& ClientToServer_Connect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientToServer_Connect_world_2eproto.base);
  return *internal_default_instance();
}


void ClientToServer_Connect::Clear() {
// @@protoc_insertion_point(message_clear_start:world_proto.ClientToServer.Connect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientToServer_Connect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "world_proto.ClientToServer.Connect.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientToServer_Connect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world_proto.ClientToServer.Connect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "world_proto.ClientToServer.Connect.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world_proto.ClientToServer.Connect)
  return target;
}

size_t ClientToServer_Connect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world_proto.ClientToServer.Connect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientToServer_Connect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world_proto.ClientToServer.Connect)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientToServer_Connect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientToServer_Connect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world_proto.ClientToServer.Connect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world_proto.ClientToServer.Connect)
    MergeFrom(*source);
  }
}

void ClientToServer_Connect::MergeFrom(const ClientToServer_Connect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world_proto.ClientToServer.Connect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
}

void ClientToServer_Connect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world_proto.ClientToServer.Connect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientToServer_Connect::CopyFrom(const ClientToServer_Connect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world_proto.ClientToServer.Connect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToServer_Connect::IsInitialized() const {
  return true;
}

void ClientToServer_Connect::InternalSwap(ClientToServer_Connect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientToServer_Connect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientToServer_QueryAirport::InitAsDefaultInstance() {
}
class ClientToServer_QueryAirport::_Internal {
 public:
};

ClientToServer_QueryAirport::ClientToServer_QueryAirport(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world_proto.ClientToServer.QueryAirport)
}
ClientToServer_QueryAirport::ClientToServer_QueryAirport(const ClientToServer_QueryAirport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  icao_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_icao_code().empty()) {
    icao_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_icao_code(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:world_proto.ClientToServer.QueryAirport)
}

void ClientToServer_QueryAirport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientToServer_QueryAirport_world_2eproto.base);
  icao_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ClientToServer_QueryAirport::~ClientToServer_QueryAirport() {
  // @@protoc_insertion_point(destructor:world_proto.ClientToServer.QueryAirport)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientToServer_QueryAirport::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  icao_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClientToServer_QueryAirport::ArenaDtor(void* object) {
  ClientToServer_QueryAirport* _this = reinterpret_cast< ClientToServer_QueryAirport* >(object);
  (void)_this;
}
void ClientToServer_QueryAirport::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientToServer_QueryAirport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientToServer_QueryAirport& ClientToServer_QueryAirport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientToServer_QueryAirport_world_2eproto.base);
  return *internal_default_instance();
}


void ClientToServer_QueryAirport::Clear() {
// @@protoc_insertion_point(message_clear_start:world_proto.ClientToServer.QueryAirport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  icao_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientToServer_QueryAirport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string icao_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_icao_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "world_proto.ClientToServer.QueryAirport.icao_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientToServer_QueryAirport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world_proto.ClientToServer.QueryAirport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string icao_code = 1;
  if (this->icao_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_icao_code().data(), static_cast<int>(this->_internal_icao_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "world_proto.ClientToServer.QueryAirport.icao_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_icao_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world_proto.ClientToServer.QueryAirport)
  return target;
}

size_t ClientToServer_QueryAirport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world_proto.ClientToServer.QueryAirport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string icao_code = 1;
  if (this->icao_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_icao_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientToServer_QueryAirport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world_proto.ClientToServer.QueryAirport)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientToServer_QueryAirport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientToServer_QueryAirport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world_proto.ClientToServer.QueryAirport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world_proto.ClientToServer.QueryAirport)
    MergeFrom(*source);
  }
}

void ClientToServer_QueryAirport::MergeFrom(const ClientToServer_QueryAirport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world_proto.ClientToServer.QueryAirport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.icao_code().size() > 0) {
    _internal_set_icao_code(from._internal_icao_code());
  }
}

void ClientToServer_QueryAirport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world_proto.ClientToServer.QueryAirport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientToServer_QueryAirport::CopyFrom(const ClientToServer_QueryAirport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world_proto.ClientToServer.QueryAirport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToServer_QueryAirport::IsInitialized() const {
  return true;
}

void ClientToServer_QueryAirport::InternalSwap(ClientToServer_QueryAirport* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  icao_code_.Swap(&other->icao_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientToServer_QueryAirport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientToServer_QueryTaxiPath::InitAsDefaultInstance() {
  ::world_proto::_ClientToServer_QueryTaxiPath_default_instance_._instance.get_mutable()->from_point_ = const_cast< ::world_proto::GeoPoint*>(
      ::world_proto::GeoPoint::internal_default_instance());
  ::world_proto::_ClientToServer_QueryTaxiPath_default_instance_._instance.get_mutable()->to_point_ = const_cast< ::world_proto::GeoPoint*>(
      ::world_proto::GeoPoint::internal_default_instance());
}
class ClientToServer_QueryTaxiPath::_Internal {
 public:
  static const ::world_proto::GeoPoint& from_point(const ClientToServer_QueryTaxiPath* msg);
  static const ::world_proto::GeoPoint& to_point(const ClientToServer_QueryTaxiPath* msg);
};

const ::world_proto::GeoPoint&
ClientToServer_QueryTaxiPath::_Internal::from_point(const ClientToServer_QueryTaxiPath* msg) {
  return *msg->from_point_;
}
const ::world_proto::GeoPoint&
ClientToServer_QueryTaxiPath::_Internal::to_point(const ClientToServer_QueryTaxiPath* msg) {
  return *msg->to_point_;
}
ClientToServer_QueryTaxiPath::ClientToServer_QueryTaxiPath(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world_proto.ClientToServer.QueryTaxiPath)
}
ClientToServer_QueryTaxiPath::ClientToServer_QueryTaxiPath(const ClientToServer_QueryTaxiPath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  airport_icao_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_airport_icao().empty()) {
    airport_icao_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_airport_icao(),
      GetArena());
  }
  aircraft_model_icao_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_aircraft_model_icao().empty()) {
    aircraft_model_icao_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_aircraft_model_icao(),
      GetArena());
  }
  if (from._internal_has_from_point()) {
    from_point_ = new ::world_proto::GeoPoint(*from.from_point_);
  } else {
    from_point_ = nullptr;
  }
  if (from._internal_has_to_point()) {
    to_point_ = new ::world_proto::GeoPoint(*from.to_point_);
  } else {
    to_point_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:world_proto.ClientToServer.QueryTaxiPath)
}

void ClientToServer_QueryTaxiPath::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientToServer_QueryTaxiPath_world_2eproto.base);
  airport_icao_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  aircraft_model_icao_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&from_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_point_) -
      reinterpret_cast<char*>(&from_point_)) + sizeof(to_point_));
}

ClientToServer_QueryTaxiPath::~ClientToServer_QueryTaxiPath() {
  // @@protoc_insertion_point(destructor:world_proto.ClientToServer.QueryTaxiPath)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientToServer_QueryTaxiPath::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  airport_icao_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  aircraft_model_icao_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete from_point_;
  if (this != internal_default_instance()) delete to_point_;
}

void ClientToServer_QueryTaxiPath::ArenaDtor(void* object) {
  ClientToServer_QueryTaxiPath* _this = reinterpret_cast< ClientToServer_QueryTaxiPath* >(object);
  (void)_this;
}
void ClientToServer_QueryTaxiPath::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientToServer_QueryTaxiPath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientToServer_QueryTaxiPath& ClientToServer_QueryTaxiPath::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientToServer_QueryTaxiPath_world_2eproto.base);
  return *internal_default_instance();
}


void ClientToServer_QueryTaxiPath::Clear() {
// @@protoc_insertion_point(message_clear_start:world_proto.ClientToServer.QueryTaxiPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  airport_icao_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  aircraft_model_icao_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && from_point_ != nullptr) {
    delete from_point_;
  }
  from_point_ = nullptr;
  if (GetArena() == nullptr && to_point_ != nullptr) {
    delete to_point_;
  }
  to_point_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientToServer_QueryTaxiPath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string airport_icao = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_airport_icao();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "world_proto.ClientToServer.QueryTaxiPath.airport_icao"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string aircraft_model_icao = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_aircraft_model_icao();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "world_proto.ClientToServer.QueryTaxiPath.aircraft_model_icao"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .world_proto.GeoPoint from_point = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_from_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .world_proto.GeoPoint to_point = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_to_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientToServer_QueryTaxiPath::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world_proto.ClientToServer.QueryTaxiPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string airport_icao = 1;
  if (this->airport_icao().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_airport_icao().data(), static_cast<int>(this->_internal_airport_icao().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "world_proto.ClientToServer.QueryTaxiPath.airport_icao");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_airport_icao(), target);
  }

  // string aircraft_model_icao = 2;
  if (this->aircraft_model_icao().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_aircraft_model_icao().data(), static_cast<int>(this->_internal_aircraft_model_icao().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "world_proto.ClientToServer.QueryTaxiPath.aircraft_model_icao");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_aircraft_model_icao(), target);
  }

  // .world_proto.GeoPoint from_point = 3;
  if (this->has_from_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::from_point(this), target, stream);
  }

  // .world_proto.GeoPoint to_point = 4;
  if (this->has_to_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::to_point(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world_proto.ClientToServer.QueryTaxiPath)
  return target;
}

size_t ClientToServer_QueryTaxiPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world_proto.ClientToServer.QueryTaxiPath)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string airport_icao = 1;
  if (this->airport_icao().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_airport_icao());
  }

  // string aircraft_model_icao = 2;
  if (this->aircraft_model_icao().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_aircraft_model_icao());
  }

  // .world_proto.GeoPoint from_point = 3;
  if (this->has_from_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *from_point_);
  }

  // .world_proto.GeoPoint to_point = 4;
  if (this->has_to_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *to_point_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientToServer_QueryTaxiPath::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world_proto.ClientToServer.QueryTaxiPath)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientToServer_QueryTaxiPath* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientToServer_QueryTaxiPath>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world_proto.ClientToServer.QueryTaxiPath)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world_proto.ClientToServer.QueryTaxiPath)
    MergeFrom(*source);
  }
}

void ClientToServer_QueryTaxiPath::MergeFrom(const ClientToServer_QueryTaxiPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world_proto.ClientToServer.QueryTaxiPath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.airport_icao().size() > 0) {
    _internal_set_airport_icao(from._internal_airport_icao());
  }
  if (from.aircraft_model_icao().size() > 0) {
    _internal_set_aircraft_model_icao(from._internal_aircraft_model_icao());
  }
  if (from.has_from_point()) {
    _internal_mutable_from_point()->::world_proto::GeoPoint::MergeFrom(from._internal_from_point());
  }
  if (from.has_to_point()) {
    _internal_mutable_to_point()->::world_proto::GeoPoint::MergeFrom(from._internal_to_point());
  }
}

void ClientToServer_QueryTaxiPath::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world_proto.ClientToServer.QueryTaxiPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientToServer_QueryTaxiPath::CopyFrom(const ClientToServer_QueryTaxiPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world_proto.ClientToServer.QueryTaxiPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToServer_QueryTaxiPath::IsInitialized() const {
  return true;
}

void ClientToServer_QueryTaxiPath::InternalSwap(ClientToServer_QueryTaxiPath* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  airport_icao_.Swap(&other->airport_icao_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  aircraft_model_icao_.Swap(&other->aircraft_model_icao_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientToServer_QueryTaxiPath, to_point_)
      + sizeof(ClientToServer_QueryTaxiPath::to_point_)
      - PROTOBUF_FIELD_OFFSET(ClientToServer_QueryTaxiPath, from_point_)>(
          reinterpret_cast<char*>(&from_point_),
          reinterpret_cast<char*>(&other->from_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientToServer_QueryTaxiPath::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientToServer_CreateAircraft::InitAsDefaultInstance() {
  ::world_proto::_ClientToServer_CreateAircraft_default_instance_._instance.get_mutable()->aircraft_ = const_cast< ::world_proto::Aircraft*>(
      ::world_proto::Aircraft::internal_default_instance());
}
class ClientToServer_CreateAircraft::_Internal {
 public:
  static const ::world_proto::Aircraft& aircraft(const ClientToServer_CreateAircraft* msg);
};

const ::world_proto::Aircraft&
ClientToServer_CreateAircraft::_Internal::aircraft(const ClientToServer_CreateAircraft* msg) {
  return *msg->aircraft_;
}
ClientToServer_CreateAircraft::ClientToServer_CreateAircraft(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world_proto.ClientToServer.CreateAircraft)
}
ClientToServer_CreateAircraft::ClientToServer_CreateAircraft(const ClientToServer_CreateAircraft& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_aircraft()) {
    aircraft_ = new ::world_proto::Aircraft(*from.aircraft_);
  } else {
    aircraft_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:world_proto.ClientToServer.CreateAircraft)
}

void ClientToServer_CreateAircraft::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientToServer_CreateAircraft_world_2eproto.base);
  aircraft_ = nullptr;
}

ClientToServer_CreateAircraft::~ClientToServer_CreateAircraft() {
  // @@protoc_insertion_point(destructor:world_proto.ClientToServer.CreateAircraft)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientToServer_CreateAircraft::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete aircraft_;
}

void ClientToServer_CreateAircraft::ArenaDtor(void* object) {
  ClientToServer_CreateAircraft* _this = reinterpret_cast< ClientToServer_CreateAircraft* >(object);
  (void)_this;
}
void ClientToServer_CreateAircraft::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientToServer_CreateAircraft::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientToServer_CreateAircraft& ClientToServer_CreateAircraft::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientToServer_CreateAircraft_world_2eproto.base);
  return *internal_default_instance();
}


void ClientToServer_CreateAircraft::Clear() {
// @@protoc_insertion_point(message_clear_start:world_proto.ClientToServer.CreateAircraft)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && aircraft_ != nullptr) {
    delete aircraft_;
  }
  aircraft_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientToServer_CreateAircraft::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .world_proto.Aircraft aircraft = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_aircraft(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientToServer_CreateAircraft::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world_proto.ClientToServer.CreateAircraft)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .world_proto.Aircraft aircraft = 1;
  if (this->has_aircraft()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::aircraft(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world_proto.ClientToServer.CreateAircraft)
  return target;
}

size_t ClientToServer_CreateAircraft::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world_proto.ClientToServer.CreateAircraft)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .world_proto.Aircraft aircraft = 1;
  if (this->has_aircraft()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *aircraft_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientToServer_CreateAircraft::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world_proto.ClientToServer.CreateAircraft)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientToServer_CreateAircraft* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientToServer_CreateAircraft>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world_proto.ClientToServer.CreateAircraft)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world_proto.ClientToServer.CreateAircraft)
    MergeFrom(*source);
  }
}

void ClientToServer_CreateAircraft::MergeFrom(const ClientToServer_CreateAircraft& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world_proto.ClientToServer.CreateAircraft)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_aircraft()) {
    _internal_mutable_aircraft()->::world_proto::Aircraft::MergeFrom(from._internal_aircraft());
  }
}

void ClientToServer_CreateAircraft::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world_proto.ClientToServer.CreateAircraft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientToServer_CreateAircraft::CopyFrom(const ClientToServer_CreateAircraft& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world_proto.ClientToServer.CreateAircraft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToServer_CreateAircraft::IsInitialized() const {
  return true;
}

void ClientToServer_CreateAircraft::InternalSwap(ClientToServer_CreateAircraft* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(aircraft_, other->aircraft_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientToServer_CreateAircraft::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientToServer_UpdateAircraftSituation::InitAsDefaultInstance() {
  ::world_proto::_ClientToServer_UpdateAircraftSituation_default_instance_._instance.get_mutable()->situation_ = const_cast< ::world_proto::Aircraft_Situation*>(
      ::world_proto::Aircraft_Situation::internal_default_instance());
}
class ClientToServer_UpdateAircraftSituation::_Internal {
 public:
  static const ::world_proto::Aircraft_Situation& situation(const ClientToServer_UpdateAircraftSituation* msg);
};

const ::world_proto::Aircraft_Situation&
ClientToServer_UpdateAircraftSituation::_Internal::situation(const ClientToServer_UpdateAircraftSituation* msg) {
  return *msg->situation_;
}
ClientToServer_UpdateAircraftSituation::ClientToServer_UpdateAircraftSituation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world_proto.ClientToServer.UpdateAircraftSituation)
}
ClientToServer_UpdateAircraftSituation::ClientToServer_UpdateAircraftSituation(const ClientToServer_UpdateAircraftSituation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_situation()) {
    situation_ = new ::world_proto::Aircraft_Situation(*from.situation_);
  } else {
    situation_ = nullptr;
  }
  aircraft_id_ = from.aircraft_id_;
  // @@protoc_insertion_point(copy_constructor:world_proto.ClientToServer.UpdateAircraftSituation)
}

void ClientToServer_UpdateAircraftSituation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientToServer_UpdateAircraftSituation_world_2eproto.base);
  ::memset(&situation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aircraft_id_) -
      reinterpret_cast<char*>(&situation_)) + sizeof(aircraft_id_));
}

ClientToServer_UpdateAircraftSituation::~ClientToServer_UpdateAircraftSituation() {
  // @@protoc_insertion_point(destructor:world_proto.ClientToServer.UpdateAircraftSituation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientToServer_UpdateAircraftSituation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete situation_;
}

void ClientToServer_UpdateAircraftSituation::ArenaDtor(void* object) {
  ClientToServer_UpdateAircraftSituation* _this = reinterpret_cast< ClientToServer_UpdateAircraftSituation* >(object);
  (void)_this;
}
void ClientToServer_UpdateAircraftSituation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientToServer_UpdateAircraftSituation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientToServer_UpdateAircraftSituation& ClientToServer_UpdateAircraftSituation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientToServer_UpdateAircraftSituation_world_2eproto.base);
  return *internal_default_instance();
}


void ClientToServer_UpdateAircraftSituation::Clear() {
// @@protoc_insertion_point(message_clear_start:world_proto.ClientToServer.UpdateAircraftSituation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && situation_ != nullptr) {
    delete situation_;
  }
  situation_ = nullptr;
  aircraft_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientToServer_UpdateAircraftSituation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 aircraft_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          aircraft_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .world_proto.Aircraft.Situation situation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_situation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientToServer_UpdateAircraftSituation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world_proto.ClientToServer.UpdateAircraftSituation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 aircraft_id = 1;
  if (this->aircraft_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_aircraft_id(), target);
  }

  // .world_proto.Aircraft.Situation situation = 2;
  if (this->has_situation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::situation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world_proto.ClientToServer.UpdateAircraftSituation)
  return target;
}

size_t ClientToServer_UpdateAircraftSituation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world_proto.ClientToServer.UpdateAircraftSituation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .world_proto.Aircraft.Situation situation = 2;
  if (this->has_situation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *situation_);
  }

  // int32 aircraft_id = 1;
  if (this->aircraft_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_aircraft_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientToServer_UpdateAircraftSituation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world_proto.ClientToServer.UpdateAircraftSituation)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientToServer_UpdateAircraftSituation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientToServer_UpdateAircraftSituation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world_proto.ClientToServer.UpdateAircraftSituation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world_proto.ClientToServer.UpdateAircraftSituation)
    MergeFrom(*source);
  }
}

void ClientToServer_UpdateAircraftSituation::MergeFrom(const ClientToServer_UpdateAircraftSituation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world_proto.ClientToServer.UpdateAircraftSituation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_situation()) {
    _internal_mutable_situation()->::world_proto::Aircraft_Situation::MergeFrom(from._internal_situation());
  }
  if (from.aircraft_id() != 0) {
    _internal_set_aircraft_id(from._internal_aircraft_id());
  }
}

void ClientToServer_UpdateAircraftSituation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world_proto.ClientToServer.UpdateAircraftSituation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientToServer_UpdateAircraftSituation::CopyFrom(const ClientToServer_UpdateAircraftSituation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world_proto.ClientToServer.UpdateAircraftSituation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToServer_UpdateAircraftSituation::IsInitialized() const {
  return true;
}

void ClientToServer_UpdateAircraftSituation::InternalSwap(ClientToServer_UpdateAircraftSituation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientToServer_UpdateAircraftSituation, aircraft_id_)
      + sizeof(ClientToServer_UpdateAircraftSituation::aircraft_id_)
      - PROTOBUF_FIELD_OFFSET(ClientToServer_UpdateAircraftSituation, situation_)>(
          reinterpret_cast<char*>(&situation_),
          reinterpret_cast<char*>(&other->situation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientToServer_UpdateAircraftSituation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientToServer_RemoveAircraft::InitAsDefaultInstance() {
}
class ClientToServer_RemoveAircraft::_Internal {
 public:
};

ClientToServer_RemoveAircraft::ClientToServer_RemoveAircraft(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world_proto.ClientToServer.RemoveAircraft)
}
ClientToServer_RemoveAircraft::ClientToServer_RemoveAircraft(const ClientToServer_RemoveAircraft& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  aircraft_id_ = from.aircraft_id_;
  // @@protoc_insertion_point(copy_constructor:world_proto.ClientToServer.RemoveAircraft)
}

void ClientToServer_RemoveAircraft::SharedCtor() {
  aircraft_id_ = 0;
}

ClientToServer_RemoveAircraft::~ClientToServer_RemoveAircraft() {
  // @@protoc_insertion_point(destructor:world_proto.ClientToServer.RemoveAircraft)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientToServer_RemoveAircraft::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ClientToServer_RemoveAircraft::ArenaDtor(void* object) {
  ClientToServer_RemoveAircraft* _this = reinterpret_cast< ClientToServer_RemoveAircraft* >(object);
  (void)_this;
}
void ClientToServer_RemoveAircraft::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientToServer_RemoveAircraft::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientToServer_RemoveAircraft& ClientToServer_RemoveAircraft::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientToServer_RemoveAircraft_world_2eproto.base);
  return *internal_default_instance();
}


void ClientToServer_RemoveAircraft::Clear() {
// @@protoc_insertion_point(message_clear_start:world_proto.ClientToServer.RemoveAircraft)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aircraft_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientToServer_RemoveAircraft::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 aircraft_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          aircraft_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientToServer_RemoveAircraft::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world_proto.ClientToServer.RemoveAircraft)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 aircraft_id = 1;
  if (this->aircraft_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_aircraft_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world_proto.ClientToServer.RemoveAircraft)
  return target;
}

size_t ClientToServer_RemoveAircraft::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world_proto.ClientToServer.RemoveAircraft)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 aircraft_id = 1;
  if (this->aircraft_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_aircraft_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientToServer_RemoveAircraft::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world_proto.ClientToServer.RemoveAircraft)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientToServer_RemoveAircraft* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientToServer_RemoveAircraft>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world_proto.ClientToServer.RemoveAircraft)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world_proto.ClientToServer.RemoveAircraft)
    MergeFrom(*source);
  }
}

void ClientToServer_RemoveAircraft::MergeFrom(const ClientToServer_RemoveAircraft& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world_proto.ClientToServer.RemoveAircraft)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.aircraft_id() != 0) {
    _internal_set_aircraft_id(from._internal_aircraft_id());
  }
}

void ClientToServer_RemoveAircraft::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world_proto.ClientToServer.RemoveAircraft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientToServer_RemoveAircraft::CopyFrom(const ClientToServer_RemoveAircraft& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world_proto.ClientToServer.RemoveAircraft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToServer_RemoveAircraft::IsInitialized() const {
  return true;
}

void ClientToServer_RemoveAircraft::InternalSwap(ClientToServer_RemoveAircraft* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(aircraft_id_, other->aircraft_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientToServer_RemoveAircraft::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientToServer::InitAsDefaultInstance() {
  ::world_proto::_ClientToServer_default_instance_._instance.get_mutable()->sent_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::world_proto::_ClientToServer_default_instance_.connect_ = const_cast< ::world_proto::ClientToServer_Connect*>(
      ::world_proto::ClientToServer_Connect::internal_default_instance());
  ::world_proto::_ClientToServer_default_instance_.query_airport_ = const_cast< ::world_proto::ClientToServer_QueryAirport*>(
      ::world_proto::ClientToServer_QueryAirport::internal_default_instance());
  ::world_proto::_ClientToServer_default_instance_.create_aircraft_ = const_cast< ::world_proto::ClientToServer_CreateAircraft*>(
      ::world_proto::ClientToServer_CreateAircraft::internal_default_instance());
  ::world_proto::_ClientToServer_default_instance_.update_aircraft_situation_ = const_cast< ::world_proto::ClientToServer_UpdateAircraftSituation*>(
      ::world_proto::ClientToServer_UpdateAircraftSituation::internal_default_instance());
  ::world_proto::_ClientToServer_default_instance_.remove_aircraft_ = const_cast< ::world_proto::ClientToServer_RemoveAircraft*>(
      ::world_proto::ClientToServer_RemoveAircraft::internal_default_instance());
  ::world_proto::_ClientToServer_default_instance_.query_taxi_path_ = const_cast< ::world_proto::ClientToServer_QueryTaxiPath*>(
      ::world_proto::ClientToServer_QueryTaxiPath::internal_default_instance());
}
class ClientToServer::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& sent_at(const ClientToServer* msg);
  static const ::world_proto::ClientToServer_Connect& connect(const ClientToServer* msg);
  static const ::world_proto::ClientToServer_QueryAirport& query_airport(const ClientToServer* msg);
  static const ::world_proto::ClientToServer_CreateAircraft& create_aircraft(const ClientToServer* msg);
  static const ::world_proto::ClientToServer_UpdateAircraftSituation& update_aircraft_situation(const ClientToServer* msg);
  static const ::world_proto::ClientToServer_RemoveAircraft& remove_aircraft(const ClientToServer* msg);
  static const ::world_proto::ClientToServer_QueryTaxiPath& query_taxi_path(const ClientToServer* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
ClientToServer::_Internal::sent_at(const ClientToServer* msg) {
  return *msg->sent_at_;
}
const ::world_proto::ClientToServer_Connect&
ClientToServer::_Internal::connect(const ClientToServer* msg) {
  return *msg->payload_.connect_;
}
const ::world_proto::ClientToServer_QueryAirport&
ClientToServer::_Internal::query_airport(const ClientToServer* msg) {
  return *msg->payload_.query_airport_;
}
const ::world_proto::ClientToServer_CreateAircraft&
ClientToServer::_Internal::create_aircraft(const ClientToServer* msg) {
  return *msg->payload_.create_aircraft_;
}
const ::world_proto::ClientToServer_UpdateAircraftSituation&
ClientToServer::_Internal::update_aircraft_situation(const ClientToServer* msg) {
  return *msg->payload_.update_aircraft_situation_;
}
const ::world_proto::ClientToServer_RemoveAircraft&
ClientToServer::_Internal::remove_aircraft(const ClientToServer* msg) {
  return *msg->payload_.remove_aircraft_;
}
const ::world_proto::ClientToServer_QueryTaxiPath&
ClientToServer::_Internal::query_taxi_path(const ClientToServer* msg) {
  return *msg->payload_.query_taxi_path_;
}
void ClientToServer::clear_sent_at() {
  if (GetArena() == nullptr && sent_at_ != nullptr) {
    delete sent_at_;
  }
  sent_at_ = nullptr;
}
void ClientToServer::set_allocated_connect(::world_proto::ClientToServer_Connect* connect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (connect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(connect);
    if (message_arena != submessage_arena) {
      connect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connect, submessage_arena);
    }
    set_has_connect();
    payload_.connect_ = connect;
  }
  // @@protoc_insertion_point(field_set_allocated:world_proto.ClientToServer.connect)
}
void ClientToServer::set_allocated_query_airport(::world_proto::ClientToServer_QueryAirport* query_airport) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (query_airport) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(query_airport);
    if (message_arena != submessage_arena) {
      query_airport = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query_airport, submessage_arena);
    }
    set_has_query_airport();
    payload_.query_airport_ = query_airport;
  }
  // @@protoc_insertion_point(field_set_allocated:world_proto.ClientToServer.query_airport)
}
void ClientToServer::set_allocated_create_aircraft(::world_proto::ClientToServer_CreateAircraft* create_aircraft) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (create_aircraft) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(create_aircraft);
    if (message_arena != submessage_arena) {
      create_aircraft = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_aircraft, submessage_arena);
    }
    set_has_create_aircraft();
    payload_.create_aircraft_ = create_aircraft;
  }
  // @@protoc_insertion_point(field_set_allocated:world_proto.ClientToServer.create_aircraft)
}
void ClientToServer::set_allocated_update_aircraft_situation(::world_proto::ClientToServer_UpdateAircraftSituation* update_aircraft_situation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (update_aircraft_situation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(update_aircraft_situation);
    if (message_arena != submessage_arena) {
      update_aircraft_situation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_aircraft_situation, submessage_arena);
    }
    set_has_update_aircraft_situation();
    payload_.update_aircraft_situation_ = update_aircraft_situation;
  }
  // @@protoc_insertion_point(field_set_allocated:world_proto.ClientToServer.update_aircraft_situation)
}
void ClientToServer::set_allocated_remove_aircraft(::world_proto::ClientToServer_RemoveAircraft* remove_aircraft) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (remove_aircraft) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(remove_aircraft);
    if (message_arena != submessage_arena) {
      remove_aircraft = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remove_aircraft, submessage_arena);
    }
    set_has_remove_aircraft();
    payload_.remove_aircraft_ = remove_aircraft;
  }
  // @@protoc_insertion_point(field_set_allocated:world_proto.ClientToServer.remove_aircraft)
}
void ClientToServer::set_allocated_query_taxi_path(::world_proto::ClientToServer_QueryTaxiPath* query_taxi_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (query_taxi_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(query_taxi_path);
    if (message_arena != submessage_arena) {
      query_taxi_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query_taxi_path, submessage_arena);
    }
    set_has_query_taxi_path();
    payload_.query_taxi_path_ = query_taxi_path;
  }
  // @@protoc_insertion_point(field_set_allocated:world_proto.ClientToServer.query_taxi_path)
}
ClientToServer::ClientToServer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world_proto.ClientToServer)
}
ClientToServer::ClientToServer(const ClientToServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sent_at()) {
    sent_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.sent_at_);
  } else {
    sent_at_ = nullptr;
  }
  id_ = from.id_;
  clear_has_payload();
  switch (from.payload_case()) {
    case kConnect: {
      _internal_mutable_connect()->::world_proto::ClientToServer_Connect::MergeFrom(from._internal_connect());
      break;
    }
    case kQueryAirport: {
      _internal_mutable_query_airport()->::world_proto::ClientToServer_QueryAirport::MergeFrom(from._internal_query_airport());
      break;
    }
    case kCreateAircraft: {
      _internal_mutable_create_aircraft()->::world_proto::ClientToServer_CreateAircraft::MergeFrom(from._internal_create_aircraft());
      break;
    }
    case kUpdateAircraftSituation: {
      _internal_mutable_update_aircraft_situation()->::world_proto::ClientToServer_UpdateAircraftSituation::MergeFrom(from._internal_update_aircraft_situation());
      break;
    }
    case kRemoveAircraft: {
      _internal_mutable_remove_aircraft()->::world_proto::ClientToServer_RemoveAircraft::MergeFrom(from._internal_remove_aircraft());
      break;
    }
    case kQueryTaxiPath: {
      _internal_mutable_query_taxi_path()->::world_proto::ClientToServer_QueryTaxiPath::MergeFrom(from._internal_query_taxi_path());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:world_proto.ClientToServer)
}

void ClientToServer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientToServer_world_2eproto.base);
  ::memset(&sent_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&sent_at_)) + sizeof(id_));
  clear_has_payload();
}

ClientToServer::~ClientToServer() {
  // @@protoc_insertion_point(destructor:world_proto.ClientToServer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientToServer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete sent_at_;
  if (has_payload()) {
    clear_payload();
  }
}

void ClientToServer::ArenaDtor(void* object) {
  ClientToServer* _this = reinterpret_cast< ClientToServer* >(object);
  (void)_this;
}
void ClientToServer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientToServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientToServer& ClientToServer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientToServer_world_2eproto.base);
  return *internal_default_instance();
}


void ClientToServer::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:world_proto.ClientToServer)
  switch (payload_case()) {
    case kConnect: {
      if (GetArena() == nullptr) {
        delete payload_.connect_;
      }
      break;
    }
    case kQueryAirport: {
      if (GetArena() == nullptr) {
        delete payload_.query_airport_;
      }
      break;
    }
    case kCreateAircraft: {
      if (GetArena() == nullptr) {
        delete payload_.create_aircraft_;
      }
      break;
    }
    case kUpdateAircraftSituation: {
      if (GetArena() == nullptr) {
        delete payload_.update_aircraft_situation_;
      }
      break;
    }
    case kRemoveAircraft: {
      if (GetArena() == nullptr) {
        delete payload_.remove_aircraft_;
      }
      break;
    }
    case kQueryTaxiPath: {
      if (GetArena() == nullptr) {
        delete payload_.query_taxi_path_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void ClientToServer::Clear() {
// @@protoc_insertion_point(message_clear_start:world_proto.ClientToServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && sent_at_ != nullptr) {
    delete sent_at_;
  }
  sent_at_ = nullptr;
  id_ = PROTOBUF_ULONGLONG(0);
  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientToServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp sent_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sent_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .world_proto.ClientToServer.Connect connect = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_connect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .world_proto.ClientToServer.QueryAirport query_airport = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_query_airport(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .world_proto.ClientToServer.CreateAircraft create_aircraft = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_aircraft(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .world_proto.ClientToServer.UpdateAircraftSituation update_aircraft_situation = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_aircraft_situation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .world_proto.ClientToServer.RemoveAircraft remove_aircraft = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_remove_aircraft(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .world_proto.ClientToServer.QueryTaxiPath query_taxi_path = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_query_taxi_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientToServer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world_proto.ClientToServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // .google.protobuf.Timestamp sent_at = 2;
  if (this->has_sent_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sent_at(this), target, stream);
  }

  // .world_proto.ClientToServer.Connect connect = 101;
  if (_internal_has_connect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        101, _Internal::connect(this), target, stream);
  }

  // .world_proto.ClientToServer.QueryAirport query_airport = 102;
  if (_internal_has_query_airport()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        102, _Internal::query_airport(this), target, stream);
  }

  // .world_proto.ClientToServer.CreateAircraft create_aircraft = 103;
  if (_internal_has_create_aircraft()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        103, _Internal::create_aircraft(this), target, stream);
  }

  // .world_proto.ClientToServer.UpdateAircraftSituation update_aircraft_situation = 104;
  if (_internal_has_update_aircraft_situation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        104, _Internal::update_aircraft_situation(this), target, stream);
  }

  // .world_proto.ClientToServer.RemoveAircraft remove_aircraft = 105;
  if (_internal_has_remove_aircraft()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        105, _Internal::remove_aircraft(this), target, stream);
  }

  // .world_proto.ClientToServer.QueryTaxiPath query_taxi_path = 106;
  if (_internal_has_query_taxi_path()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        106, _Internal::query_taxi_path(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world_proto.ClientToServer)
  return target;
}

size_t ClientToServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world_proto.ClientToServer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp sent_at = 2;
  if (this->has_sent_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sent_at_);
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  switch (payload_case()) {
    // .world_proto.ClientToServer.Connect connect = 101;
    case kConnect: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.connect_);
      break;
    }
    // .world_proto.ClientToServer.QueryAirport query_airport = 102;
    case kQueryAirport: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.query_airport_);
      break;
    }
    // .world_proto.ClientToServer.CreateAircraft create_aircraft = 103;
    case kCreateAircraft: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.create_aircraft_);
      break;
    }
    // .world_proto.ClientToServer.UpdateAircraftSituation update_aircraft_situation = 104;
    case kUpdateAircraftSituation: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.update_aircraft_situation_);
      break;
    }
    // .world_proto.ClientToServer.RemoveAircraft remove_aircraft = 105;
    case kRemoveAircraft: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.remove_aircraft_);
      break;
    }
    // .world_proto.ClientToServer.QueryTaxiPath query_taxi_path = 106;
    case kQueryTaxiPath: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.query_taxi_path_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientToServer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world_proto.ClientToServer)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientToServer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientToServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world_proto.ClientToServer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world_proto.ClientToServer)
    MergeFrom(*source);
  }
}

void ClientToServer::MergeFrom(const ClientToServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world_proto.ClientToServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sent_at()) {
    _internal_mutable_sent_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_sent_at());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  switch (from.payload_case()) {
    case kConnect: {
      _internal_mutable_connect()->::world_proto::ClientToServer_Connect::MergeFrom(from._internal_connect());
      break;
    }
    case kQueryAirport: {
      _internal_mutable_query_airport()->::world_proto::ClientToServer_QueryAirport::MergeFrom(from._internal_query_airport());
      break;
    }
    case kCreateAircraft: {
      _internal_mutable_create_aircraft()->::world_proto::ClientToServer_CreateAircraft::MergeFrom(from._internal_create_aircraft());
      break;
    }
    case kUpdateAircraftSituation: {
      _internal_mutable_update_aircraft_situation()->::world_proto::ClientToServer_UpdateAircraftSituation::MergeFrom(from._internal_update_aircraft_situation());
      break;
    }
    case kRemoveAircraft: {
      _internal_mutable_remove_aircraft()->::world_proto::ClientToServer_RemoveAircraft::MergeFrom(from._internal_remove_aircraft());
      break;
    }
    case kQueryTaxiPath: {
      _internal_mutable_query_taxi_path()->::world_proto::ClientToServer_QueryTaxiPath::MergeFrom(from._internal_query_taxi_path());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void ClientToServer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world_proto.ClientToServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientToServer::CopyFrom(const ClientToServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world_proto.ClientToServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToServer::IsInitialized() const {
  return true;
}

void ClientToServer::InternalSwap(ClientToServer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientToServer, id_)
      + sizeof(ClientToServer::id_)
      - PROTOBUF_FIELD_OFFSET(ClientToServer, sent_at_)>(
          reinterpret_cast<char*>(&sent_at_),
          reinterpret_cast<char*>(&other->sent_at_));
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientToServer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerToClient_FaultDeclined::InitAsDefaultInstance() {
}
class ServerToClient_FaultDeclined::_Internal {
 public:
};

ServerToClient_FaultDeclined::ServerToClient_FaultDeclined(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world_proto.ServerToClient.FaultDeclined)
}
ServerToClient_FaultDeclined::ServerToClient_FaultDeclined(const ServerToClient_FaultDeclined& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:world_proto.ServerToClient.FaultDeclined)
}

void ServerToClient_FaultDeclined::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerToClient_FaultDeclined_world_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ServerToClient_FaultDeclined::~ServerToClient_FaultDeclined() {
  // @@protoc_insertion_point(destructor:world_proto.ServerToClient.FaultDeclined)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerToClient_FaultDeclined::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerToClient_FaultDeclined::ArenaDtor(void* object) {
  ServerToClient_FaultDeclined* _this = reinterpret_cast< ServerToClient_FaultDeclined* >(object);
  (void)_this;
}
void ServerToClient_FaultDeclined::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerToClient_FaultDeclined::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerToClient_FaultDeclined& ServerToClient_FaultDeclined::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerToClient_FaultDeclined_world_2eproto.base);
  return *internal_default_instance();
}


void ServerToClient_FaultDeclined::Clear() {
// @@protoc_insertion_point(message_clear_start:world_proto.ServerToClient.FaultDeclined)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerToClient_FaultDeclined::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "world_proto.ServerToClient.FaultDeclined.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerToClient_FaultDeclined::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world_proto.ServerToClient.FaultDeclined)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "world_proto.ServerToClient.FaultDeclined.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world_proto.ServerToClient.FaultDeclined)
  return target;
}

size_t ServerToClient_FaultDeclined::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world_proto.ServerToClient.FaultDeclined)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerToClient_FaultDeclined::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world_proto.ServerToClient.FaultDeclined)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerToClient_FaultDeclined* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerToClient_FaultDeclined>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world_proto.ServerToClient.FaultDeclined)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world_proto.ServerToClient.FaultDeclined)
    MergeFrom(*source);
  }
}

void ServerToClient_FaultDeclined::MergeFrom(const ServerToClient_FaultDeclined& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world_proto.ServerToClient.FaultDeclined)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
}

void ServerToClient_FaultDeclined::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world_proto.ServerToClient.FaultDeclined)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerToClient_FaultDeclined::CopyFrom(const ServerToClient_FaultDeclined& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world_proto.ServerToClient.FaultDeclined)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerToClient_FaultDeclined::IsInitialized() const {
  return true;
}

void ServerToClient_FaultDeclined::InternalSwap(ServerToClient_FaultDeclined* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerToClient_FaultDeclined::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerToClient_FaultNotFound::InitAsDefaultInstance() {
}
class ServerToClient_FaultNotFound::_Internal {
 public:
};

ServerToClient_FaultNotFound::ServerToClient_FaultNotFound(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world_proto.ServerToClient.FaultNotFound)
}
ServerToClient_FaultNotFound::ServerToClient_FaultNotFound(const ServerToClient_FaultNotFound& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:world_proto.ServerToClient.FaultNotFound)
}

void ServerToClient_FaultNotFound::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerToClient_FaultNotFound_world_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ServerToClient_FaultNotFound::~ServerToClient_FaultNotFound() {
  // @@protoc_insertion_point(destructor:world_proto.ServerToClient.FaultNotFound)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerToClient_FaultNotFound::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerToClient_FaultNotFound::ArenaDtor(void* object) {
  ServerToClient_FaultNotFound* _this = reinterpret_cast< ServerToClient_FaultNotFound* >(object);
  (void)_this;
}
void ServerToClient_FaultNotFound::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerToClient_FaultNotFound::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerToClient_FaultNotFound& ServerToClient_FaultNotFound::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerToClient_FaultNotFound_world_2eproto.base);
  return *internal_default_instance();
}


void ServerToClient_FaultNotFound::Clear() {
// @@protoc_insertion_point(message_clear_start:world_proto.ServerToClient.FaultNotFound)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerToClient_FaultNotFound::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "world_proto.ServerToClient.FaultNotFound.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerToClient_FaultNotFound::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world_proto.ServerToClient.FaultNotFound)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "world_proto.ServerToClient.FaultNotFound.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world_proto.ServerToClient.FaultNotFound)
  return target;
}

size_t ServerToClient_FaultNotFound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world_proto.ServerToClient.FaultNotFound)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerToClient_FaultNotFound::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world_proto.ServerToClient.FaultNotFound)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerToClient_FaultNotFound* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerToClient_FaultNotFound>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world_proto.ServerToClient.FaultNotFound)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world_proto.ServerToClient.FaultNotFound)
    MergeFrom(*source);
  }
}

void ServerToClient_FaultNotFound::MergeFrom(const ServerToClient_FaultNotFound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world_proto.ServerToClient.FaultNotFound)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
}

void ServerToClient_FaultNotFound::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world_proto.ServerToClient.FaultNotFound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerToClient_FaultNotFound::CopyFrom(const ServerToClient_FaultNotFound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world_proto.ServerToClient.FaultNotFound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerToClient_FaultNotFound::IsInitialized() const {
  return true;
}

void ServerToClient_FaultNotFound::InternalSwap(ServerToClient_FaultNotFound* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerToClient_FaultNotFound::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerToClient_ReplyConnect::InitAsDefaultInstance() {
}
class ServerToClient_ReplyConnect::_Internal {
 public:
};

ServerToClient_ReplyConnect::ServerToClient_ReplyConnect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world_proto.ServerToClient.ReplyConnect)
}
ServerToClient_ReplyConnect::ServerToClient_ReplyConnect(const ServerToClient_ReplyConnect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  server_banner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_server_banner().empty()) {
    server_banner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_server_banner(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:world_proto.ServerToClient.ReplyConnect)
}

void ServerToClient_ReplyConnect::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerToClient_ReplyConnect_world_2eproto.base);
  server_banner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ServerToClient_ReplyConnect::~ServerToClient_ReplyConnect() {
  // @@protoc_insertion_point(destructor:world_proto.ServerToClient.ReplyConnect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerToClient_ReplyConnect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  server_banner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerToClient_ReplyConnect::ArenaDtor(void* object) {
  ServerToClient_ReplyConnect* _this = reinterpret_cast< ServerToClient_ReplyConnect* >(object);
  (void)_this;
}
void ServerToClient_ReplyConnect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerToClient_ReplyConnect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerToClient_ReplyConnect& ServerToClient_ReplyConnect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerToClient_ReplyConnect_world_2eproto.base);
  return *internal_default_instance();
}


void ServerToClient_ReplyConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:world_proto.ServerToClient.ReplyConnect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_banner_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerToClient_ReplyConnect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string server_banner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_server_banner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "world_proto.ServerToClient.ReplyConnect.server_banner"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerToClient_ReplyConnect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world_proto.ServerToClient.ReplyConnect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string server_banner = 2;
  if (this->server_banner().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_server_banner().data(), static_cast<int>(this->_internal_server_banner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "world_proto.ServerToClient.ReplyConnect.server_banner");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_server_banner(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world_proto.ServerToClient.ReplyConnect)
  return target;
}

size_t ServerToClient_ReplyConnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world_proto.ServerToClient.ReplyConnect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string server_banner = 2;
  if (this->server_banner().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_server_banner());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerToClient_ReplyConnect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world_proto.ServerToClient.ReplyConnect)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerToClient_ReplyConnect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerToClient_ReplyConnect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world_proto.ServerToClient.ReplyConnect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world_proto.ServerToClient.ReplyConnect)
    MergeFrom(*source);
  }
}

void ServerToClient_ReplyConnect::MergeFrom(const ServerToClient_ReplyConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world_proto.ServerToClient.ReplyConnect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_banner().size() > 0) {
    _internal_set_server_banner(from._internal_server_banner());
  }
}

void ServerToClient_ReplyConnect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world_proto.ServerToClient.ReplyConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerToClient_ReplyConnect::CopyFrom(const ServerToClient_ReplyConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world_proto.ServerToClient.ReplyConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerToClient_ReplyConnect::IsInitialized() const {
  return true;
}

void ServerToClient_ReplyConnect::InternalSwap(ServerToClient_ReplyConnect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  server_banner_.Swap(&other->server_banner_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerToClient_ReplyConnect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerToClient_ReplyCreateAircraft::InitAsDefaultInstance() {
}
class ServerToClient_ReplyCreateAircraft::_Internal {
 public:
};

ServerToClient_ReplyCreateAircraft::ServerToClient_ReplyCreateAircraft(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world_proto.ServerToClient.ReplyCreateAircraft)
}
ServerToClient_ReplyCreateAircraft::ServerToClient_ReplyCreateAircraft(const ServerToClient_ReplyCreateAircraft& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  created_aircraft_id_ = from.created_aircraft_id_;
  // @@protoc_insertion_point(copy_constructor:world_proto.ServerToClient.ReplyCreateAircraft)
}

void ServerToClient_ReplyCreateAircraft::SharedCtor() {
  created_aircraft_id_ = 0;
}

ServerToClient_ReplyCreateAircraft::~ServerToClient_ReplyCreateAircraft() {
  // @@protoc_insertion_point(destructor:world_proto.ServerToClient.ReplyCreateAircraft)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerToClient_ReplyCreateAircraft::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ServerToClient_ReplyCreateAircraft::ArenaDtor(void* object) {
  ServerToClient_ReplyCreateAircraft* _this = reinterpret_cast< ServerToClient_ReplyCreateAircraft* >(object);
  (void)_this;
}
void ServerToClient_ReplyCreateAircraft::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerToClient_ReplyCreateAircraft::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerToClient_ReplyCreateAircraft& ServerToClient_ReplyCreateAircraft::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerToClient_ReplyCreateAircraft_world_2eproto.base);
  return *internal_default_instance();
}


void ServerToClient_ReplyCreateAircraft::Clear() {
// @@protoc_insertion_point(message_clear_start:world_proto.ServerToClient.ReplyCreateAircraft)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  created_aircraft_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerToClient_ReplyCreateAircraft::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 created_aircraft_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          created_aircraft_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerToClient_ReplyCreateAircraft::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world_proto.ServerToClient.ReplyCreateAircraft)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 created_aircraft_id = 1;
  if (this->created_aircraft_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_created_aircraft_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world_proto.ServerToClient.ReplyCreateAircraft)
  return target;
}

size_t ServerToClient_ReplyCreateAircraft::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world_proto.ServerToClient.ReplyCreateAircraft)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 created_aircraft_id = 1;
  if (this->created_aircraft_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_created_aircraft_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerToClient_ReplyCreateAircraft::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world_proto.ServerToClient.ReplyCreateAircraft)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerToClient_ReplyCreateAircraft* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerToClient_ReplyCreateAircraft>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world_proto.ServerToClient.ReplyCreateAircraft)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world_proto.ServerToClient.ReplyCreateAircraft)
    MergeFrom(*source);
  }
}

void ServerToClient_ReplyCreateAircraft::MergeFrom(const ServerToClient_ReplyCreateAircraft& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world_proto.ServerToClient.ReplyCreateAircraft)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.created_aircraft_id() != 0) {
    _internal_set_created_aircraft_id(from._internal_created_aircraft_id());
  }
}

void ServerToClient_ReplyCreateAircraft::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world_proto.ServerToClient.ReplyCreateAircraft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerToClient_ReplyCreateAircraft::CopyFrom(const ServerToClient_ReplyCreateAircraft& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world_proto.ServerToClient.ReplyCreateAircraft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerToClient_ReplyCreateAircraft::IsInitialized() const {
  return true;
}

void ServerToClient_ReplyCreateAircraft::InternalSwap(ServerToClient_ReplyCreateAircraft* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(created_aircraft_id_, other->created_aircraft_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerToClient_ReplyCreateAircraft::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerToClient_ReplyQueryAirport::InitAsDefaultInstance() {
  ::world_proto::_ServerToClient_ReplyQueryAirport_default_instance_._instance.get_mutable()->airport_ = const_cast< ::world_proto::Airport*>(
      ::world_proto::Airport::internal_default_instance());
}
class ServerToClient_ReplyQueryAirport::_Internal {
 public:
  static const ::world_proto::Airport& airport(const ServerToClient_ReplyQueryAirport* msg);
};

const ::world_proto::Airport&
ServerToClient_ReplyQueryAirport::_Internal::airport(const ServerToClient_ReplyQueryAirport* msg) {
  return *msg->airport_;
}
ServerToClient_ReplyQueryAirport::ServerToClient_ReplyQueryAirport(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world_proto.ServerToClient.ReplyQueryAirport)
}
ServerToClient_ReplyQueryAirport::ServerToClient_ReplyQueryAirport(const ServerToClient_ReplyQueryAirport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_airport()) {
    airport_ = new ::world_proto::Airport(*from.airport_);
  } else {
    airport_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:world_proto.ServerToClient.ReplyQueryAirport)
}

void ServerToClient_ReplyQueryAirport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerToClient_ReplyQueryAirport_world_2eproto.base);
  airport_ = nullptr;
}

ServerToClient_ReplyQueryAirport::~ServerToClient_ReplyQueryAirport() {
  // @@protoc_insertion_point(destructor:world_proto.ServerToClient.ReplyQueryAirport)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerToClient_ReplyQueryAirport::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete airport_;
}

void ServerToClient_ReplyQueryAirport::ArenaDtor(void* object) {
  ServerToClient_ReplyQueryAirport* _this = reinterpret_cast< ServerToClient_ReplyQueryAirport* >(object);
  (void)_this;
}
void ServerToClient_ReplyQueryAirport::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerToClient_ReplyQueryAirport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerToClient_ReplyQueryAirport& ServerToClient_ReplyQueryAirport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerToClient_ReplyQueryAirport_world_2eproto.base);
  return *internal_default_instance();
}


void ServerToClient_ReplyQueryAirport::Clear() {
// @@protoc_insertion_point(message_clear_start:world_proto.ServerToClient.ReplyQueryAirport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && airport_ != nullptr) {
    delete airport_;
  }
  airport_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerToClient_ReplyQueryAirport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .world_proto.Airport airport = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_airport(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerToClient_ReplyQueryAirport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world_proto.ServerToClient.ReplyQueryAirport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .world_proto.Airport airport = 1;
  if (this->has_airport()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::airport(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world_proto.ServerToClient.ReplyQueryAirport)
  return target;
}

size_t ServerToClient_ReplyQueryAirport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world_proto.ServerToClient.ReplyQueryAirport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .world_proto.Airport airport = 1;
  if (this->has_airport()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *airport_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerToClient_ReplyQueryAirport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world_proto.ServerToClient.ReplyQueryAirport)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerToClient_ReplyQueryAirport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerToClient_ReplyQueryAirport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world_proto.ServerToClient.ReplyQueryAirport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world_proto.ServerToClient.ReplyQueryAirport)
    MergeFrom(*source);
  }
}

void ServerToClient_ReplyQueryAirport::MergeFrom(const ServerToClient_ReplyQueryAirport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world_proto.ServerToClient.ReplyQueryAirport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_airport()) {
    _internal_mutable_airport()->::world_proto::Airport::MergeFrom(from._internal_airport());
  }
}

void ServerToClient_ReplyQueryAirport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world_proto.ServerToClient.ReplyQueryAirport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerToClient_ReplyQueryAirport::CopyFrom(const ServerToClient_ReplyQueryAirport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world_proto.ServerToClient.ReplyQueryAirport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerToClient_ReplyQueryAirport::IsInitialized() const {
  return true;
}

void ServerToClient_ReplyQueryAirport::InternalSwap(ServerToClient_ReplyQueryAirport* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(airport_, other->airport_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerToClient_ReplyQueryAirport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerToClient_ReplyQueryTaxiPath::InitAsDefaultInstance() {
  ::world_proto::_ServerToClient_ReplyQueryTaxiPath_default_instance_._instance.get_mutable()->taxi_path_ = const_cast< ::world_proto::TaxiPath*>(
      ::world_proto::TaxiPath::internal_default_instance());
}
class ServerToClient_ReplyQueryTaxiPath::_Internal {
 public:
  static const ::world_proto::TaxiPath& taxi_path(const ServerToClient_ReplyQueryTaxiPath* msg);
};

const ::world_proto::TaxiPath&
ServerToClient_ReplyQueryTaxiPath::_Internal::taxi_path(const ServerToClient_ReplyQueryTaxiPath* msg) {
  return *msg->taxi_path_;
}
ServerToClient_ReplyQueryTaxiPath::ServerToClient_ReplyQueryTaxiPath(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world_proto.ServerToClient.ReplyQueryTaxiPath)
}
ServerToClient_ReplyQueryTaxiPath::ServerToClient_ReplyQueryTaxiPath(const ServerToClient_ReplyQueryTaxiPath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_taxi_path()) {
    taxi_path_ = new ::world_proto::TaxiPath(*from.taxi_path_);
  } else {
    taxi_path_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:world_proto.ServerToClient.ReplyQueryTaxiPath)
}

void ServerToClient_ReplyQueryTaxiPath::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerToClient_ReplyQueryTaxiPath_world_2eproto.base);
  ::memset(&taxi_path_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&taxi_path_)) + sizeof(success_));
}

ServerToClient_ReplyQueryTaxiPath::~ServerToClient_ReplyQueryTaxiPath() {
  // @@protoc_insertion_point(destructor:world_proto.ServerToClient.ReplyQueryTaxiPath)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerToClient_ReplyQueryTaxiPath::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete taxi_path_;
}

void ServerToClient_ReplyQueryTaxiPath::ArenaDtor(void* object) {
  ServerToClient_ReplyQueryTaxiPath* _this = reinterpret_cast< ServerToClient_ReplyQueryTaxiPath* >(object);
  (void)_this;
}
void ServerToClient_ReplyQueryTaxiPath::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerToClient_ReplyQueryTaxiPath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerToClient_ReplyQueryTaxiPath& ServerToClient_ReplyQueryTaxiPath::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerToClient_ReplyQueryTaxiPath_world_2eproto.base);
  return *internal_default_instance();
}


void ServerToClient_ReplyQueryTaxiPath::Clear() {
// @@protoc_insertion_point(message_clear_start:world_proto.ServerToClient.ReplyQueryTaxiPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && taxi_path_ != nullptr) {
    delete taxi_path_;
  }
  taxi_path_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerToClient_ReplyQueryTaxiPath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .world_proto.TaxiPath taxi_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_taxi_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerToClient_ReplyQueryTaxiPath::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world_proto.ServerToClient.ReplyQueryTaxiPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // .world_proto.TaxiPath taxi_path = 2;
  if (this->has_taxi_path()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::taxi_path(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world_proto.ServerToClient.ReplyQueryTaxiPath)
  return target;
}

size_t ServerToClient_ReplyQueryTaxiPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world_proto.ServerToClient.ReplyQueryTaxiPath)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .world_proto.TaxiPath taxi_path = 2;
  if (this->has_taxi_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *taxi_path_);
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerToClient_ReplyQueryTaxiPath::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world_proto.ServerToClient.ReplyQueryTaxiPath)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerToClient_ReplyQueryTaxiPath* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerToClient_ReplyQueryTaxiPath>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world_proto.ServerToClient.ReplyQueryTaxiPath)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world_proto.ServerToClient.ReplyQueryTaxiPath)
    MergeFrom(*source);
  }
}

void ServerToClient_ReplyQueryTaxiPath::MergeFrom(const ServerToClient_ReplyQueryTaxiPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world_proto.ServerToClient.ReplyQueryTaxiPath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_taxi_path()) {
    _internal_mutable_taxi_path()->::world_proto::TaxiPath::MergeFrom(from._internal_taxi_path());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void ServerToClient_ReplyQueryTaxiPath::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world_proto.ServerToClient.ReplyQueryTaxiPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerToClient_ReplyQueryTaxiPath::CopyFrom(const ServerToClient_ReplyQueryTaxiPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world_proto.ServerToClient.ReplyQueryTaxiPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerToClient_ReplyQueryTaxiPath::IsInitialized() const {
  return true;
}

void ServerToClient_ReplyQueryTaxiPath::InternalSwap(ServerToClient_ReplyQueryTaxiPath* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerToClient_ReplyQueryTaxiPath, success_)
      + sizeof(ServerToClient_ReplyQueryTaxiPath::success_)
      - PROTOBUF_FIELD_OFFSET(ServerToClient_ReplyQueryTaxiPath, taxi_path_)>(
          reinterpret_cast<char*>(&taxi_path_),
          reinterpret_cast<char*>(&other->taxi_path_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerToClient_ReplyQueryTaxiPath::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerToClient_NotifyAircraftCreated::InitAsDefaultInstance() {
  ::world_proto::_ServerToClient_NotifyAircraftCreated_default_instance_._instance.get_mutable()->aircraft_ = const_cast< ::world_proto::Aircraft*>(
      ::world_proto::Aircraft::internal_default_instance());
}
class ServerToClient_NotifyAircraftCreated::_Internal {
 public:
  static const ::world_proto::Aircraft& aircraft(const ServerToClient_NotifyAircraftCreated* msg);
};

const ::world_proto::Aircraft&
ServerToClient_NotifyAircraftCreated::_Internal::aircraft(const ServerToClient_NotifyAircraftCreated* msg) {
  return *msg->aircraft_;
}
ServerToClient_NotifyAircraftCreated::ServerToClient_NotifyAircraftCreated(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world_proto.ServerToClient.NotifyAircraftCreated)
}
ServerToClient_NotifyAircraftCreated::ServerToClient_NotifyAircraftCreated(const ServerToClient_NotifyAircraftCreated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_aircraft()) {
    aircraft_ = new ::world_proto::Aircraft(*from.aircraft_);
  } else {
    aircraft_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:world_proto.ServerToClient.NotifyAircraftCreated)
}

void ServerToClient_NotifyAircraftCreated::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerToClient_NotifyAircraftCreated_world_2eproto.base);
  aircraft_ = nullptr;
}

ServerToClient_NotifyAircraftCreated::~ServerToClient_NotifyAircraftCreated() {
  // @@protoc_insertion_point(destructor:world_proto.ServerToClient.NotifyAircraftCreated)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerToClient_NotifyAircraftCreated::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete aircraft_;
}

void ServerToClient_NotifyAircraftCreated::ArenaDtor(void* object) {
  ServerToClient_NotifyAircraftCreated* _this = reinterpret_cast< ServerToClient_NotifyAircraftCreated* >(object);
  (void)_this;
}
void ServerToClient_NotifyAircraftCreated::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerToClient_NotifyAircraftCreated::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerToClient_NotifyAircraftCreated& ServerToClient_NotifyAircraftCreated::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerToClient_NotifyAircraftCreated_world_2eproto.base);
  return *internal_default_instance();
}


void ServerToClient_NotifyAircraftCreated::Clear() {
// @@protoc_insertion_point(message_clear_start:world_proto.ServerToClient.NotifyAircraftCreated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && aircraft_ != nullptr) {
    delete aircraft_;
  }
  aircraft_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerToClient_NotifyAircraftCreated::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .world_proto.Aircraft aircraft = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_aircraft(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerToClient_NotifyAircraftCreated::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world_proto.ServerToClient.NotifyAircraftCreated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .world_proto.Aircraft aircraft = 1;
  if (this->has_aircraft()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::aircraft(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world_proto.ServerToClient.NotifyAircraftCreated)
  return target;
}

size_t ServerToClient_NotifyAircraftCreated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world_proto.ServerToClient.NotifyAircraftCreated)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .world_proto.Aircraft aircraft = 1;
  if (this->has_aircraft()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *aircraft_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerToClient_NotifyAircraftCreated::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world_proto.ServerToClient.NotifyAircraftCreated)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerToClient_NotifyAircraftCreated* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerToClient_NotifyAircraftCreated>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world_proto.ServerToClient.NotifyAircraftCreated)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world_proto.ServerToClient.NotifyAircraftCreated)
    MergeFrom(*source);
  }
}

void ServerToClient_NotifyAircraftCreated::MergeFrom(const ServerToClient_NotifyAircraftCreated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world_proto.ServerToClient.NotifyAircraftCreated)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_aircraft()) {
    _internal_mutable_aircraft()->::world_proto::Aircraft::MergeFrom(from._internal_aircraft());
  }
}

void ServerToClient_NotifyAircraftCreated::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world_proto.ServerToClient.NotifyAircraftCreated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerToClient_NotifyAircraftCreated::CopyFrom(const ServerToClient_NotifyAircraftCreated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world_proto.ServerToClient.NotifyAircraftCreated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerToClient_NotifyAircraftCreated::IsInitialized() const {
  return true;
}

void ServerToClient_NotifyAircraftCreated::InternalSwap(ServerToClient_NotifyAircraftCreated* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(aircraft_, other->aircraft_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerToClient_NotifyAircraftCreated::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerToClient_NotifyAircraftSituationUpdated::InitAsDefaultInstance() {
  ::world_proto::_ServerToClient_NotifyAircraftSituationUpdated_default_instance_._instance.get_mutable()->situation_ = const_cast< ::world_proto::Aircraft_Situation*>(
      ::world_proto::Aircraft_Situation::internal_default_instance());
}
class ServerToClient_NotifyAircraftSituationUpdated::_Internal {
 public:
  static const ::world_proto::Aircraft_Situation& situation(const ServerToClient_NotifyAircraftSituationUpdated* msg);
};

const ::world_proto::Aircraft_Situation&
ServerToClient_NotifyAircraftSituationUpdated::_Internal::situation(const ServerToClient_NotifyAircraftSituationUpdated* msg) {
  return *msg->situation_;
}
ServerToClient_NotifyAircraftSituationUpdated::ServerToClient_NotifyAircraftSituationUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world_proto.ServerToClient.NotifyAircraftSituationUpdated)
}
ServerToClient_NotifyAircraftSituationUpdated::ServerToClient_NotifyAircraftSituationUpdated(const ServerToClient_NotifyAircraftSituationUpdated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_situation()) {
    situation_ = new ::world_proto::Aircraft_Situation(*from.situation_);
  } else {
    situation_ = nullptr;
  }
  airctaft_id_ = from.airctaft_id_;
  // @@protoc_insertion_point(copy_constructor:world_proto.ServerToClient.NotifyAircraftSituationUpdated)
}

void ServerToClient_NotifyAircraftSituationUpdated::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerToClient_NotifyAircraftSituationUpdated_world_2eproto.base);
  ::memset(&situation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&airctaft_id_) -
      reinterpret_cast<char*>(&situation_)) + sizeof(airctaft_id_));
}

ServerToClient_NotifyAircraftSituationUpdated::~ServerToClient_NotifyAircraftSituationUpdated() {
  // @@protoc_insertion_point(destructor:world_proto.ServerToClient.NotifyAircraftSituationUpdated)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerToClient_NotifyAircraftSituationUpdated::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete situation_;
}

void ServerToClient_NotifyAircraftSituationUpdated::ArenaDtor(void* object) {
  ServerToClient_NotifyAircraftSituationUpdated* _this = reinterpret_cast< ServerToClient_NotifyAircraftSituationUpdated* >(object);
  (void)_this;
}
void ServerToClient_NotifyAircraftSituationUpdated::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerToClient_NotifyAircraftSituationUpdated::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerToClient_NotifyAircraftSituationUpdated& ServerToClient_NotifyAircraftSituationUpdated::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerToClient_NotifyAircraftSituationUpdated_world_2eproto.base);
  return *internal_default_instance();
}


void ServerToClient_NotifyAircraftSituationUpdated::Clear() {
// @@protoc_insertion_point(message_clear_start:world_proto.ServerToClient.NotifyAircraftSituationUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && situation_ != nullptr) {
    delete situation_;
  }
  situation_ = nullptr;
  airctaft_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerToClient_NotifyAircraftSituationUpdated::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 airctaft_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          airctaft_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .world_proto.Aircraft.Situation situation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_situation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerToClient_NotifyAircraftSituationUpdated::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world_proto.ServerToClient.NotifyAircraftSituationUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 airctaft_id = 1;
  if (this->airctaft_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_airctaft_id(), target);
  }

  // .world_proto.Aircraft.Situation situation = 2;
  if (this->has_situation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::situation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world_proto.ServerToClient.NotifyAircraftSituationUpdated)
  return target;
}

size_t ServerToClient_NotifyAircraftSituationUpdated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world_proto.ServerToClient.NotifyAircraftSituationUpdated)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .world_proto.Aircraft.Situation situation = 2;
  if (this->has_situation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *situation_);
  }

  // int32 airctaft_id = 1;
  if (this->airctaft_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_airctaft_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerToClient_NotifyAircraftSituationUpdated::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world_proto.ServerToClient.NotifyAircraftSituationUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerToClient_NotifyAircraftSituationUpdated* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerToClient_NotifyAircraftSituationUpdated>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world_proto.ServerToClient.NotifyAircraftSituationUpdated)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world_proto.ServerToClient.NotifyAircraftSituationUpdated)
    MergeFrom(*source);
  }
}

void ServerToClient_NotifyAircraftSituationUpdated::MergeFrom(const ServerToClient_NotifyAircraftSituationUpdated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world_proto.ServerToClient.NotifyAircraftSituationUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_situation()) {
    _internal_mutable_situation()->::world_proto::Aircraft_Situation::MergeFrom(from._internal_situation());
  }
  if (from.airctaft_id() != 0) {
    _internal_set_airctaft_id(from._internal_airctaft_id());
  }
}

void ServerToClient_NotifyAircraftSituationUpdated::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world_proto.ServerToClient.NotifyAircraftSituationUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerToClient_NotifyAircraftSituationUpdated::CopyFrom(const ServerToClient_NotifyAircraftSituationUpdated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world_proto.ServerToClient.NotifyAircraftSituationUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerToClient_NotifyAircraftSituationUpdated::IsInitialized() const {
  return true;
}

void ServerToClient_NotifyAircraftSituationUpdated::InternalSwap(ServerToClient_NotifyAircraftSituationUpdated* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerToClient_NotifyAircraftSituationUpdated, airctaft_id_)
      + sizeof(ServerToClient_NotifyAircraftSituationUpdated::airctaft_id_)
      - PROTOBUF_FIELD_OFFSET(ServerToClient_NotifyAircraftSituationUpdated, situation_)>(
          reinterpret_cast<char*>(&situation_),
          reinterpret_cast<char*>(&other->situation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerToClient_NotifyAircraftSituationUpdated::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerToClient_NotifyAircraftRemoved::InitAsDefaultInstance() {
}
class ServerToClient_NotifyAircraftRemoved::_Internal {
 public:
};

ServerToClient_NotifyAircraftRemoved::ServerToClient_NotifyAircraftRemoved(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world_proto.ServerToClient.NotifyAircraftRemoved)
}
ServerToClient_NotifyAircraftRemoved::ServerToClient_NotifyAircraftRemoved(const ServerToClient_NotifyAircraftRemoved& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  airctaft_id_ = from.airctaft_id_;
  // @@protoc_insertion_point(copy_constructor:world_proto.ServerToClient.NotifyAircraftRemoved)
}

void ServerToClient_NotifyAircraftRemoved::SharedCtor() {
  airctaft_id_ = 0;
}

ServerToClient_NotifyAircraftRemoved::~ServerToClient_NotifyAircraftRemoved() {
  // @@protoc_insertion_point(destructor:world_proto.ServerToClient.NotifyAircraftRemoved)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerToClient_NotifyAircraftRemoved::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ServerToClient_NotifyAircraftRemoved::ArenaDtor(void* object) {
  ServerToClient_NotifyAircraftRemoved* _this = reinterpret_cast< ServerToClient_NotifyAircraftRemoved* >(object);
  (void)_this;
}
void ServerToClient_NotifyAircraftRemoved::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerToClient_NotifyAircraftRemoved::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerToClient_NotifyAircraftRemoved& ServerToClient_NotifyAircraftRemoved::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerToClient_NotifyAircraftRemoved_world_2eproto.base);
  return *internal_default_instance();
}


void ServerToClient_NotifyAircraftRemoved::Clear() {
// @@protoc_insertion_point(message_clear_start:world_proto.ServerToClient.NotifyAircraftRemoved)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  airctaft_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerToClient_NotifyAircraftRemoved::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 airctaft_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          airctaft_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerToClient_NotifyAircraftRemoved::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world_proto.ServerToClient.NotifyAircraftRemoved)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 airctaft_id = 1;
  if (this->airctaft_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_airctaft_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world_proto.ServerToClient.NotifyAircraftRemoved)
  return target;
}

size_t ServerToClient_NotifyAircraftRemoved::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world_proto.ServerToClient.NotifyAircraftRemoved)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 airctaft_id = 1;
  if (this->airctaft_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_airctaft_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerToClient_NotifyAircraftRemoved::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world_proto.ServerToClient.NotifyAircraftRemoved)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerToClient_NotifyAircraftRemoved* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerToClient_NotifyAircraftRemoved>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world_proto.ServerToClient.NotifyAircraftRemoved)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world_proto.ServerToClient.NotifyAircraftRemoved)
    MergeFrom(*source);
  }
}

void ServerToClient_NotifyAircraftRemoved::MergeFrom(const ServerToClient_NotifyAircraftRemoved& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world_proto.ServerToClient.NotifyAircraftRemoved)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.airctaft_id() != 0) {
    _internal_set_airctaft_id(from._internal_airctaft_id());
  }
}

void ServerToClient_NotifyAircraftRemoved::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world_proto.ServerToClient.NotifyAircraftRemoved)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerToClient_NotifyAircraftRemoved::CopyFrom(const ServerToClient_NotifyAircraftRemoved& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world_proto.ServerToClient.NotifyAircraftRemoved)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerToClient_NotifyAircraftRemoved::IsInitialized() const {
  return true;
}

void ServerToClient_NotifyAircraftRemoved::InternalSwap(ServerToClient_NotifyAircraftRemoved* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(airctaft_id_, other->airctaft_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerToClient_NotifyAircraftRemoved::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerToClient::InitAsDefaultInstance() {
  ::world_proto::_ServerToClient_default_instance_._instance.get_mutable()->sent_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::world_proto::_ServerToClient_default_instance_._instance.get_mutable()->request_sent_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::world_proto::_ServerToClient_default_instance_._instance.get_mutable()->request_received_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::world_proto::_ServerToClient_default_instance_.reply_connect_ = const_cast< ::world_proto::ServerToClient_ReplyConnect*>(
      ::world_proto::ServerToClient_ReplyConnect::internal_default_instance());
  ::world_proto::_ServerToClient_default_instance_.reply_query_airport_ = const_cast< ::world_proto::ServerToClient_ReplyQueryAirport*>(
      ::world_proto::ServerToClient_ReplyQueryAirport::internal_default_instance());
  ::world_proto::_ServerToClient_default_instance_.reply_create_aircraft_ = const_cast< ::world_proto::ServerToClient_ReplyCreateAircraft*>(
      ::world_proto::ServerToClient_ReplyCreateAircraft::internal_default_instance());
  ::world_proto::_ServerToClient_default_instance_.reply_query_taxi_path_ = const_cast< ::world_proto::ServerToClient_ReplyQueryTaxiPath*>(
      ::world_proto::ServerToClient_ReplyQueryTaxiPath::internal_default_instance());
  ::world_proto::_ServerToClient_default_instance_.notify_aircraft_created_ = const_cast< ::world_proto::ServerToClient_NotifyAircraftCreated*>(
      ::world_proto::ServerToClient_NotifyAircraftCreated::internal_default_instance());
  ::world_proto::_ServerToClient_default_instance_.notify_aircraft_situation_updated_ = const_cast< ::world_proto::ServerToClient_NotifyAircraftSituationUpdated*>(
      ::world_proto::ServerToClient_NotifyAircraftSituationUpdated::internal_default_instance());
  ::world_proto::_ServerToClient_default_instance_.notify_aircraft_removed_ = const_cast< ::world_proto::ServerToClient_NotifyAircraftRemoved*>(
      ::world_proto::ServerToClient_NotifyAircraftRemoved::internal_default_instance());
  ::world_proto::_ServerToClient_default_instance_.fault_declined_ = const_cast< ::world_proto::ServerToClient_FaultDeclined*>(
      ::world_proto::ServerToClient_FaultDeclined::internal_default_instance());
  ::world_proto::_ServerToClient_default_instance_.fault_not_found_ = const_cast< ::world_proto::ServerToClient_FaultNotFound*>(
      ::world_proto::ServerToClient_FaultNotFound::internal_default_instance());
}
class ServerToClient::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& sent_at(const ServerToClient* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& request_sent_at(const ServerToClient* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& request_received_at(const ServerToClient* msg);
  static const ::world_proto::ServerToClient_ReplyConnect& reply_connect(const ServerToClient* msg);
  static const ::world_proto::ServerToClient_ReplyQueryAirport& reply_query_airport(const ServerToClient* msg);
  static const ::world_proto::ServerToClient_ReplyCreateAircraft& reply_create_aircraft(const ServerToClient* msg);
  static const ::world_proto::ServerToClient_ReplyQueryTaxiPath& reply_query_taxi_path(const ServerToClient* msg);
  static const ::world_proto::ServerToClient_NotifyAircraftCreated& notify_aircraft_created(const ServerToClient* msg);
  static const ::world_proto::ServerToClient_NotifyAircraftSituationUpdated& notify_aircraft_situation_updated(const ServerToClient* msg);
  static const ::world_proto::ServerToClient_NotifyAircraftRemoved& notify_aircraft_removed(const ServerToClient* msg);
  static const ::world_proto::ServerToClient_FaultDeclined& fault_declined(const ServerToClient* msg);
  static const ::world_proto::ServerToClient_FaultNotFound& fault_not_found(const ServerToClient* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
ServerToClient::_Internal::sent_at(const ServerToClient* msg) {
  return *msg->sent_at_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
ServerToClient::_Internal::request_sent_at(const ServerToClient* msg) {
  return *msg->request_sent_at_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
ServerToClient::_Internal::request_received_at(const ServerToClient* msg) {
  return *msg->request_received_at_;
}
const ::world_proto::ServerToClient_ReplyConnect&
ServerToClient::_Internal::reply_connect(const ServerToClient* msg) {
  return *msg->payload_.reply_connect_;
}
const ::world_proto::ServerToClient_ReplyQueryAirport&
ServerToClient::_Internal::reply_query_airport(const ServerToClient* msg) {
  return *msg->payload_.reply_query_airport_;
}
const ::world_proto::ServerToClient_ReplyCreateAircraft&
ServerToClient::_Internal::reply_create_aircraft(const ServerToClient* msg) {
  return *msg->payload_.reply_create_aircraft_;
}
const ::world_proto::ServerToClient_ReplyQueryTaxiPath&
ServerToClient::_Internal::reply_query_taxi_path(const ServerToClient* msg) {
  return *msg->payload_.reply_query_taxi_path_;
}
const ::world_proto::ServerToClient_NotifyAircraftCreated&
ServerToClient::_Internal::notify_aircraft_created(const ServerToClient* msg) {
  return *msg->payload_.notify_aircraft_created_;
}
const ::world_proto::ServerToClient_NotifyAircraftSituationUpdated&
ServerToClient::_Internal::notify_aircraft_situation_updated(const ServerToClient* msg) {
  return *msg->payload_.notify_aircraft_situation_updated_;
}
const ::world_proto::ServerToClient_NotifyAircraftRemoved&
ServerToClient::_Internal::notify_aircraft_removed(const ServerToClient* msg) {
  return *msg->payload_.notify_aircraft_removed_;
}
const ::world_proto::ServerToClient_FaultDeclined&
ServerToClient::_Internal::fault_declined(const ServerToClient* msg) {
  return *msg->payload_.fault_declined_;
}
const ::world_proto::ServerToClient_FaultNotFound&
ServerToClient::_Internal::fault_not_found(const ServerToClient* msg) {
  return *msg->payload_.fault_not_found_;
}
void ServerToClient::clear_sent_at() {
  if (GetArena() == nullptr && sent_at_ != nullptr) {
    delete sent_at_;
  }
  sent_at_ = nullptr;
}
void ServerToClient::clear_request_sent_at() {
  if (GetArena() == nullptr && request_sent_at_ != nullptr) {
    delete request_sent_at_;
  }
  request_sent_at_ = nullptr;
}
void ServerToClient::clear_request_received_at() {
  if (GetArena() == nullptr && request_received_at_ != nullptr) {
    delete request_received_at_;
  }
  request_received_at_ = nullptr;
}
void ServerToClient::set_allocated_reply_connect(::world_proto::ServerToClient_ReplyConnect* reply_connect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (reply_connect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reply_connect);
    if (message_arena != submessage_arena) {
      reply_connect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reply_connect, submessage_arena);
    }
    set_has_reply_connect();
    payload_.reply_connect_ = reply_connect;
  }
  // @@protoc_insertion_point(field_set_allocated:world_proto.ServerToClient.reply_connect)
}
void ServerToClient::set_allocated_reply_query_airport(::world_proto::ServerToClient_ReplyQueryAirport* reply_query_airport) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (reply_query_airport) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reply_query_airport);
    if (message_arena != submessage_arena) {
      reply_query_airport = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reply_query_airport, submessage_arena);
    }
    set_has_reply_query_airport();
    payload_.reply_query_airport_ = reply_query_airport;
  }
  // @@protoc_insertion_point(field_set_allocated:world_proto.ServerToClient.reply_query_airport)
}
void ServerToClient::set_allocated_reply_create_aircraft(::world_proto::ServerToClient_ReplyCreateAircraft* reply_create_aircraft) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (reply_create_aircraft) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reply_create_aircraft);
    if (message_arena != submessage_arena) {
      reply_create_aircraft = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reply_create_aircraft, submessage_arena);
    }
    set_has_reply_create_aircraft();
    payload_.reply_create_aircraft_ = reply_create_aircraft;
  }
  // @@protoc_insertion_point(field_set_allocated:world_proto.ServerToClient.reply_create_aircraft)
}
void ServerToClient::set_allocated_reply_query_taxi_path(::world_proto::ServerToClient_ReplyQueryTaxiPath* reply_query_taxi_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (reply_query_taxi_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reply_query_taxi_path);
    if (message_arena != submessage_arena) {
      reply_query_taxi_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reply_query_taxi_path, submessage_arena);
    }
    set_has_reply_query_taxi_path();
    payload_.reply_query_taxi_path_ = reply_query_taxi_path;
  }
  // @@protoc_insertion_point(field_set_allocated:world_proto.ServerToClient.reply_query_taxi_path)
}
void ServerToClient::set_allocated_notify_aircraft_created(::world_proto::ServerToClient_NotifyAircraftCreated* notify_aircraft_created) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (notify_aircraft_created) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(notify_aircraft_created);
    if (message_arena != submessage_arena) {
      notify_aircraft_created = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notify_aircraft_created, submessage_arena);
    }
    set_has_notify_aircraft_created();
    payload_.notify_aircraft_created_ = notify_aircraft_created;
  }
  // @@protoc_insertion_point(field_set_allocated:world_proto.ServerToClient.notify_aircraft_created)
}
void ServerToClient::set_allocated_notify_aircraft_situation_updated(::world_proto::ServerToClient_NotifyAircraftSituationUpdated* notify_aircraft_situation_updated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (notify_aircraft_situation_updated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(notify_aircraft_situation_updated);
    if (message_arena != submessage_arena) {
      notify_aircraft_situation_updated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notify_aircraft_situation_updated, submessage_arena);
    }
    set_has_notify_aircraft_situation_updated();
    payload_.notify_aircraft_situation_updated_ = notify_aircraft_situation_updated;
  }
  // @@protoc_insertion_point(field_set_allocated:world_proto.ServerToClient.notify_aircraft_situation_updated)
}
void ServerToClient::set_allocated_notify_aircraft_removed(::world_proto::ServerToClient_NotifyAircraftRemoved* notify_aircraft_removed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (notify_aircraft_removed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(notify_aircraft_removed);
    if (message_arena != submessage_arena) {
      notify_aircraft_removed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notify_aircraft_removed, submessage_arena);
    }
    set_has_notify_aircraft_removed();
    payload_.notify_aircraft_removed_ = notify_aircraft_removed;
  }
  // @@protoc_insertion_point(field_set_allocated:world_proto.ServerToClient.notify_aircraft_removed)
}
void ServerToClient::set_allocated_fault_declined(::world_proto::ServerToClient_FaultDeclined* fault_declined) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (fault_declined) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fault_declined);
    if (message_arena != submessage_arena) {
      fault_declined = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fault_declined, submessage_arena);
    }
    set_has_fault_declined();
    payload_.fault_declined_ = fault_declined;
  }
  // @@protoc_insertion_point(field_set_allocated:world_proto.ServerToClient.fault_declined)
}
void ServerToClient::set_allocated_fault_not_found(::world_proto::ServerToClient_FaultNotFound* fault_not_found) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (fault_not_found) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fault_not_found);
    if (message_arena != submessage_arena) {
      fault_not_found = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fault_not_found, submessage_arena);
    }
    set_has_fault_not_found();
    payload_.fault_not_found_ = fault_not_found;
  }
  // @@protoc_insertion_point(field_set_allocated:world_proto.ServerToClient.fault_not_found)
}
ServerToClient::ServerToClient(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world_proto.ServerToClient)
}
ServerToClient::ServerToClient(const ServerToClient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sent_at()) {
    sent_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.sent_at_);
  } else {
    sent_at_ = nullptr;
  }
  if (from._internal_has_request_sent_at()) {
    request_sent_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.request_sent_at_);
  } else {
    request_sent_at_ = nullptr;
  }
  if (from._internal_has_request_received_at()) {
    request_received_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.request_received_at_);
  } else {
    request_received_at_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&reply_to_request_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(reply_to_request_id_));
  clear_has_payload();
  switch (from.payload_case()) {
    case kReplyConnect: {
      _internal_mutable_reply_connect()->::world_proto::ServerToClient_ReplyConnect::MergeFrom(from._internal_reply_connect());
      break;
    }
    case kReplyQueryAirport: {
      _internal_mutable_reply_query_airport()->::world_proto::ServerToClient_ReplyQueryAirport::MergeFrom(from._internal_reply_query_airport());
      break;
    }
    case kReplyCreateAircraft: {
      _internal_mutable_reply_create_aircraft()->::world_proto::ServerToClient_ReplyCreateAircraft::MergeFrom(from._internal_reply_create_aircraft());
      break;
    }
    case kReplyQueryTaxiPath: {
      _internal_mutable_reply_query_taxi_path()->::world_proto::ServerToClient_ReplyQueryTaxiPath::MergeFrom(from._internal_reply_query_taxi_path());
      break;
    }
    case kNotifyAircraftCreated: {
      _internal_mutable_notify_aircraft_created()->::world_proto::ServerToClient_NotifyAircraftCreated::MergeFrom(from._internal_notify_aircraft_created());
      break;
    }
    case kNotifyAircraftSituationUpdated: {
      _internal_mutable_notify_aircraft_situation_updated()->::world_proto::ServerToClient_NotifyAircraftSituationUpdated::MergeFrom(from._internal_notify_aircraft_situation_updated());
      break;
    }
    case kNotifyAircraftRemoved: {
      _internal_mutable_notify_aircraft_removed()->::world_proto::ServerToClient_NotifyAircraftRemoved::MergeFrom(from._internal_notify_aircraft_removed());
      break;
    }
    case kFaultDeclined: {
      _internal_mutable_fault_declined()->::world_proto::ServerToClient_FaultDeclined::MergeFrom(from._internal_fault_declined());
      break;
    }
    case kFaultNotFound: {
      _internal_mutable_fault_not_found()->::world_proto::ServerToClient_FaultNotFound::MergeFrom(from._internal_fault_not_found());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:world_proto.ServerToClient)
}

void ServerToClient::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerToClient_world_2eproto.base);
  ::memset(&sent_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reply_to_request_id_) -
      reinterpret_cast<char*>(&sent_at_)) + sizeof(reply_to_request_id_));
  clear_has_payload();
}

ServerToClient::~ServerToClient() {
  // @@protoc_insertion_point(destructor:world_proto.ServerToClient)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerToClient::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete sent_at_;
  if (this != internal_default_instance()) delete request_sent_at_;
  if (this != internal_default_instance()) delete request_received_at_;
  if (has_payload()) {
    clear_payload();
  }
}

void ServerToClient::ArenaDtor(void* object) {
  ServerToClient* _this = reinterpret_cast< ServerToClient* >(object);
  (void)_this;
}
void ServerToClient::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerToClient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerToClient& ServerToClient::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerToClient_world_2eproto.base);
  return *internal_default_instance();
}


void ServerToClient::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:world_proto.ServerToClient)
  switch (payload_case()) {
    case kReplyConnect: {
      if (GetArena() == nullptr) {
        delete payload_.reply_connect_;
      }
      break;
    }
    case kReplyQueryAirport: {
      if (GetArena() == nullptr) {
        delete payload_.reply_query_airport_;
      }
      break;
    }
    case kReplyCreateAircraft: {
      if (GetArena() == nullptr) {
        delete payload_.reply_create_aircraft_;
      }
      break;
    }
    case kReplyQueryTaxiPath: {
      if (GetArena() == nullptr) {
        delete payload_.reply_query_taxi_path_;
      }
      break;
    }
    case kNotifyAircraftCreated: {
      if (GetArena() == nullptr) {
        delete payload_.notify_aircraft_created_;
      }
      break;
    }
    case kNotifyAircraftSituationUpdated: {
      if (GetArena() == nullptr) {
        delete payload_.notify_aircraft_situation_updated_;
      }
      break;
    }
    case kNotifyAircraftRemoved: {
      if (GetArena() == nullptr) {
        delete payload_.notify_aircraft_removed_;
      }
      break;
    }
    case kFaultDeclined: {
      if (GetArena() == nullptr) {
        delete payload_.fault_declined_;
      }
      break;
    }
    case kFaultNotFound: {
      if (GetArena() == nullptr) {
        delete payload_.fault_not_found_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void ServerToClient::Clear() {
// @@protoc_insertion_point(message_clear_start:world_proto.ServerToClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && sent_at_ != nullptr) {
    delete sent_at_;
  }
  sent_at_ = nullptr;
  if (GetArena() == nullptr && request_sent_at_ != nullptr) {
    delete request_sent_at_;
  }
  request_sent_at_ = nullptr;
  if (GetArena() == nullptr && request_received_at_ != nullptr) {
    delete request_received_at_;
  }
  request_received_at_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reply_to_request_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(reply_to_request_id_));
  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerToClient::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 reply_to_request_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          reply_to_request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp sent_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sent_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp request_sent_at = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_request_sent_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp request_received_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_request_received_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .world_proto.ServerToClient.NotifyAircraftCreated notify_aircraft_created = 201;
      case 201:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_notify_aircraft_created(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .world_proto.ServerToClient.NotifyAircraftSituationUpdated notify_aircraft_situation_updated = 202;
      case 202:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_notify_aircraft_situation_updated(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .world_proto.ServerToClient.NotifyAircraftRemoved notify_aircraft_removed = 203;
      case 203:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_notify_aircraft_removed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .world_proto.ServerToClient.ReplyConnect reply_connect = 1101;
      case 1101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_reply_connect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .world_proto.ServerToClient.ReplyQueryAirport reply_query_airport = 1102;
      case 1102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_reply_query_airport(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .world_proto.ServerToClient.ReplyCreateAircraft reply_create_aircraft = 1103;
      case 1103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_reply_create_aircraft(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .world_proto.ServerToClient.ReplyQueryTaxiPath reply_query_taxi_path = 1106;
      case 1106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_reply_query_taxi_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .world_proto.ServerToClient.FaultDeclined fault_declined = 3001;
      case 3001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_fault_declined(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .world_proto.ServerToClient.FaultNotFound fault_not_found = 3002;
      case 3002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_fault_not_found(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerToClient::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world_proto.ServerToClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 2;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_id(), target);
  }

  // uint64 reply_to_request_id = 3;
  if (this->reply_to_request_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_reply_to_request_id(), target);
  }

  // .google.protobuf.Timestamp sent_at = 4;
  if (this->has_sent_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::sent_at(this), target, stream);
  }

  // .google.protobuf.Timestamp request_sent_at = 5;
  if (this->has_request_sent_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::request_sent_at(this), target, stream);
  }

  // .google.protobuf.Timestamp request_received_at = 6;
  if (this->has_request_received_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::request_received_at(this), target, stream);
  }

  // .world_proto.ServerToClient.NotifyAircraftCreated notify_aircraft_created = 201;
  if (_internal_has_notify_aircraft_created()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        201, _Internal::notify_aircraft_created(this), target, stream);
  }

  // .world_proto.ServerToClient.NotifyAircraftSituationUpdated notify_aircraft_situation_updated = 202;
  if (_internal_has_notify_aircraft_situation_updated()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        202, _Internal::notify_aircraft_situation_updated(this), target, stream);
  }

  // .world_proto.ServerToClient.NotifyAircraftRemoved notify_aircraft_removed = 203;
  if (_internal_has_notify_aircraft_removed()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        203, _Internal::notify_aircraft_removed(this), target, stream);
  }

  // .world_proto.ServerToClient.ReplyConnect reply_connect = 1101;
  if (_internal_has_reply_connect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1101, _Internal::reply_connect(this), target, stream);
  }

  // .world_proto.ServerToClient.ReplyQueryAirport reply_query_airport = 1102;
  if (_internal_has_reply_query_airport()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1102, _Internal::reply_query_airport(this), target, stream);
  }

  // .world_proto.ServerToClient.ReplyCreateAircraft reply_create_aircraft = 1103;
  if (_internal_has_reply_create_aircraft()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1103, _Internal::reply_create_aircraft(this), target, stream);
  }

  // .world_proto.ServerToClient.ReplyQueryTaxiPath reply_query_taxi_path = 1106;
  if (_internal_has_reply_query_taxi_path()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1106, _Internal::reply_query_taxi_path(this), target, stream);
  }

  // .world_proto.ServerToClient.FaultDeclined fault_declined = 3001;
  if (_internal_has_fault_declined()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3001, _Internal::fault_declined(this), target, stream);
  }

  // .world_proto.ServerToClient.FaultNotFound fault_not_found = 3002;
  if (_internal_has_fault_not_found()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3002, _Internal::fault_not_found(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world_proto.ServerToClient)
  return target;
}

size_t ServerToClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world_proto.ServerToClient)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp sent_at = 4;
  if (this->has_sent_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sent_at_);
  }

  // .google.protobuf.Timestamp request_sent_at = 5;
  if (this->has_request_sent_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_sent_at_);
  }

  // .google.protobuf.Timestamp request_received_at = 6;
  if (this->has_request_received_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_received_at_);
  }

  // uint64 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // uint64 reply_to_request_id = 3;
  if (this->reply_to_request_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_reply_to_request_id());
  }

  switch (payload_case()) {
    // .world_proto.ServerToClient.ReplyConnect reply_connect = 1101;
    case kReplyConnect: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.reply_connect_);
      break;
    }
    // .world_proto.ServerToClient.ReplyQueryAirport reply_query_airport = 1102;
    case kReplyQueryAirport: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.reply_query_airport_);
      break;
    }
    // .world_proto.ServerToClient.ReplyCreateAircraft reply_create_aircraft = 1103;
    case kReplyCreateAircraft: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.reply_create_aircraft_);
      break;
    }
    // .world_proto.ServerToClient.ReplyQueryTaxiPath reply_query_taxi_path = 1106;
    case kReplyQueryTaxiPath: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.reply_query_taxi_path_);
      break;
    }
    // .world_proto.ServerToClient.NotifyAircraftCreated notify_aircraft_created = 201;
    case kNotifyAircraftCreated: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.notify_aircraft_created_);
      break;
    }
    // .world_proto.ServerToClient.NotifyAircraftSituationUpdated notify_aircraft_situation_updated = 202;
    case kNotifyAircraftSituationUpdated: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.notify_aircraft_situation_updated_);
      break;
    }
    // .world_proto.ServerToClient.NotifyAircraftRemoved notify_aircraft_removed = 203;
    case kNotifyAircraftRemoved: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.notify_aircraft_removed_);
      break;
    }
    // .world_proto.ServerToClient.FaultDeclined fault_declined = 3001;
    case kFaultDeclined: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.fault_declined_);
      break;
    }
    // .world_proto.ServerToClient.FaultNotFound fault_not_found = 3002;
    case kFaultNotFound: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.fault_not_found_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerToClient::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world_proto.ServerToClient)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerToClient* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerToClient>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world_proto.ServerToClient)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world_proto.ServerToClient)
    MergeFrom(*source);
  }
}

void ServerToClient::MergeFrom(const ServerToClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world_proto.ServerToClient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sent_at()) {
    _internal_mutable_sent_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_sent_at());
  }
  if (from.has_request_sent_at()) {
    _internal_mutable_request_sent_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_request_sent_at());
  }
  if (from.has_request_received_at()) {
    _internal_mutable_request_received_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_request_received_at());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.reply_to_request_id() != 0) {
    _internal_set_reply_to_request_id(from._internal_reply_to_request_id());
  }
  switch (from.payload_case()) {
    case kReplyConnect: {
      _internal_mutable_reply_connect()->::world_proto::ServerToClient_ReplyConnect::MergeFrom(from._internal_reply_connect());
      break;
    }
    case kReplyQueryAirport: {
      _internal_mutable_reply_query_airport()->::world_proto::ServerToClient_ReplyQueryAirport::MergeFrom(from._internal_reply_query_airport());
      break;
    }
    case kReplyCreateAircraft: {
      _internal_mutable_reply_create_aircraft()->::world_proto::ServerToClient_ReplyCreateAircraft::MergeFrom(from._internal_reply_create_aircraft());
      break;
    }
    case kReplyQueryTaxiPath: {
      _internal_mutable_reply_query_taxi_path()->::world_proto::ServerToClient_ReplyQueryTaxiPath::MergeFrom(from._internal_reply_query_taxi_path());
      break;
    }
    case kNotifyAircraftCreated: {
      _internal_mutable_notify_aircraft_created()->::world_proto::ServerToClient_NotifyAircraftCreated::MergeFrom(from._internal_notify_aircraft_created());
      break;
    }
    case kNotifyAircraftSituationUpdated: {
      _internal_mutable_notify_aircraft_situation_updated()->::world_proto::ServerToClient_NotifyAircraftSituationUpdated::MergeFrom(from._internal_notify_aircraft_situation_updated());
      break;
    }
    case kNotifyAircraftRemoved: {
      _internal_mutable_notify_aircraft_removed()->::world_proto::ServerToClient_NotifyAircraftRemoved::MergeFrom(from._internal_notify_aircraft_removed());
      break;
    }
    case kFaultDeclined: {
      _internal_mutable_fault_declined()->::world_proto::ServerToClient_FaultDeclined::MergeFrom(from._internal_fault_declined());
      break;
    }
    case kFaultNotFound: {
      _internal_mutable_fault_not_found()->::world_proto::ServerToClient_FaultNotFound::MergeFrom(from._internal_fault_not_found());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void ServerToClient::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world_proto.ServerToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerToClient::CopyFrom(const ServerToClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world_proto.ServerToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerToClient::IsInitialized() const {
  return true;
}

void ServerToClient::InternalSwap(ServerToClient* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerToClient, reply_to_request_id_)
      + sizeof(ServerToClient::reply_to_request_id_)
      - PROTOBUF_FIELD_OFFSET(ServerToClient, sent_at_)>(
          reinterpret_cast<char*>(&sent_at_),
          reinterpret_cast<char*>(&other->sent_at_));
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerToClient::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace world_proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::world_proto::GeoPoint* Arena::CreateMaybeMessage< ::world_proto::GeoPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world_proto::GeoPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::world_proto::GeoBox* Arena::CreateMaybeMessage< ::world_proto::GeoBox >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world_proto::GeoBox >(arena);
}
template<> PROTOBUF_NOINLINE ::world_proto::Vector3d* Arena::CreateMaybeMessage< ::world_proto::Vector3d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world_proto::Vector3d >(arena);
}
template<> PROTOBUF_NOINLINE ::world_proto::Attitude* Arena::CreateMaybeMessage< ::world_proto::Attitude >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world_proto::Attitude >(arena);
}
template<> PROTOBUF_NOINLINE ::world_proto::Aircraft_Situation* Arena::CreateMaybeMessage< ::world_proto::Aircraft_Situation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world_proto::Aircraft_Situation >(arena);
}
template<> PROTOBUF_NOINLINE ::world_proto::Aircraft* Arena::CreateMaybeMessage< ::world_proto::Aircraft >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world_proto::Aircraft >(arena);
}
template<> PROTOBUF_NOINLINE ::world_proto::Runway_End* Arena::CreateMaybeMessage< ::world_proto::Runway_End >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world_proto::Runway_End >(arena);
}
template<> PROTOBUF_NOINLINE ::world_proto::Runway* Arena::CreateMaybeMessage< ::world_proto::Runway >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world_proto::Runway >(arena);
}
template<> PROTOBUF_NOINLINE ::world_proto::TaxiNode* Arena::CreateMaybeMessage< ::world_proto::TaxiNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world_proto::TaxiNode >(arena);
}
template<> PROTOBUF_NOINLINE ::world_proto::TaxiEdge_ActiveZoneMatrix* Arena::CreateMaybeMessage< ::world_proto::TaxiEdge_ActiveZoneMatrix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world_proto::TaxiEdge_ActiveZoneMatrix >(arena);
}
template<> PROTOBUF_NOINLINE ::world_proto::TaxiEdge* Arena::CreateMaybeMessage< ::world_proto::TaxiEdge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world_proto::TaxiEdge >(arena);
}
template<> PROTOBUF_NOINLINE ::world_proto::ParkingStand* Arena::CreateMaybeMessage< ::world_proto::ParkingStand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world_proto::ParkingStand >(arena);
}
template<> PROTOBUF_NOINLINE ::world_proto::Airport* Arena::CreateMaybeMessage< ::world_proto::Airport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world_proto::Airport >(arena);
}
template<> PROTOBUF_NOINLINE ::world_proto::TaxiPath* Arena::CreateMaybeMessage< ::world_proto::TaxiPath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world_proto::TaxiPath >(arena);
}
template<> PROTOBUF_NOINLINE ::world_proto::GeoPolygon_GeoEdge* Arena::CreateMaybeMessage< ::world_proto::GeoPolygon_GeoEdge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world_proto::GeoPolygon_GeoEdge >(arena);
}
template<> PROTOBUF_NOINLINE ::world_proto::GeoPolygon* Arena::CreateMaybeMessage< ::world_proto::GeoPolygon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world_proto::GeoPolygon >(arena);
}
template<> PROTOBUF_NOINLINE ::world_proto::AirspaceGeometry* Arena::CreateMaybeMessage< ::world_proto::AirspaceGeometry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world_proto::AirspaceGeometry >(arena);
}
template<> PROTOBUF_NOINLINE ::world_proto::ControlledAirspace* Arena::CreateMaybeMessage< ::world_proto::ControlledAirspace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world_proto::ControlledAirspace >(arena);
}
template<> PROTOBUF_NOINLINE ::world_proto::ControlFacility* Arena::CreateMaybeMessage< ::world_proto::ControlFacility >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world_proto::ControlFacility >(arena);
}
template<> PROTOBUF_NOINLINE ::world_proto::ClientToServer_Connect* Arena::CreateMaybeMessage< ::world_proto::ClientToServer_Connect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world_proto::ClientToServer_Connect >(arena);
}
template<> PROTOBUF_NOINLINE ::world_proto::ClientToServer_QueryAirport* Arena::CreateMaybeMessage< ::world_proto::ClientToServer_QueryAirport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world_proto::ClientToServer_QueryAirport >(arena);
}
template<> PROTOBUF_NOINLINE ::world_proto::ClientToServer_QueryTaxiPath* Arena::CreateMaybeMessage< ::world_proto::ClientToServer_QueryTaxiPath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world_proto::ClientToServer_QueryTaxiPath >(arena);
}
template<> PROTOBUF_NOINLINE ::world_proto::ClientToServer_CreateAircraft* Arena::CreateMaybeMessage< ::world_proto::ClientToServer_CreateAircraft >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world_proto::ClientToServer_CreateAircraft >(arena);
}
template<> PROTOBUF_NOINLINE ::world_proto::ClientToServer_UpdateAircraftSituation* Arena::CreateMaybeMessage< ::world_proto::ClientToServer_UpdateAircraftSituation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world_proto::ClientToServer_UpdateAircraftSituation >(arena);
}
template<> PROTOBUF_NOINLINE ::world_proto::ClientToServer_RemoveAircraft* Arena::CreateMaybeMessage< ::world_proto::ClientToServer_RemoveAircraft >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world_proto::ClientToServer_RemoveAircraft >(arena);
}
template<> PROTOBUF_NOINLINE ::world_proto::ClientToServer* Arena::CreateMaybeMessage< ::world_proto::ClientToServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world_proto::ClientToServer >(arena);
}
template<> PROTOBUF_NOINLINE ::world_proto::ServerToClient_FaultDeclined* Arena::CreateMaybeMessage< ::world_proto::ServerToClient_FaultDeclined >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world_proto::ServerToClient_FaultDeclined >(arena);
}
template<> PROTOBUF_NOINLINE ::world_proto::ServerToClient_FaultNotFound* Arena::CreateMaybeMessage< ::world_proto::ServerToClient_FaultNotFound >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world_proto::ServerToClient_FaultNotFound >(arena);
}
template<> PROTOBUF_NOINLINE ::world_proto::ServerToClient_ReplyConnect* Arena::CreateMaybeMessage< ::world_proto::ServerToClient_ReplyConnect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world_proto::ServerToClient_ReplyConnect >(arena);
}
template<> PROTOBUF_NOINLINE ::world_proto::ServerToClient_ReplyCreateAircraft* Arena::CreateMaybeMessage< ::world_proto::ServerToClient_ReplyCreateAircraft >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world_proto::ServerToClient_ReplyCreateAircraft >(arena);
}
template<> PROTOBUF_NOINLINE ::world_proto::ServerToClient_ReplyQueryAirport* Arena::CreateMaybeMessage< ::world_proto::ServerToClient_ReplyQueryAirport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world_proto::ServerToClient_ReplyQueryAirport >(arena);
}
template<> PROTOBUF_NOINLINE ::world_proto::ServerToClient_ReplyQueryTaxiPath* Arena::CreateMaybeMessage< ::world_proto::ServerToClient_ReplyQueryTaxiPath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world_proto::ServerToClient_ReplyQueryTaxiPath >(arena);
}
template<> PROTOBUF_NOINLINE ::world_proto::ServerToClient_NotifyAircraftCreated* Arena::CreateMaybeMessage< ::world_proto::ServerToClient_NotifyAircraftCreated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world_proto::ServerToClient_NotifyAircraftCreated >(arena);
}
template<> PROTOBUF_NOINLINE ::world_proto::ServerToClient_NotifyAircraftSituationUpdated* Arena::CreateMaybeMessage< ::world_proto::ServerToClient_NotifyAircraftSituationUpdated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world_proto::ServerToClient_NotifyAircraftSituationUpdated >(arena);
}
template<> PROTOBUF_NOINLINE ::world_proto::ServerToClient_NotifyAircraftRemoved* Arena::CreateMaybeMessage< ::world_proto::ServerToClient_NotifyAircraftRemoved >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world_proto::ServerToClient_NotifyAircraftRemoved >(arena);
}
template<> PROTOBUF_NOINLINE ::world_proto::ServerToClient* Arena::CreateMaybeMessage< ::world_proto::ServerToClient >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world_proto::ServerToClient >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
