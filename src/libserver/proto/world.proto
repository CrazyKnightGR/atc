syntax = "proto3";
package world_proto;
import "google/protobuf/timestamp.proto";

message GeoPoint {
    double lat = 1;
    double lon = 2;
}

message GeoBox {
    GeoPoint north_west = 1;
    GeoPoint north_east = 2;
    GeoPoint south_west = 3;
    GeoPoint south_east = 4;
}

message Vector3d {
    double lat = 1;
    double lon = 2;
    double alt = 3;
}

message Attitude {
    float heading = 1;
    float pitch = 2;
    float roll = 3;
}

message Aircraft {
    enum Category {
        AIRCRAFT_CATEGORY_NONE = 0;
        AIRCRAFT_CATEGORY_HEAVY = 1;
        AIRCRAFT_CATEGORY_JET = 2;
        AIRCRAFT_CATEGORY_TURBOPROP = 4;
        AIRCRAFT_CATEGORY_PROP = 8;
        AIRCRAFT_CATEGORY_LIGHT_PROP = 16;
        AIRCRAFT_CATEGORY_HELICPOTER = 32;
    }
    enum OperationType {
        AIRCRAFT_OPERATION_NONE = 0;
        AIRCRAFT_OPERATION_GA = 1;
        AIRCRAFT_OPERATION_AIRLINE = 2;
        AIRCRAFT_OPERATION_CARGO = 3;
        AIRCRAFT_OPERATION_MILITARY = 8;
    }
    message Situation {
        Vector3d location = 1;
        Attitude attitude = 2;
        Vector3d velocity = 3;
        Vector3d acceleration = 4;
        bool is_on_ground = 5;
        float flap_ratio = 6;
        float spoiler_ratio = 7;
        float gear_ratio = 8;
        float nose_wheel_angle = 9;
        bool landing_lights = 10;
        bool taxi_lights = 11;
        bool strobe_lights = 12;
        int32 frequency_khz = 13;
        string squawk = 14;
        bool mode_c = 15;
        bool mode_s = 16;
    }
    int32 id = 1;
    string model_icao = 2;
    string airline_icao = 3;
    string tail_no = 4;
    string call_sign = 5;
    Aircraft.Situation situation = 6;
}

message Runway {
    message End {
        string name = 1;
        float heading = 2;
        GeoPoint centerline_point = 3;
        float displaced_threshold_meters = 4;
        float overrun_area_meters = 5;
    }
    float width_meters = 1;
    float length_meters = 2;
    uint32 mask_bit = 3;
    Runway.End end_1 = 4;
    Runway.End end_2 = 5;
}

message TaxiNode { 
    int32 id = 1;
    GeoPoint location = 2;
    bool is_junction = 3;
}

message TaxiEdge {
    enum Type {
        TAXI_EDGE_GROUNDWAY = 0;
        TAXI_EDGE_TAXIWAY = 1;
        TAXI_EDGE_RUNWAY = 2;
    }
    message ActiveZoneMatrix {
        uint32 departure = 1;
        uint32 arrival = 2;
        uint32 ils = 3;
    }
    int32 id = 1;
    string name = 2;
    int32 node_id_1 = 3;
    int32 node_id_2 = 4;
    TaxiEdge.Type type = 5;
    bool is_one_way = 6;
    bool is_high_speed_exit = 7;
    float length_meters = 8;
    float heading = 9;
    TaxiEdge.ActiveZoneMatrix active_zones = 10;
}

message ParkingStand {
    enum Type {
        PARKING_UNKNOWN = 0;
        PARKING_GATE = 1;
        PARKING_REMOTE = 2;
        PARKING_HANGAR = 3;
    }
    int32 id = 1;
    string name = 2;
    ParkingStand.Type type = 3;
    GeoPoint location = 4;
    float heading = 5;
    string width_code = 6;
    repeated Aircraft.Category categories = 7;
    repeated Aircraft.OperationType operation_types = 8;
    repeated string airline_icaos = 9;
}

message Airport {
    string icao = 1;
    GeoPoint location = 2;
    repeated Runway runways = 3;
    repeated ParkingStand parking_stands = 4;
    repeated TaxiNode taxi_nodes = 5;
    repeated TaxiEdge taxi_edges = 6;
}

message TaxiPath {
    int32 from_node_id = 1;
    int32 to_node_id = 2;
    repeated int32 edge_ids = 3;
}

message GeoPolygon {
    enum GeoEdgeType {
        GEO_EDGE_UNKNOWN = 0;
        GEO_EDGE_ARC_BY_EDGE = 1;
        GEO_EDGE_CIRCLE = 2;
        GEO_EDGE_GREAT_CIRCLE = 3;
        GEO_EDGE_RHUMB_LINE = 4;
        GEO_EDGE_CLOCKWISE_ARC = 5;
        GEO_EDGE_COUNTER_CLOCKWISE_ARC = 6;
    }
    message GeoEdge {
        GeoPolygon.GeoEdgeType type = 1;
        GeoPoint from_point = 2;
    }
    repeated GeoPolygon.GeoEdge edges = 1;
}

message AirspaceGeometry {
    GeoPolygon lateral_bounds = 1;
    float lower_bound_feet = 2;
    float upper_bound_feet = 3;
}

message ControlledAirspace {
    enum Type {
        AIRSPACE_UNKNOWN = 0;
        AIRSPACE_CONTROL_ZONE = 1;
        AIRSPACE_CONTROL_AREA = 2;
        AIRSPACE_TERMINAL_CONTROL_AREA = 3;
        AIRSPACE_FIR_AREA = 4;
        AIRSPACE_FIR_OCEANIC = 5;
        AIRSPACE_UIR_AREA = 6;
        AIRSPACE_UIR_OCEANIC = 7;
    }
    enum Classification {
        AIRSPACE_CLASS_UNKNOWN = 0;
        AIRSPACE_CLASS_A = 1;
        AIRSPACE_CLASS_B = 2;
        AIRSPACE_CLASS_C = 3;
        AIRSPACE_CLASS_D = 4;
        AIRSPACE_CLASS_E = 5;
        AIRSPACE_CLASS_G = 6;
    }
    string area_code = 1;
    string icao_code = 2;
    string airspace_center = 3;
    string controlled_airspace_name = 4;
    ControlledAirspace.Type type = 5;
    ControlledAirspace.Classification classification = 6;
    AirspaceGeometry geometry = 7;
    string tower_airport_icao = 8;
}

message ControlFacility {
    enum Type {
        FACILITY_UNKNOWN = 0;
        FACILITY_TOWER = 1;
        FACILITY_TERMINAL = 2;
        FACILITY_CENTER = 3;
        FACILITY_OCEANIC = 4;
    }
    string call_sign = 1;
    string name = 2;
    ControlFacility.Type type = 3;
}

message ClientToServer {

    message Connect {
        string token = 1;
    }
    message QueryAirport {
        string icao_code = 1;
    }
    message QueryTaxiPath {
        string airport_icao = 1;
        string aircraft_model_icao =  2;
        GeoPoint from_point = 3;
        GeoPoint to_point = 4;
    }
    message CreateAircraft {
        Aircraft aircraft = 1;
    }
    message UpdateAircraftSituation {
        int32 aircraft_id = 1;
        Aircraft.Situation situation = 2;
    }
    message RemoveAircraft {
        int32 aircraft_id = 1;
    }

    uint64 id = 1;
    google.protobuf.Timestamp sent_at = 2;
    oneof payload {
        Connect connect = 101;
        QueryAirport query_airport = 102;
        CreateAircraft create_aircraft = 103;
        UpdateAircraftSituation update_aircraft_situation = 104;
        RemoveAircraft remove_aircraft = 105;
        QueryTaxiPath query_taxi_path = 106;
    }
}

message ServerToClient {

    message FaultDeclined {
        string message = 1;
    }
    message FaultNotFound {
        string message = 1;
    }

    message ReplyConnect {
        string server_banner = 2;
    }
    message ReplyCreateAircraft {
        int32 created_aircraft_id = 1;
    }
    message ReplyQueryAirport {
        Airport airport = 1;
    }
    message ReplyQueryTaxiPath {
        bool success = 1;
        TaxiPath taxi_path = 2;
    }

    message NotifyAircraftCreated {
        Aircraft aircraft = 1;
    }
    message NotifyAircraftSituationUpdated {
        int32 airctaft_id = 1;
        Aircraft.Situation situation = 2;
    }
    message NotifyAircraftRemoved {
        int32 airctaft_id = 1;
    }

    uint64 id = 2;
    uint64 reply_to_request_id = 3;
    google.protobuf.Timestamp sent_at = 4;
    google.protobuf.Timestamp request_sent_at = 5;
    google.protobuf.Timestamp request_received_at = 6;

    oneof payload {
        ReplyConnect reply_connect = 1101;
        ReplyQueryAirport reply_query_airport = 1102;
        ReplyCreateAircraft reply_create_aircraft = 1103;
        ReplyQueryTaxiPath reply_query_taxi_path = 1106;
        NotifyAircraftCreated notify_aircraft_created = 201;
        NotifyAircraftSituationUpdated notify_aircraft_situation_updated = 202;
        NotifyAircraftRemoved notify_aircraft_removed = 203;
        FaultDeclined fault_declined = 3001;
        FaultNotFound fault_not_found = 3002;
    }
}
